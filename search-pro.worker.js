const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/en/\":{\"documentCount\":191,\"nextId\":191,\"documentIds\":{\"0\":\"13\",\"1\":\"13#thanks-to-the-following-contributors-for-their-contributions-and-improvement-of-the-project\",\"2\":\"13#thanks-to-the-following-contributors-for-adding-some-documentation\",\"3\":\"25\",\"4\":\"25#prerequisites\",\"5\":\"25#installation-via-nuget\",\"6\":\"25#declare-interfaces\",\"7\":\"25#register-and-configure-interfaces\",\"8\":\"25#global-configuration\",\"9\":\"25#inject-and-invoke-interfaces\",\"10\":\"26\",\"11\":\"26#positions-of-each-attribute\",\"12\":\"26#return-attribute\",\"13\":\"26#default-return-attribute\",\"14\":\"26#rawreturnattribute\",\"15\":\"26#jsonreturnattribute\",\"16\":\"26#xmlreturnattribute\",\"17\":\"26#nonereturnattribute\",\"18\":\"26#action-attributes\",\"19\":\"26#httphostattribute\",\"20\":\"26#httpgetattribute\",\"21\":\"26#httppostattribute\",\"22\":\"26#httpputattribute\",\"23\":\"26#httpdeleteattribute\",\"24\":\"26#httppatchattribute\",\"25\":\"26#headerattribute\",\"26\":\"26#timeoutattribute\",\"27\":\"26#formfieldattribute\",\"28\":\"26#formdatatextattribute\",\"29\":\"26#parameter-attributes\",\"30\":\"26#pathqueryattribute\",\"31\":\"26#formcontentattribute\",\"32\":\"26#formfieldattribute-1\",\"33\":\"26#formdatacontentattribute\",\"34\":\"26#formdatatextattribute-1\",\"35\":\"26#jsoncontentattribute\",\"36\":\"26#xmlcontentattribute\",\"37\":\"26#uriattribute\",\"38\":\"26#timeoutattribute-1\",\"39\":\"26#headerattribute-1\",\"40\":\"26#headersattribute\",\"41\":\"26#rawstringcontentattribute\",\"42\":\"26#rawjsoncontentattribute\",\"43\":\"26#rawxmlcontentattribute\",\"44\":\"26#rawformcontentattribute\",\"45\":\"26#filter-attributes\",\"46\":\"26#loggingfilterattribute\",\"47\":\"26#cache-attributes\",\"48\":\"26#cacheattribute\",\"49\":\"27\",\"50\":\"27#cancellationtoken-type\",\"51\":\"27#fileinfo-type\",\"52\":\"27#subtypes-of-httpcontent\",\"53\":\"27#subtypes-of-iapiparameter\",\"54\":\"27#formdatafile-type\",\"55\":\"27#jsonpatchdocument-type\",\"56\":\"28\",\"57\":\"28#parameter-value-validation\",\"58\":\"28#request-or-response-model-validation\",\"59\":\"28#disable-data-validation\",\"60\":\"29\",\"61\":\"29#uri-concatenation-rules\",\"62\":\"29#handling-request-exceptions\",\"63\":\"29#conditional-request-retries\",\"64\":\"29#handling-form-collections\",\"65\":\"29#adjusting-default-parameter-attributes\",\"66\":\"29#adapting-to-irregular-interfaces\",\"67\":\"29#unfriendly-parameter-name-aliases\",\"68\":\"29#form-field-as-json-text\",\"69\":\"29#nested-form-fields\",\"70\":\"29#unexpected-content-type-in-response\",\"71\":\"29#dynamic-httphost\",\"72\":\"29#passing-absolute-uri-with-uriattribute\",\"73\":\"29#custom-implementation-of-httphostbaseattribute\",\"74\":\"29#request-signing\",\"75\":\"29#dynamically-appending-request-signature\",\"76\":\"29#sorting-form-fields\",\"77\":\"29#net-8-aot-publishing\",\"78\":\"29#httpclient-configuration\",\"79\":\"29#primary-httpmessagehandler-configuration\",\"80\":\"29#client-certificate-configuration\",\"81\":\"29#maintaining-cookiecontainer\",\"82\":\"29#using-filters-in-interface-configuration\",\"83\":\"29#custom-request-and-response-content-parsing\",\"84\":\"29#custom-cache-provider\",\"85\":\"29#custom-self-explanatory-parameter-types\",\"86\":\"30\",\"87\":\"30#objects-and-concepts\",\"88\":\"30#itokenproviderfactory\",\"89\":\"30#itokenprovider\",\"90\":\"30#oauthtokenattribute\",\"91\":\"30#oauthtokenhandler\",\"92\":\"30#oauth-client-mode\",\"93\":\"30#register-tokenprovider-for-the-interface\",\"94\":\"30#applying-the-token\",\"95\":\"30#using-the-oauthtoken-attribute\",\"96\":\"30#using-oauthtokenhandler\",\"97\":\"30#tokenprovider-shared-by-multiple-interfaces\",\"98\":\"30#custom-tokenprovider\",\"99\":\"30#delegate-tokenprovider\",\"100\":\"30#full-implementation-of-tokenprovider\",\"101\":\"30#options-for-custom-tokenprovider\",\"102\":\"31\",\"103\":\"31#configuration-optional\",\"104\":\"31#declare-attributes\",\"105\":\"32\",\"106\":\"32#jsonrpc-declaration\",\"107\":\"32#jsonrpc-data-packet\",\"108\":\"33\",\"109\":\"33#installation\",\"110\":\"33#usage\",\"111\":\"33#command-introduction\",\"112\":\"33#tool-principle\",\"113\":\"34\",\"114\":\"34#introduction\",\"115\":\"34#webapiclientcore\",\"116\":\"34#webapiclient-no-longer-updated\",\"117\":\"34#service-channels\",\"118\":\"35\",\"119\":\"35#nuget-packages\",\"120\":\"35#http-requests\",\"121\":\"36\",\"122\":\"36#why-do-declared-http-interfaces-need-to-inherit-the-ihttpapi-interface\",\"123\":\"36#can-an-http-interface-inherit-from-another-http-interface\",\"124\":\"36#how-can-i-validate-the-validity-of-a-proxy-before-using-the-proxyattribute-host-port-attribute\",\"125\":\"36#why-is-it-not-supported-to-declare-the-return-type-of-an-interface-method-as-task-instead-of-task-or-itask\",\"126\":\"36#how-can-i-download-a-file-using-webapiclient\",\"127\":\"36#besides-declaring-the-return-type-of-an-interface-as-itask-httpresponsemessage-what-other-abstract-return-types-can-be-declared\",\"128\":\"36#can-the-parameters-declared-in-an-interface-be-of-type-object-or-certain-base-classes\",\"129\":\"36#how-can-i-use-synchronous-requests-with-webapiclient\",\"130\":\"37\",\"131\":\"37#webapiclient-jit\",\"132\":\"37#webapiclient-aot\",\"133\":\"38\",\"134\":\"38#if-you-find-webapiclient-helpful-please-consider-supporting-us\",\"135\":\"39\",\"136\":\"54\",\"137\":\"54#asp-net-core-2-1\",\"138\":\"54#asp-net-mvc-autofac\",\"139\":\"55\",\"140\":\"55#using-httpapi-register-resolve\",\"141\":\"56\",\"142\":\"56#scope-of-attributes\",\"143\":\"56#priority-of-attributes\",\"144\":\"57\",\"145\":\"57#ipetapi\",\"146\":\"57#iuserapi\",\"147\":\"58\",\"148\":\"58#simple-example-of-get-request\",\"149\":\"58#using-the-httphost-attribute\",\"150\":\"58#converting-response-json-xml-content-to-strongly-typed-models\",\"151\":\"58#implicit-conversion-to-strongly-typed-model\",\"152\":\"58#explicit-conversion-to-strongly-typed-model\",\"153\":\"58#request-cancellation-token-parameter\",\"154\":\"59\",\"155\":\"59#parameter-alias\",\"156\":\"59#parameter-model-attribute-annotations\",\"157\":\"60\",\"158\":\"60#validation-of-parameter-values\",\"159\":\"60#validation-of-parameter-property-values\",\"160\":\"60#validation-of-both\",\"161\":\"61\",\"162\":\"61#webapiclient-example\",\"163\":\"61#asp-net-server-example\",\"164\":\"62\",\"165\":\"62#submitting-with-json-or-xml\",\"166\":\"62#submitting-with-x-www-form-urlencoded\",\"167\":\"62#submitting-with-multipart-form-data\",\"168\":\"62#submitting-with-specific-httpcontent-types\",\"169\":\"63\",\"170\":\"63#uri-format\",\"171\":\"63#dynamic-path\",\"172\":\"63#dynamic-uri\",\"173\":\"63#query-parameters\",\"174\":\"63#multiple-query-parameters-flattened\",\"175\":\"63#multiple-query-parameters-merged-into-a-model\",\"176\":\"63#multiple-query-parameters-flattened-partially-merged-into-a-model\",\"177\":\"63#explicitly-declare-the-pathquery-attribute\",\"178\":\"63#using-the-parameter-kind-query-attribute\",\"179\":\"64\",\"180\":\"64#_3-1-customizing-iapiparameterattribute\",\"181\":\"65\",\"182\":\"65#_4-1-try-catch-exception-handling\",\"183\":\"65#_4-2-retry-strategy\",\"184\":\"65#_4-3-rx-extensions\",\"185\":\"66\",\"186\":\"66#_1-1-tracefilterattribute\",\"187\":\"66#_1-2-custom-filters\",\"188\":\"67\",\"189\":\"67#_2-1-custom-global-filters\",\"190\":\"67#_2-2-custom-oauth2-global-filter\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[12],\"2\":[9],\"3\":[2],\"4\":[1,17],\"5\":[3,35],\"6\":[2,52],\"7\":[4,79],\"8\":[2,38],\"9\":[4,39],\"10\":[3,50],\"11\":[4,20],\"12\":[2,59],\"13\":[3,65],\"14\":[1,20],\"15\":[1,19],\"16\":[1,19],\"17\":[1,23],\"18\":[2],\"19\":[1,38],\"20\":[1,19],\"21\":[1,20],\"22\":[1,20],\"23\":[1,20],\"24\":[1,26],\"25\":[1,20],\"26\":[1,21],\"27\":[1,24],\"28\":[1,23],\"29\":[2],\"30\":[1,39],\"31\":[1,26],\"32\":[1,27],\"33\":[1,29],\"34\":[1,30],\"35\":[1,22],\"36\":[1,22],\"37\":[1,30],\"38\":[1,32],\"39\":[1,22],\"40\":[1,32],\"41\":[1,13],\"42\":[1,13],\"43\":[1,13],\"44\":[1,21],\"45\":[2,17],\"46\":[1,38],\"47\":[2,30],\"48\":[1,28],\"49\":[2,14],\"50\":[2,28],\"51\":[2,27],\"52\":[3,16],\"53\":[3,20],\"54\":[2,31],\"55\":[2,29],\"56\":[2,12],\"57\":[3,25],\"58\":[5,35],\"59\":[3,37],\"60\":[2],\"61\":[3,50],\"62\":[3,67],\"63\":[3,67],\"64\":[3,58],\"65\":[4,80],\"66\":[4],\"67\":[4,52],\"68\":[5,58],\"69\":[3,70],\"70\":[5,66],\"71\":[2],\"72\":[5,13],\"73\":[4,76],\"74\":[2],\"75\":[4,69],\"76\":[3,36],\"77\":[5,50],\"78\":[2,31],\"79\":[3,22],\"80\":[3,40],\"81\":[2,48],\"82\":[5,53],\"83\":[6,126],\"84\":[3,58],\"85\":[5,100],\"86\":[3,17],\"87\":[3],\"88\":[1,17],\"89\":[1,20],\"90\":[1,23],\"91\":[1,34],\"92\":[3],\"93\":[5,30],\"94\":[3],\"95\":[4,99],\"96\":[2,144],\"97\":[5,62],\"98\":[2,59],\"99\":[2,30],\"100\":[4,28],\"101\":[4,30],\"102\":[3,19],\"103\":[3,10],\"104\":[2,24],\"105\":[2,36],\"106\":[2,22],\"107\":[3,29],\"108\":[6,31],\"109\":[1,7],\"110\":[1,27],\"111\":[2,29],\"112\":[2,35],\"113\":[1,3],\"114\":[1,5],\"115\":[1,40],\"116\":[5,38],\"117\":[2,19],\"118\":[2],\"119\":[2,18],\"120\":[2,59],\"121\":[3],\"122\":[12,29],\"123\":[8,42],\"124\":[13,15],\"125\":[18,38],\"126\":[9,11],\"127\":[17,15],\"128\":[16,38],\"129\":[9,32],\"130\":[1,37],\"131\":[2,57],\"132\":[2,72],\"133\":[2],\"134\":[9,11],\"135\":[1,34],\"136\":[4],\"137\":[5,46],\"138\":[5,66],\"139\":[4],\"140\":[4,165],\"141\":[5],\"142\":[3,54],\"143\":[3,26],\"144\":[4,30],\"145\":[1,135],\"146\":[1,109],\"147\":[3],\"148\":[5,27],\"149\":[3,41],\"150\":[9],\"151\":[6,45],\"152\":[6,56],\"153\":[4,29],\"154\":[4,18],\"155\":[2,21],\"156\":[4,36],\"157\":[4,22],\"158\":[4,29],\"159\":[5,49],\"160\":[3,33],\"161\":[2,47],\"162\":[2,30],\"163\":[4,25],\"164\":[4],\"165\":[5,32],\"166\":[6,30],\"167\":[5,30],\"168\":[5,40],\"169\":[2],\"170\":[2,34],\"171\":[2,50],\"172\":[2,34],\"173\":[2],\"174\":[4,12],\"175\":[7,18],\"176\":[10,20],\"177\":[4,45],\"178\":[3,17],\"179\":[3,23],\"180\":[4,100],\"181\":[6],\"182\":[6,15],\"183\":[4,23],\"184\":[4,43],\"185\":[2,25],\"186\":[2,101],\"187\":[4,56],\"188\":[3,37],\"189\":[5,27],\"190\":[5,81]},\"averageFieldLength\":[3.3664921465968587,36.785898741881894],\"storedFields\":{\"0\":{\"h\":\"👯 Contributors\"},\"1\":{\"h\":\"Thanks to the following contributors for their contributions and improvement of the project\"},\"2\":{\"h\":\"Thanks to the following contributors for adding some documentation\"},\"3\":{\"h\":\"Getting Started\"},\"4\":{\"h\":\"Prerequisites\",\"t\":[\"WebApiClientCore requires the project to support .NET Standard 2.1 and have a dependency injection environment.\"]},\"5\":{\"h\":\"Installation via NuGet\",\"t\":[\"Package Name\",\"NuGet\",\"Description\",\"WebApiClientCore\",\"Base package\",\"WebApiClientCore.Extensions.OAuths\",\"OAuth2 and token management extensions package\",\"WebApiClientCore.Extensions.NewtonsoftJson\",\"Newtonsoft's Json.NET extensions package\",\"WebApiClientCore.Extensions.JsonRpc\",\"JsonRpc calling extensions package\",\"WebApiClientCore.OpenApi.SourceGenerator\",\"dotnet tool to parse and generate WebApiClientCore interface code from local or remote OpenApi documents\"]},\"6\":{\"h\":\"Declare Interfaces\",\"t\":[\"[LoggingFilter] [HttpHost(\\\"http://localhost:5000/\\\")] public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, CancellationToken token = default); // POST application/json content [HttpPost(\\\"api/users\\\")] Task<User> PostJsonAsync([JsonContent] User user, CancellationToken token = default); // POST application/xml content [HttpPost(\\\"api/users\\\")] Task<User> PostXmlAsync([XmlContent] User user, CancellationToken token = default); // POST x-www-form-urlencoded content [HttpPost(\\\"api/users\\\")] Task<User> PostFormAsync([FormContent] User user, CancellationToken token = default); // POST multipart/form-data content [HttpPost(\\\"api/users\\\")] Task<User> PostFormDataAsync([FormDataContent] User user, FormDataFile avatar, CancellationToken token = default); } public class User { [JsonPropertyName(\\\"account\\\")] public string Account { get; set; } = string.Empty; public string Password { get; set; } = string.Empty; }\"]},\"7\":{\"h\":\"Register and Configure Interfaces\",\"t\":[\"AspNetCore Startup\",\"public void ConfigureServices(IServiceCollection services) { services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.UseLogging = Environment.IsDevelopment(); o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); // o.JsonSerializeOptions -> json serialization options // o.JsonDeserializeOptions -> json deserialization options // o.KeyValueSerializeOptions -> key-value serialization options // o.XmlSerializeOptions -> xml serialization options // o.XmlDeserializeOptions -> xml deserialization options // o.GlobalFilters -> global filter collection }); }\",\"Console\",\"public static void Main(string[] args) { // Create manually in an environment without dependency injection var services = new ServiceCollection(); services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.UseLogging = Environment.IsDevelopment(); o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }); }\",\"Prism.Unity\",\"<PackageReference Include=\\\"Unity.Microsoft.DependencyInjection\\\" Version=\\\"5.11.5\\\" />\",\"public partial class App { protected override IContainerExtension CreateContainerExtension() { var services = new ServiceCollection(); services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.UseLogging = Environment.IsDevelopment(); o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }); var container = new Unity.UnityContainer(); Unity.Microsoft.DependencyInjection.ServiceProviderExtensions.BuildServiceProvider(services, container); return new Prism.Unity.UnityContainerExtension(container); } protected override void RegisterTypes(IContainerRegistry containerRegistry) { } }\"]},\"8\":{\"h\":\"Global Configuration\",\"t\":[\"Global configuration can be used as the default initial configuration for all interfaces, which is useful when there are many interfaces in the project.\",\"public void ConfigureServices(IServiceCollection services) { services.AddWebApiClient().ConfigureHttpApi(o => { o.JsonSerializeOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase; o.JsonDeserializeOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase; o.KeyValueSerializeOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase; }); }\"]},\"9\":{\"h\":\"Inject and Invoke Interfaces\",\"t\":[\"Inject in Scoped or Transient services\",\"public class YourService { private readonly IUserApi userApi; public YourService(IUserApi userApi) { this.userApi = userApi; } public async Task GetAsync() { // Invoke the interface var user = await this.userApi.GetAsync(id:\\\"id001\\\"); ... } }\",\"Inject in Singleton services\",\"public class YourService { private readonly IServiceScopeFactory serviceScopeFactory; public YourService(IServiceScopeFactory serviceScopeFactory) { this.serviceScopeFactory = serviceScopeFactory; } public async Task GetAsync() { // Get the interface instance from the created scope using var scope = this.serviceScopeFactory.CreateScope(); var userApi = scope.ServiceProvider.GetRequiredService<IUserApi>(); var user = await userApi.GetAsync(id:\\\"id001\\\"); ... } }\"]},\"10\":{\"h\":\"Built-in Attributes\",\"t\":[\"Built-in attributes refer to some features provided within the framework that can be used out of the box to meet various application requirements. Developers can also write custom attributes to meet specific scenario needs and then apply them to interfaces, methods, or parameters.\",\"Execution Order Before\",\"Parameter value validation -> IApiActionAttribute -> IApiParameterAttribute -> IApiReturnAttribute -> IApiFilterAttribute\",\"Execution Order After\",\"IApiReturnAttribute -> Return value validation -> IApiFilterAttribute\"]},\"11\":{\"h\":\"Positions of Each Attribute\",\"t\":[\"[IApiFilterAttribute]/*Applied to all methods within the interface*/ [IApiReturnAttribute]/*Applied to all methods within the interface*/ public interface DemoApiInterface { [IApiActionAttribute] [IApiFilterAttribute]/*Applied to this method*/ [IApiReturnAttribute]/*Applied to this method*/ Task<HttpResponseMessage> DemoApiMethod([IApiParameterAttribute] ParameterClass parameterClass); }\"]},\"12\":{\"h\":\"Return Attribute\",\"t\":[\"The return attribute is used to handle the response content as the corresponding .NET data model. It follows the following rules:\",\"When the EnsureMatchAcceptContentType property of the attribute is true (default is false), it only takes effect when the AcceptContentType property value matches the Content-Type value of the response.\",\"When none of the AcceptContentType property values of the return attributes match the Content-Type value of the response, it throws an ApiReturnNotSupportedException.\",\"When the EnsureSuccessStatusCode property of the attribute is true (default is true), and the response status code is not between 200 and 299, it throws an ApiResponseStatusException.\",\"For multiple return attributes with the same AcceptContentType property value, only the attribute with the highest AcceptQuality property value takes effect.\"]},\"13\":{\"h\":\"Default Return Attribute\",\"t\":[\"By default, each interface already has multiple return attributes with an AcceptQuality of 0.1, which can handle multiple response contents such as raw types, JSON, and XML at the same time.\",\"If you want to handle the response content with a specific return attribute without considering the matching of the Content-Type, you need to declare the default parameter of the specific return attribute.\",\"[JsonReturn] // (.AcceptQuality = MAX, .EnsureSuccessStatusCode = true, .EnsureMatchAcceptContentType = false) /* The following attributes are implicitly present [RawReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] [NoneReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] [JsonReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] [XmlReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] */ Task<SpecialResultClass> DemoApiMethod();\"]},\"14\":{\"h\":\"RawReturnAttribute\",\"t\":[\"Represents the result attribute of the raw type, supports result types such as string, byte[], Stream, and HttpResponseMessage.\",\"[RawReturnAttribute] Task<HttpResponseMessage> DemoApiMethod();\"]},\"15\":{\"h\":\"JsonReturnAttribute\",\"t\":[\"Represents the result attribute of JSON content, uses System.Text.Json for serialization and deserialization.\",\"[JsonReturnAttribute] Task<JsonResultClass> DemoApiMethod();\"]},\"16\":{\"h\":\"XmlReturnAttribute\",\"t\":[\"Represents the result attribute of XML content, uses System.Xml.Serialization for serialization and deserialization.\",\"[XmlReturnAttribute] Task<XmlResultClass> DemoApiMethod();\"]},\"17\":{\"h\":\"NoneReturnAttribute\",\"t\":[\"Represents the result attribute that sets the result to the default value of the return type when the response status is 204.\",\"// if response status code is 204, return default value of return type [NoneReturnAttribute] Task<int> DemoApiMethod();\"]},\"18\":{\"h\":\"Action Attributes\"},\"19\":{\"h\":\"HttpHostAttribute\",\"t\":[\"The HttpHost attribute can only be used when the request domain is a known constant.\",\"[HttpHost(\\\"http://localhost:5000/\\\")] // Applies to all methods under the interface public interface IUserApi { Task<User> GetAsync(string id); [HttpHost(\\\"http://localhost:8000/\\\")] // Overrides the HttpHost declared in the interface Task<User> PostAsync(User user); }\"]},\"20\":{\"h\":\"HttpGetAttribute\",\"t\":[\"GET request\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] // Supports null, absolute, or relative paths Task<User> GetAsync(string id); }\"]},\"21\":{\"h\":\"HttpPostAttribute\",\"t\":[\"POST request\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] // Supports null, absolute, or relative paths Task<User> PostAsync([JsonContent] User user); }\"]},\"22\":{\"h\":\"HttpPutAttribute\",\"t\":[\"PUT request\",\"public interface IUserApi { [HttpPut(\\\"api/users\\\")] // Supports null, absolute, or relative paths Task<User> PutAsync([JsonContent] User user); }\"]},\"23\":{\"h\":\"HttpDeleteAttribute\",\"t\":[\"DELETE request\",\"public interface IUserApi { [HttpDelete(\\\"api/users\\\")] // Supports null, absolute, or relative paths Task<User> DeleteAsync([JsonContent] User user); }\"]},\"24\":{\"h\":\"HttpPatchAttribute\",\"t\":[\"PATCH request\",\"public interface IUserApi { [HttpPatch(\\\"api/users/{id}\\\")] Task<UserInfo> PatchAsync(string id, JsonPatchDocument<User> doc); } var doc = new JsonPatchDocument<User>(); doc.Replace(item => item.Account, \\\"laojiu\\\"); doc.Replace(item => item.Email, \\\"laojiu@qq.com\\\");\"]},\"25\":{\"h\":\"HeaderAttribute\",\"t\":[\"Constant value request header.\",\"public interface IUserApi { [Header(\\\"headerName1\\\", \\\"headerValue1\\\")] [Header(\\\"headerName2\\\", \\\"headerValue2\\\")] [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); }\"]},\"26\":{\"h\":\"TimeoutAttribute\",\"t\":[\"Constant value request timeout duration.\",\"public interface IUserApi { [Timeout(10 * 1000)] // Timeout duration is 10 seconds [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); }\"]},\"27\":{\"h\":\"FormFieldAttribute\",\"t\":[\"Constant value x-www-form-urlencoded form field.\",\"public interface IUserApi { [FormField(\\\"fieldName1\\\", \\\"fieldValue1\\\")] [FormField(\\\"fieldName2\\\", \\\"fieldValue2\\\")] [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormContent] User user); }\"]},\"28\":{\"h\":\"FormDataTextAttribute\",\"t\":[\"Constant value multipart/form-data form field.\",\"public interface IUserApi { [FormDataText(\\\"fieldName1\\\", \\\"fieldValue1\\\")] [FormDataText(\\\"fieldName2\\\", \\\"fieldValue2\\\")] [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user); }\"]},\"29\":{\"h\":\"Parameter Attributes\"},\"30\":{\"h\":\"PathQueryAttribute\",\"t\":[\"The key-value pair of the parameter value is used as the request URL path parameter or query parameter. For general types of parameters, the PathQueryAttribute implicitly takes effect when no attribute is specified.\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync([PathQuery] string id); }\"]},\"31\":{\"h\":\"FormContentAttribute\",\"t\":[\"The key-value pair of the parameter value is used as x-www-form-urlencoded form.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user); }\"]},\"32\":{\"h\":\"FormFieldAttribute\",\"t\":[\"The parameter value is used as x-www-form-urlencoded form field and value.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, [FormField] string field1); }\"]},\"33\":{\"h\":\"FormDataContentAttribute\",\"t\":[\"The key-value pair of the parameter value is used as multipart/form-data form.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, /*Form file*/ FormDataFile headImage); }\"]},\"34\":{\"h\":\"FormDataTextAttribute\",\"t\":[\"The parameter value is used as multipart/form-data form field and value.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, /*Form file*/ FormDataFile headImage, [FormDataText] string field1); }\"]},\"35\":{\"h\":\"JsonContentAttribute\",\"t\":[\"The parameter value is serialized as the request JSON content.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([JsonContent] User user); }\"]},\"36\":{\"h\":\"XmlContentAttribute\",\"t\":[\"The parameter value is serialized as the request XML content.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([XmlContent] User user); }\"]},\"37\":{\"h\":\"UriAttribute\",\"t\":[\"The parameter value is used as the request URI, can only be applied to the first parameter, and can be a relative URI or an absolute URI.\",\"public interface IUserApi { [HttpGet] Task<User> GetAsync([Uri] Uri uri); }\"]},\"38\":{\"h\":\"TimeoutAttribute\",\"t\":[\"The parameter value is used as the timeout duration in milliseconds, and the value cannot be greater than the Timeout property of HttpClient.\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, [Timeout] int timeout); }\"]},\"39\":{\"h\":\"HeaderAttribute\",\"t\":[\"The parameter value is used as the request header.\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, [Header] string headerName1); }\"]},\"40\":{\"h\":\"HeadersAttribute\",\"t\":[\"The key-value pairs of the parameter value are used as the request headers.\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, [Headers] CustomHeaders headers); [HttpGet(\\\"api/users/{id}\\\")] Task<User> Get2Async(string id, [Headers] Dictionary<string,string> headers); } public class CustomHeaders { public string HeaderName1 { get; set; } public string HeaderName1 { get; set; } }\"]},\"41\":{\"h\":\"RawStringContentAttribute\",\"t\":[\"Raw text content.\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawStringContent(\\\"text/plain\\\")] string text); }\"]},\"42\":{\"h\":\"RawJsonContentAttribute\",\"t\":[\"Raw JSON content.\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawJsonContent] string json); }\"]},\"43\":{\"h\":\"RawXmlContentAttribute\",\"t\":[\"Raw XML content.\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawXmlContent] string xml); }\"]},\"44\":{\"h\":\"RawFormContentAttribute\",\"t\":[\"Raw x-www-form-urlencoded form content, which requires the content to be form-encoded.\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawFormContent] string form); }\"]},\"45\":{\"h\":\"Filter Attributes\",\"t\":[\"Filter attributes can be used for the final content modification before sending or viewing the response data.\"]},\"46\":{\"h\":\"LoggingFilterAttribute\",\"t\":[\"Outputs the request and response content as logs to the LoggingFactory.\",\"[LoggingFilter] // Records request logs for all methods public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); [LoggingFilter(Enable = false)] // Disables logging for this method [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([JsonContent] User user); }\"]},\"47\":{\"h\":\"Cache Attributes\",\"t\":[\"Caches the response content of this request. If the next request meets the expected conditions, it will not request the remote server again but retrieve the cached content from the IResponseCacheProvider. Developers can implement their own ResponseCacheProvider.\"]},\"48\":{\"h\":\"CacheAttribute\",\"t\":[\"Applies caching using the complete URI of the request as the cache key.\",\"public interface IUserApi { [Cache(60 * 1000)] // Cache for one minute [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); }\"]},\"49\":{\"h\":\"Special Parameters\",\"t\":[\"Special parameters refer to certain parameter types that can work without any attributes.\"]},\"50\":{\"h\":\"CancellationToken Type\",\"t\":[\"Each interface supports declaring one or more parameters of type CancellationToken for canceling request operations.\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, CancellationToken token = default); }\"]},\"51\":{\"h\":\"FileInfo Type\",\"t\":[\"Used as a file item in a multipart/form-data form to implement file upload functionality.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, FileInfo headImage); }\"]},\"52\":{\"h\":\"Subtypes of HttpContent\",\"t\":[\"public interface IUserApi { [HttpPost(\\\"api/users/{id}\\\")] Task PostAsync(StringContent text); [HttpPost(\\\"api/users/{id}\\\")] Task PostAsync(StreamContent stream); [HttpPost(\\\"api/users/{id}\\\")] Task PostAsync(ByteArrayContent bytes); }\"]},\"53\":{\"h\":\"Subtypes of IApiParameter\",\"t\":[\"Types that implement IApiParameter are called self-explanatory parameter types, which can address some complex parameters that attributes cannot solve.\"]},\"54\":{\"h\":\"FormDataFile Type\",\"t\":[\"Used as a file item in a multipart/form-data form to implement file upload functionality, equivalent to the FileInfo type.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, FormDataFile headImage); }\"]},\"55\":{\"h\":\"JsonPatchDocument Type\",\"t\":[\"Represents a JsonPatch request document.\",\"public interface IUserApi { [HttpPatch(\\\"api/users/{id}\\\")] Task<UserInfo> PatchAsync(string id, JsonPatchDocument<User> doc); } var doc = new JsonPatchDocument<User>(); doc.Replace(item => item.Account, \\\"laojiu\\\"); doc.Replace(item => item.Email, \\\"laojiu@qq.com\\\");\"]},\"56\":{\"h\":\"Data Validation\",\"t\":[\"Use ValidationAttribute subclasses to validate request parameter values and response results.\"]},\"57\":{\"h\":\"Parameter Value Validation\",\"t\":[\"public interface IUserApi { [HttpGet(\\\"api/users/{email}\\\")] Task<User> GetAsync( [EmailAddress, Required] // These validation attributes are used to validate this parameter before the request string email); }\"]},\"58\":{\"h\":\"Request or Response Model Validation\",\"t\":[\"Both properties of the User used in the request and response are validated.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([Required][JsonContent] User user); } public class User { [Required] [StringLength(10, MinimumLength = 1)] public string Account { get; set; } [Required] [StringLength(10, MinimumLength = 1)] public string Password { get; set; } }\"]},\"59\":{\"h\":\"Disable Data Validation\",\"t\":[\"Data validation is enabled by default, but you can disable it by configuring the HttpApiOptions of the interface.\",\"public void ConfigureServices(IServiceCollection services) { services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { // Disable data validation, even if validation attributes are used. o.UseParameterPropertyValidate = false; o.UseReturnValuePropertyValidate = false; }); }\"]},\"60\":{\"h\":\"Advanced Features\"},\"61\":{\"h\":\"Uri Concatenation Rules\",\"t\":[\"All Uri concatenations are generated using the constructor new Uri(Uri baseUri, Uri relativeUri).\",\"BaseUri with a trailing /\",\"http://a.com/ + b/c/d = http://a.com/b/c/d\",\"http://a.com/path1/ + b/c/d = http://a.com/path1/b/c/d\",\"http://a.com/path1/path2/ + b/c/d = http://a.com/path1/path2/b/c/d\",\"BaseUri without a trailing /\",\"http://a.com + b/c/d = http://a.com/b/c/d\",\"http://a.com/path1 + b/c/d = http://a.com/b/c/d\",\"http://a.com/path1/path2 + b/c/d = http://a.com/path1/b/c/d\",\"In fact, http://a.com and http://a.com/ are exactly the same. Their paths are both /, which is why they behave the same. To avoid common mistakes, it is recommended to use the standard baseUri format, which includes a trailing /.\"]},\"62\":{\"h\":\"Handling Request Exceptions\",\"t\":[\"When making a request to an API, regardless of the type of exception encountered, an HttpRequestException is always thrown. The inner exception of HttpRequestException contains the specific exception that occurred. Many of the internal exceptions in WebApiClientCore are based on the ApiException abstract class. In many cases, the HttpRequestException has an inner exception of type ApiException.\",\"try { var data = await api.GetAsync(); } catch (HttpRequestException ex) when (ex.InnerException is ApiInvalidConfigException configException) { // Handle request configuration exception } catch (HttpRequestException ex) when (ex.InnerException is ApiResponseStatusException statusException) { // Handle response status code exception } catch (HttpRequestException ex) when (ex.InnerException is ApiException apiException) { // Handle abstract API exception } catch (HttpRequestException ex) when (ex.InnerException is SocketException socketException) { // Handle socket connection layer exception } catch (HttpRequestException ex) { // Handle request exception } catch (Exception ex) { // Handle other exceptions }\"]},\"63\":{\"h\":\"Conditional Request Retries\",\"t\":[\"By using the ITask<> asynchronous declaration, you have access to the Retry extension, which allows you to specify retry conditions based on catching specific exceptions or evaluating the response model.\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] ITask<User> GetAsync(string id); } var result = await userApi.GetAsync(id: \\\"id001\\\") .Retry(maxCount: 3) .WhenCatch<HttpRequestException>() .WhenResult(r => r.Age <= 0);\",\"With ITask<>, you can precisely control the retry logic for a specific method. If you want to implement retries globally, consider using Polly.\"]},\"64\":{\"h\":\"Handling Form Collections\",\"t\":[\"According to OpenApi, a collection can be represented in the URI query or form in five different formats:\",\"Csv (comma-separated values)\",\"Ssv (space-separated values)\",\"Tsv (tab-separated values)\",\"Pipes (pipe-separated values)\",\"Multi (multiple key-value pairs with the same name)\",\"For an array value like id = [\\\"001\\\",\\\"002\\\"], the representations after processing with PathQueryAttribute and FormContentAttribute are as follows:\",\"CollectionFormat\",\"Data\",\"[PathQuery(CollectionFormat = CollectionFormat.Csv)]\",\"id=001,002\",\"[PathQuery(CollectionFormat = CollectionFormat.Ssv)]\",\"id=001 002\",\"[PathQuery(CollectionFormat = CollectionFormat.Tsv)]\",\"id=001\\\\002\",\"[PathQuery(CollectionFormat = CollectionFormat.Pipes)]\",\"id=001|002\",\"[PathQuery(CollectionFormat = CollectionFormat.Multi)]\",\"id=001&id=002\"]},\"65\":{\"h\":\"Adjusting Default Parameter Attributes\",\"t\":[\"WebApiClientCore executes requests and handles responses based on metadata. You can customize the description of an API method by adding the desired attributes. In modern web interfaces, JSON requests are commonly used. Therefore, when declaring default parameter attributes for non-GET or HEAD requests, the UseJsonFirstApiActionDescriptor behavior applies the JsonContentAttribute to complex parameter types.\",\"services .AddWebApiClient() .UseJsonFirstApiActionDescriptor();\",\"You can annotate IUserApi with your own subclass of ApiFilterAttribute to observe the ApiRequestContext.ActionDescriptor.Parameters[0].Attributes when calling PostAsync. You will see that the collection now includes the JsonContentAttribute by default.\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync(/*[JsonContent]*/ User user); }\"]},\"66\":{\"h\":\"Adapting to Irregular Interfaces\"},\"67\":{\"h\":\"Unfriendly Parameter Name Aliases\",\"t\":[\"For example, if the server requires a query parameter with the name field-Name, which is not allowed in C# as it is a reserved keyword or variable name, you can use the [AliasAsAttribute] to meet this requirement:\",\"public interface IUserApi { [HttpGet(\\\"api/users\\\")] ITask<string> GetAsync([AliasAs(\\\"field-Name\\\")] string fieldName); }\",\"The resulting request URI will be api/users/?field-name=fileNameValue.\"]},\"68\":{\"h\":\"Form Field as JSON Text\",\"t\":[\"Field\",\"Value\",\"field1\",\"someValue\",\"field2\",\"{\\\"name\\\":\\\"sb\\\",\\\"age\\\":18}\",\"The .NET model for field2 is:\",\"public class Field2 { public string Name {get; set;} public int Age {get; set;} }\",\"Normally, we would have to serialize the instance of field2 to JSON text and assign it to the field2 string property. By using the [JsonFormField] attribute, the JSON serialization of the Field2 type and the resulting string are automatically handled as a form field.\",\"public interface IUserApi { Task PostAsync([FormField] string field1, [JsonFormField] Field2 field2) }\"]},\"69\":{\"h\":\"Nested Form Fields\",\"t\":[\"Field\",\"Value\",\"field1\",\"someValue\",\"field2.name\",\"sb\",\"field2.age\",\"18\",\"The corresponding .NET model for the form is:\",\"public class FormModel { public string Field1 {get; set;} public Field2 Field2 {get; set;} } public class Field2 { public string Name {get; set;} public int Age {get; set;} }\",\"In a proper scenario, for complex nested data models, it is recommended to submit the FormModel using application/json. However, if the service provider requires the FormModel to be submitted using x-www-form-urlencoded, you can configure KeyValueSerializeOptions to meet this format requirement:\",\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.KeyValueSerializeOptions.KeyNamingStyle = KeyNamingStyle.FullName; });\"]},\"70\":{\"h\":\"Unexpected Content-Type in Response\",\"t\":[\"The response content appears to be JSON, but the Content-Type in the response header is not the expected value of application/json or application/xml, but something like text/html instead. This is similar to a client submitting JSON content with a Content-Type value of text/plain in the request header, which would make it difficult for the server to process.\",\"The solution is to declare the [JsonReturn] attribute on the Interface or Method, and set its EnsureMatchAcceptContentType property to false, indicating that the content type does not have to match the expected value in order to be processed.\",\"[JsonReturn(EnsureMatchAcceptContentType = false)]\"]},\"71\":{\"h\":\"Dynamic HttpHost\"},\"72\":{\"h\":\"Passing Absolute Uri with UriAttribute\",\"t\":[\"[LoggingFilter] public interface IUserApi { [HttpGet] ITask<User> GetAsync([Uri] string urlString, [PathQuery] string id); }\"]},\"73\":{\"h\":\"Custom implementation of HttpHostBaseAttribute\",\"t\":[\"[ServiceNameHost(\\\"baidu\\\")] // Using custom ServiceNameHostAttribute public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([JsonContent] User user); } /// <summary> /// Attribute to determine the host based on the service name /// </summary> public class ServiceNameHostAttribute : HttpHostBaseAttribute { public string ServiceName { get; } public ServiceNameHostAttribute(string serviceName) { this.ServiceName = serviceName; } public override Task OnRequestAsync(ApiRequestContext context) { // HostProvider is your own service, the data source can be a db or other, etc., and it is required that this service has been injected with DI HostProvider hostProvider = context.HttpContext.ServiceProvider.GetRequiredService<HostProvider>(); string host = hostProvider.ResolveHost(this.ServiceName); context.HttpContext.RequestMessage.RequestUri = new Uri(host); } }\"]},\"74\":{\"h\":\"Request Signing\"},\"75\":{\"h\":\"Dynamically Appending Request Signature\",\"t\":[\"For example, adding an additional query parameter called \\\"sign\\\" to each request's URI, which may be related to the request parameter values and needs to be calculated each time. We can implement our own sign functionality by creating a custom subclass of ApiFilterAttribute and then declaring the custom filter on the Interface or Method.\",\"public class SignFilterAttribute : ApiFilterAttribute { public override Task OnRequestAsync(ApiRequestContext context) { var signService = context.HttpContext.ServiceProvider.GetRequiredService<SignService>(); var sign = signService.SignValue(DateTime.Now); context.HttpContext.RequestMessage.AddUrlQuery(\\\"sign\\\", sign); return Task.CompletedTask; } } [SignFilter] public interface IUserApi { ... }\"]},\"76\":{\"h\":\"Sorting Form Fields\",\"t\":[\"In some cases, a so-called \\\"signature algorithm\\\" requires sorting the form fields, etc.\",\"public class SortedFormContentAttribute : FormContentAttribute { protected override IEnumerable<KeyValue> SerializeToKeyValues(ApiParameterContext context) { // Sort, add other derived fields, etc. here return base.SerializeToKeyValues(context).OrderBy(item => item.Key); } }\"]},\"77\":{\"h\":\".NET 8 AOT Publishing\",\"t\":[\"After using source generation in System.Text.Json, it is possible to AOT publish projects.\",\"Example of json serialization source generation:\",\"[JsonSerializable(typeof(User[]))] // Add all json model types used in the interfaces here [JsonSerializable(typeof(YourModel[]))] public partial class AppJsonSerializerContext : JsonSerializerContext { }\",\"Add the json source generation context to the global configuration of WebApiClientCore:\",\"services .AddWebApiClient() .ConfigureHttpApi(options => // json SG generator configuration { options.PrependJsonSerializerContext(AppJsonSerializerContext.Default); });\"]},\"78\":{\"h\":\"HttpClient Configuration\",\"t\":[\"This section covers HttpClient Factory content, which will not be discussed in detail here.\",\"services.AddHttpApi<IUserApi>().ConfigureHttpClient(httpClient => { httpClient.Timeout = TimeSpan.FromMinutes(1d); httpClient.DefaultRequestVersion = HttpVersion.Version20; httpClient.DefaultVersionPolicy = HttpVersionPolicy.RequestVersionOrLower; });\"]},\"79\":{\"h\":\"Primary HttpMessageHandler Configuration\",\"t\":[\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }) .ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler { UseProxy = true, Proxy = new WebProxy { Address = new Uri(\\\"http://proxy.com\\\"), } });\"]},\"80\":{\"h\":\"Client Certificate Configuration\",\"t\":[\"Some servers enable HTTPS mutual authentication to restrict client connections, allowing only clients with certificates issued by them to connect.\",\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }) .ConfigurePrimaryHttpMessageHandler(() => { var handler = new HttpClientHandler(); handler.ClientCertificates.Add(yourCert); return handler; });\"]},\"81\":{\"h\":\"Maintaining CookieContainer\",\"t\":[\"If the requested interface uses cookie-based authentication, it is important to maintain the CookieContainer instance and not let it follow the lifecycle of the HttpMessageHandler, as the default HttpMessageHandler has a minimum lifecycle of 2 minutes.\",\"var cookieContainer = new CookieContainer(); services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }) .ConfigurePrimaryHttpMessageHandler(() => { var handler = new HttpClientHandler(); handler.CookieContainer = cookieContainer; return handler; });\"]},\"82\":{\"h\":\"Using Filters in Interface Configuration\",\"t\":[\"In addition to using IApiFilterAttribute subclasses as attributes in the interface declaration, filters of type IApiFilter can also be added to the interface configuration, which will be applied to the entire interface and take precedence over IApiFilterAttribute types annotated with attributes.\",\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.GlobalFilters.Add(new UserFilter()); });\",\"public class UserFilter : IApiFilter { public Task OnRequestAsync(ApiRequestContext context) { throw new System.NotImplementedException(); } public Task OnResponseAsync(ApiResponseContext context) { throw new System.NotImplementedException(); } }\"]},\"83\":{\"h\":\"Custom Request and Response Content Parsing\",\"t\":[\"In addition to deserializing common XML or JSON response content into strongly-typed result models, you may encounter other binary protocol response content, such as Google's Protobuf binary content.\",\"public class ProtobufContentAttribute : HttpContentAttribute { public string ContentType { get; set; } = \\\"application/x-protobuf\\\"; protected override Task SetHttpContentAsync(ApiParameterContext context) { var stream = new MemoryStream(); if (context.ParameterValue != null) { Serializer.NonGeneric.Serialize(stream, context.ParameterValue); stream.Position = 0L; } var content = new StreamContent(stream); content.Headers.ContentType = new MediaTypeHeaderValue(this.ContentType); context.HttpContext.RequestMessage.Content = content; return Task.CompletedTask; } } { } public override async Task SetResultAsync(ApiResponseContext context) { var stream = await context.HttpContext.ResponseMessage.Content.ReadAsStreamAsync(); context.Result = Serializer.NonGeneric.Deserialize(context.ApiAction.Return.DataType.Type, stream); }\",\"Apply the relevant custom attributes:\",\"[ProtobufReturn] public interface IProtobufApi {...} /// <summary> /// Login and refresh the cookie /// </summary> /// <returns>Returns the login response message</returns> protected override Task<HttpResponseMessage> RefreshCookieAsync() { return this.api.LoginAsync(new Account { account = \\\"admin\\\", password = \\\"123456\\\" }); }\",\"Finally, register IUserApi and IUserLoginApi, and configure AutoRefreshCookieHandler for IUserApi:\",\"services .AddHttpApi<IUserLoginApi>(); services .AddHttpApi<IUserApi>() .AddHttpMessageHandler(s => new AutoRefreshCookieHandler(s.GetRequiredService<IUserLoginApi>()));\",\"{ protected override Task WriteLogAsync(ApiResponseContext context, LogMessage logMessage) { // Output logMessage to your target here return Task.CompletedTask; } }\"]},\"84\":{\"h\":\"Custom Cache Provider\",\"t\":[\"The default cache provider is in-memory cache. If you want to store the cache in a different storage location, you need to customize the cache provider and register it to replace the default cache provider.\",\"public static IWebApiClientBuilder UseRedisResponseCacheProvider(this IWebApiClientBuilder builder) { builder.Services.AddSingleton<IResponseCacheProvider, RedisResponseCacheProvider>(); return builder; } public class RedisResponseCacheProvider : IResponseCacheProvider { public string Name => nameof(RedisResponseCacheProvider); public Task<ResponseCacheResult> GetAsync(string key) { // Get cache from Redis throw new NotImplementedException(); } public Task SetAsync(string key, ResponseCacheEntry entry, TimeSpan expiration) { // Write cache content to Redis throw new NotImplementedException(); } }\"]},\"85\":{\"h\":\"Custom Self-Explanatory Parameter Types\",\"t\":[\"In some extreme cases, such as face comparison interfaces, the input model may not be equivalent to the transmission model. For example:\",\"JSON model required by the server:\",\" ```csharp public class FaceModel { public Bitmap Image1 {get; set;} public Bitmap Image2 {get; set;} }\",\"We want to pass Bitmap objects when constructing the model, but convert them to base64 values of Bitmap during transmission. So we need to modify the FaceModel to implement the IApiParameter interface:\",\"public class FaceModel : IApiParameter { public Bitmap Image1 { get; set; } public Bitmap Image2 { get; set; } public Task OnRequestAsync(ApiParameterContext context) { var image1 = GetImageBase64(this.Image1); var image2 = GetImageBase64(this.Image2); var model = new { image1, image2 }; var options = context.HttpContext.HttpApiOptions.JsonSerializeOptions; context.HttpContext.RequestMessage.Content = new JsonContent(model,options); } private static string GetImageBase64(Bitmap image) { using var stream = new MemoryStream(); image.Save(stream, System.Drawing.Imaging.ImageFormat.Jpeg); return Convert.ToBase64String(stream.ToArray()); } }\",\"Finally, we use the improved FaceModel to make requests:\",\"public interface IFaceApi { [HttpPost(\\\"/somePath\\\")] Task<HttpResponseMessage> PostAsync(FaceModel faces); }\"]},\"86\":{\"h\":\"OAuths & Token Extension\",\"t\":[\"With the WebApiClientCore.Extensions.OAuths extension, it is easy to support token acquisition, refresh, and application.\"]},\"87\":{\"h\":\"Objects and Concepts\"},\"88\":{\"h\":\"ITokenProviderFactory\",\"t\":[\"The factory for creating ITokenProvider, providing the ability to get or create ITokenProvider through the HttpApi interface type.\"]},\"89\":{\"h\":\"ITokenProvider\",\"t\":[\"The token provider used to obtain tokens. It triggers a re-request or token refresh in the first request after the token expires.\"]},\"90\":{\"h\":\"OAuthTokenAttribute\",\"t\":[\"The attribute for applying tokens. It creates an ITokenProvider using the ITokenProviderFactory, then uses the ITokenProvider to obtain the token, and finally applies the token to the request message.\"]},\"91\":{\"h\":\"OAuthTokenHandler\",\"t\":[\"A HTTP message handler that functions similarly to OAuthTokenAttribute. In addition, if the server still returns unauthorized (401 status code) due to unexpected reasons, it will discard the old token and request a new token to retry the request.\"]},\"92\":{\"h\":\"OAuth Client Mode\"},\"93\":{\"h\":\"Register TokenProvider for the Interface\",\"t\":[\"// Register and configure the tokenProvider for the interface in client mode services.AddClientCredentialsTokenProvider<IUserApi>(o => { o.Endpoint = new Uri(\\\"http://localhost:6000/api/tokens\\\"); o.Credentials.Client_id = \\\"clientId\\\"; o.Credentials.Client_secret = \\\"xxyyzz\\\"; });\"]},\"94\":{\"h\":\"Applying the Token\"},\"95\":{\"h\":\"Using the OAuthToken attribute\",\"t\":[\"OAuthTokenAttribute belongs to the WebApiClientCore framework layer, making it easy to manipulate request content and response models. For example, it is convenient to add the token as a form field to an existing request form or read the corresponding business model after deserializing the response message. However, it cannot implement the effect of retrying requests within the request when the token is lost after the server issues the token. Using OAuthTokenAttribute will result in a failed request that cannot be avoided.\",\"/// <summary> /// User operation interface /// </summary> [OAuthToken] public interface IUserApi { ... }\",\"The default implementation of OAuthTokenAttribute puts the token in the Authorization request header. If your interface needs to put the token in another place, such as the query of the URI, you need to override OAuthTokenAttribute:\",\"public class UriQueryTokenAttribute : OAuthTokenAttribute { protected override void UseTokenResult(ApiRequestContext context, TokenResult tokenResult) { context.HttpContext.RequestMessage.AddUrlQuery(\\\"mytoken\\\", tokenResult.Access_token); } } [UriQueryToken] public interface IUserApi { ... }\"]},\"96\":{\"h\":\"Using OAuthTokenHandler\",\"t\":[\"The strength of OAuthTokenHandler is its support for multiple attempts within a single request. After the server issues the token, if the server loses the token, OAuthTokenHandler will discard and re-request the token within the same request when it receives a 401 status code. It will use the new token to retry the request, making it appear as a normal request. However, OAuthTokenHandler is not an object of the WebApiClientCore framework layer. It can only access the original HttpRequestMessage and HttpResponseMessage. If you need to append the token to the Content of the HttpRequestMessage, it is very difficult. Similarly, if you want to use a field in the HttpResponseMessage's Content corresponding to the business model as the basis for determining the token's validity instead of using HTTP status codes (such as 401), it is also a challenging task.\",\"// Register OAuthTokenHandler when registering the interface services .AddHttpApi<IUserApi>() .AddOAuthTokenHandler();\",\"The default implementation of OAuthTokenHandler puts the token in the Authorization request header. If your interface needs to put the token in another place, such as the query of the URI, you need to override OAuthTokenHandler:\",\"public class UriQueryOAuthTokenHandler : OAuthTokenHandler { /// <summary> /// HTTP message handler for applying tokens /// </summary> /// <param name=\\\"tokenProvider\\\">Token provider</param> public UriQueryOAuthTokenHandler(ITokenProvider tokenProvider) : base(tokenProvider) { } /// <summary> /// Apply the token /// </summary> /// <param name=\\\"request\\\"></param> /// <param name=\\\"tokenResult\\\"></param> protected override void UseTokenResult(HttpRequestMessage request, TokenResult tokenResult) { // var builder = new UriBuilder(request.RequestUri); // builder.Query += \\\"mytoken=\\\" + Uri.EscapeDataString(tokenResult.Access_token); // request.RequestUri = builder.Uri; var uriValue = new UriValue(request.RequestUri); uriValue = uriValue.AddQuery(\\\"myToken\\\", tokenResult.Access_token); request.RequestUri = uriValue.ToUri(); } } // Register UriQueryOAuthTokenHandler when registering the interface services .AddHttpApi<IUserApi>() .AddOAuthTokenHandler((s, tp) => new UriQueryOAuthTokenHandler(tp));\"]},\"97\":{\"h\":\"TokenProvider Shared by Multiple Interfaces\",\"t\":[\"You can set a base interface for the HTTP interface and configure the TokenProvider for the base interface. For example, the xxx and yyy interfaces below both belong to IBaidu, and you only need to configure the TokenProvider for IBaidu.\",\"[OAuthToken] public interface IBaidu { } public interface IBaidu_XXX_Api : IBaidu { [HttpGet] Task xxxAsync(); } public interface IBaidu_YYY_Api : IBaidu { [HttpGet] Task yyyAsync(); }\",\"// Register and configure the token provider for the password mode services.AddPasswordCredentialsTokenProvider<IBaidu>(o => { o.Endpoint = new Uri(\\\"http://localhost:5000/api/tokens\\\"); o.Credentials.Client_id = \\\"clientId\\\"; o.Credentials.Client_secret = \\\"xxyyzz\\\"; o.Credentials.Username = \\\"username\\\"; o.Credentials.Password = \\\"password\\\"; });\"]},\"98\":{\"h\":\"Custom TokenProvider\",\"t\":[\"The extension package already includes two standard token request modes: OAuth Client and Password. However, there are still many interface providers that only embody the spirit of OAuth in their implementation. In this case, you need to customize the TokenProvider. Assuming the interface provider's token request interface is as follows:\",\"public interface ITokenApi { [HttpPost(\\\"http://xxx.com/token\\\")] Task<TokenResult> RequestTokenAsync([Parameter(Kind.Form)] string clientId, [Parameter(Kind.Form)] string clientSecret); }\"]},\"99\":{\"h\":\"Delegate TokenProvider\",\"t\":[\"Delegate TokenProvider is the simplest implementation. It uses the delegate for requesting the token as the implementation logic of the custom TokenProvider:\",\"// Register a custom tokenProvider for the interface services.AddTokenProvider<IUserApi>(s => { return s.GetRequiredService<ITokenApi>().RequestTokenAsync(\\\"id\\\", \\\"secret\\\"); });\"]},\"100\":{\"h\":\"Full Implementation of TokenProvider\",\"t\":[\"// Register CustomTokenProvider for the interface services.AddTokenProvider<IUserApi, CustomTokenProvider>();\",\"public class CustomTokenProvider : TokenProvider { public CustomTokenProvider(IServiceProvider serviceProvider) : base(serviceProvider) { } protected override Task<TokenResult> RequestTokenAsync(IServiceProvider serviceProvider) { return serviceProvider.GetRequiredService<ITokenApi>().RequestTokenAsync(\\\"id\\\", \\\"secret\\\"); } protected override Task<TokenResult> RefreshTokenAsync(IServiceProvider serviceProvider, string refresh_token) { return this.RequestTokenAsync(serviceProvider); } }\"]},\"101\":{\"h\":\"Options for Custom TokenProvider\",\"t\":[\"Each TokenProvider has a Name property, which is the same value as the Name of the ITokenProviderBuilder returned by service.AddTokenProvider(). You can use the GetOptionsValue() method of TokenProvider to read the Options value, and configure the Options using the Name of ITokenProviderBuilder.\"]},\"102\":{\"h\":\"Json.NET Extension\",\"t\":[\"Use the WebApiClientCore.Extensions.NewtonsoftJson extension to easily support Newtonsoft's Json.NET for serializing and deserializing JSON.\"]},\"103\":{\"h\":\"Configuration (optional)\",\"t\":[\"// ConfigureNewtonsoftJson services.AddHttpApi<IUserApi>().ConfigureNewtonsoftJson(o => { o.JsonSerializeOptions.NullValueHandling = NullValueHandling.Ignore; });\"]},\"104\":{\"h\":\"Declare Attributes\",\"t\":[\"Replace the built-in [JsonReturn] with [JsonNetReturn], and [JsonContent] with [JsonNetContent].\",\"/// <summary> /// User operation interface /// </summary> [JsonNetReturn] public interface IUserApi { [HttpPost(\\\"/users\\\")] Task PostAsync([JsonNetContent] User user); }\"]},\"105\":{\"h\":\"JsonRpc Extension\",\"t\":[\"In rare scenarios, developers may encounter interfaces for JsonRpc calls. Since this protocol is not very popular, WebApiClientCore provides support for this functionality through the WebApiClientCore.Extensions.JsonRpc extension package. Simply decorate the Rpc methods with [JsonRpcMethod] and the Rpc parameters with [JsonRpcParam].\"]},\"106\":{\"h\":\"JsonRpc Declaration\",\"t\":[\"[HttpHost(\\\"http://localhost:5000/jsonrpc\\\")] public interface IUserApi { [JsonRpcMethod(\\\"add\\\")] ITask<JsonRpcResult<User>> AddAsync([JsonRpcParam] string name, [JsonRpcParam] int age, CancellationToken token = default); }\"]},\"107\":{\"h\":\"JsonRpc Data Packet\",\"t\":[\" POST /jsonrpc HTTP/1.1 Host: localhost:5000 User-Agent: WebApiClientCore/1.0.6.0 Accept: application/json; q=0.01, application/xml; q=0.01 Content-Type: application/json-rpc {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"add\\\",\\\"params\\\":[\\\"laojiu\\\",18],\\\"id\\\":1}\"]},\"108\":{\"h\":\"Generate Code from OpenApi (Swagger)\",\"t\":[\"This tool allows you to parse the local or remote documentation of OpenApi and generate interface definition code files for WebApiClientCore. It also works with ASP.NET Core swagger json files.\"]},\"109\":{\"h\":\"Installation\",\"t\":[\"dotnet tool install WebApiClientCore.OpenApi.SourceGenerator -g\"]},\"110\":{\"h\":\"Usage\",\"t\":[\"Run the following command to output the corresponding interface definition code files for WebApiClientCore to the \\\"output\\\" folder in the current directory.\",\"# Example WebApiClientCore.OpenApi.SourceGenerator -o https://petstore.swagger.io/v2/swagger.json\"]},\"111\":{\"h\":\"Command Introduction\",\"t\":[\" -o OpenApi, --openapi=OpenApi Required. The local file path or remote Uri address of the openApi json. -n Namespace, --namespace=Namespace The namespace of the code, such as WebApiClientCore. --help Display this help screen.\"]},\"112\":{\"h\":\"Tool Principle\",\"t\":[\"Use NSwag to parse the json of OpenApi and obtain the OpenApiDocument object.\",\"Use RazorEngine to compile the OpenApiDocument into html using a cshtml template.\",\"Use XDocument to extract the textual code from the html, obtaining the declarative code for WebApiClientCore.\",\"Beautify the code and output it to a local file.\"]},\"113\":{\"h\":\"Overview\",\"t\":[\"Stargazers over time\"]},\"114\":{\"h\":\"Introduction\",\"t\":[\"WebApiClient has two versions.\"]},\"115\":{\"h\":\"WebApiclientCore\",\"t\":[\"WebApiclientCore is a newly redesigned version based on .NET Standard 2.1. It perfectly integrates with the new .NET abstraction API, including dependency injection, configuration, options, logging, etc. You are welcome to use, ask questions, contribute code, and provide ideas.\"]},\"116\":{\"h\":\"WebApiClient [No longer updated]\",\"t\":[\"WebApiClient.JIT and WebApiClient.AOT are old versions based on .NET Standard 2.0 (with additional support for .NET Framework 4.5+). They support .NET Core 2.0+ and can also be used on older versions of .NET, but we will not continue to update them.\"]},\"117\":{\"h\":\"Service Channels\",\"t\":[\"QQ Group 825135345 Please indicate WebApiClient when joining the group.\",\"For feedback, please visit https://github.com/dotnetcore/WebApiClient/issues\"]},\"118\":{\"h\":\"Getting Started\"},\"119\":{\"h\":\"NuGet Packages\",\"t\":[\"Package Name\",\"Description\",\"NuGet\",\"WebApiClient.JIT\",\"Stable for non-AOT compiled platforms\",\"WebApiClient.AOT\",\"Supports all platforms including IOS and UWP\"]},\"120\":{\"h\":\"HTTP Requests\",\"t\":[\"Interface declaration\",\"public interface IUserApi : IHttpApi { // GET api/user?account=laojiu // Return json or xml content [HttpGet(\\\"api/user\\\")] ITask<UserInfo> GetAsync(string account); // POST api/user // Body Account=laojiu&password=123456 // Return json or xml content [HttpPost(\\\"api/user\\\")] ITask<boo> AddAsync([FormContent] UserInfo user); }\",\"Interface configuration\",\"HttpApi.Register<IUserApi>().ConfigureHttpApiConfig(c => { c.HttpHost = new Uri(\\\"http://www.webapiclient.com/\\\"); c.FormatOptions.DateTimeFormat = DateTimeFormats.ISO8601_WithMillisecond; });;\",\"Interface invocation\",\"var api = HttpApi.Resolve<IUserApi>(); var user = new UserInfo { Account = \\\"laojiu\\\", Password = \\\"123456\\\" }; var user1 = await api.GetAsync(\\\"laojiu\\\"); var state = await api.AddAsync(user);\"]},\"121\":{\"h\":\"Frequently Asked Questions\"},\"122\":{\"h\":\"Why do declared HTTP interfaces need to inherit the IHttpApi interface?\",\"t\":[\"One reason is to facilitate the generation of proxy classes for the interfaces by the WebApiClient library, serving as a marker. Another reason is that by inheriting the IHttpApi interface, the proxy classes for the HTTP interfaces have a Dispose method.\"]},\"123\":{\"h\":\"Can an HTTP interface inherit from another HTTP interface?\",\"t\":[\"Yes, it is possible to inherit from another HTTP interface. The methods of the parent interface will also be treated as API methods. However, it is important to note that the interface-level attributes of the parent interface will be overridden by those of the child interface. Therefore, for better understanding, it is recommended not to use this kind of inheritance.\"]},\"124\":{\"h\":\"How can I validate the validity of a proxy before using the attribute?\",\"t\":[\"You can use the Validate method of the ProxyValidator object to validate the validity of a proxy.\"]},\"125\":{\"h\":\"Why is it not supported to declare the return type of an interface method as instead of or ?\",\"t\":[\"This is a design principle. Regardless of whether the developer is interested in the return value or not, an HTTP request will either have a response or throw an exception. If you are not interested in parsing the response, you can declare the return type as Task<HttpResponseMessage> without actually parsing the HttpResponseMessage.\"]},\"126\":{\"h\":\"How can I download a file using WebApiClient?\",\"t\":[\"You should declare the return type of the interface as ITask<HttpResponseFile>.\"]},\"127\":{\"h\":\"Besides declaring the return type of an interface as , what other abstract return types can be declared?\",\"t\":[\"Other abstract return types that can be declared include ITask<string>, ITask<Stream>, and ITask<Byte[]>.\"]},\"128\":{\"h\":\"Can the parameters declared in an interface be of type Object or certain base classes?\",\"t\":[\"Yes, you can declare parameters in an interface as Object or certain base classes. However, there may be issues with XML serialization for the data. In general, it is recommended to declare the parameters according to the specific types expected by the server.\"]},\"129\":{\"h\":\"How can I use synchronous requests with WebApiClient?\",\"t\":[\"WebApiClient is a wrapper for HttpClient. Since HttpClient does not provide synchronous request methods, WebApiClient also does not support synchronous requests. Incorrectly blocking ITask and Task return values can easily lead to deadlocks in certain environments.\"]},\"130\":{\"h\":\"Overview\",\"t\":[\"Warning\",\"You are viewing the documentation for the old versions of WebApiClient.JIT and WebApiClient.AOT. There will be no new feature updates, and we cannot guarantee quick bug fixes. We recommend migrating to the new version, WebApiClientCore, as soon as possible.\"]},\"131\":{\"h\":\"WebApiClient.JIT\",\"t\":[\"Creates proxy classes for HTTP request interfaces at runtime using Emit. When calling HttpApiClient.Create(), a proxy class for TInterface is created in a new assembly with the same class name and namespace as TInterface. Since the proxy class and TInterface are not in the same assembly, TInterface must be public.\",\"Can be directly referenced in the project by including WebApiClient.JIT.dll;\",\"Not suitable for platforms that do not support JIT technology (iOS, UWP);\",\"The interface must be public.\"]},\"132\":{\"h\":\"WebApiClient.AOT\",\"t\":[\"Modifies the compiled assembly using Mono.Cecil during the compilation process to insert IL instructions for proxy classes of HTTP request interfaces. This step is done before the AOT compilation phase. The assembly, module, and namespace of the proxy type are the same as the interface type, and its name is the interface type name with a $ prefix. These proxy classes can be seen by inspecting the compiled assembly using a decompiler.\",\"The project must install WebApiClient.AOT via NuGet to work properly;\",\"No JIT, supports a wide range of platforms;\",\"The interface does not need to be public and can be nested within a class.\"]},\"133\":{\"h\":\"Support Us\"},\"134\":{\"h\":\"If you find WebApiClient helpful, please consider supporting us\",\"t\":[\"Support the author for more quality content\",\"Thank you for maintaining the documentation\"]},\"135\":{\"h\":\"Nuget\",\"t\":[\"Package Name\",\"Nuget\",\"Description\",\"WebApiClientCore\",\"Base package\",\"WebApiClientCore.Extensions.OAuths\",\"OAuth2 and token management extensions package\",\"WebApiClientCore.Extensions.NewtonsoftJson\",\"Newtonsoft's Json.NET extensions package\",\"WebApiClientCore.Extensions.JsonRpc\",\"JsonRpc calling extensions package\",\"WebApiClientCore.OpenApi.SourceGenerator\",\"dotnet tool that parses local or remote OpenApi documents and generates WebApiClientCore interface code\"]},\"136\":{\"h\":\"Environment with Dependency Injection\"},\"137\":{\"h\":\"Asp.net core 2.1+\",\"t\":[\"Interface declaration\",\"public interface IMyWebApi : IHttpApi { [HttpGet(\\\"user/{id}\\\")] ITask<UserInfo> GetUserAsync(string id); }\",\"Configure dependency injection in Startup.cs\",\"public void ConfigureServices(IServiceCollection services) { services.AddHttpApi<IMyWebApi>(); services.ConfigureHttpApi<IMyWebApi>(o=> { o.HttpHost = new Uri(\\\"http://localhost:9999/\\\"); ... }); }\",\"Controller code\",\"public class HomeController : Controller { public async Task<UserInfo> Index([FromServices]IMyWebApi myWebApi) { return await myWebApi.GetUserAsync(\\\"id001\\\"); } }\"]},\"138\":{\"h\":\"Asp.net MVC + Autofac\",\"t\":[\"Interface declaration\",\"public interface IMyWebApi : IHttpApi { [HttpGet(\\\"user/{id}\\\")] ITask<UserInfo> GetUserAsync(string id); }\",\"Global.asax.cs Application_Start\",\"var builder = new ContainerBuilder(); builder.RegisterControllers(Assembly.GetExecutingAssembly()).PropertiesAutowired(); builder.Register(_ => new HttpApiFactory<IMyWebApi>() .ConfigureHttpApiConfig(c => { c.HttpHost = new Uri(\\\"http://localhost:9999/\\\"); c.FormatOptions.DateTimeFormat = DateTimeFormats.ISO8601_WithMillisecond; })) .As<IHttpApiFactory<IMyWebApi>>() .SingleInstance(); builder.Register(c => c.Resolve<IHttpApiFactory<IMyWebApi>>().CreateHttpApi()) .As<IMyWebApi>() .InstancePerHttpRequest(); DependencyResolver.SetResolver(new AutofacDependencyResolver(builder.Build()));\",\"Controller\",\"public class HomeController : Controller { public IMyWebApi MyWebApi { get; set; } public async Task<ActionResult> Index() { var user = await this.MyWebApi.GetUserAsync(\\\"id001\\\"); return View(user); } }\"]},\"139\":{\"h\":\"Environment without Dependency Injection\"},\"140\":{\"h\":\"Using HttpApi.Register/Resolve\",\"t\":[\"Interface declaration\",\"public interface IMyWebApi : IHttpApi { [HttpGet(\\\"user/{id}\\\")] ITask<UserInfo> GetUserAsync(string id); }\",\"Initialization code (can only be called once)\",\"HttpApi.Register<IMyWebApi>().ConfigureHttpApiConfig(c => { // Replacable serialization tools c.JsonFormatter = null; c.XmlFormatter = null; c.KeyValueFormatter = null; // Parameter and return value validation using System.ComponentModel.DataAnnotations validation attributes c.UseParameterPropertyValidate = false; c.UseReturnValuePropertyValidate = false; // Request host and HttpClient related configurations c.HttpHost = new Uri(\\\"http://localhost:9999/\\\"); c.HttpClient.Timeout = TimeSpan.FromMinutes(2d); // Format related configurations c.FormatOptions.UseCamelCase = true; c.FormatOptions.DateTimeFormat = DateTimeFormats.ISO8601_WithMillisecond; // Response cache provider configuration, used in conjunction with [CacheAttribute] c.ResponseCacheProvider = null; // Service provider, the instance is generally obtained from DI // For Asp.net core, this ServiceProvider should be the one created during the request, not the root ServiceProvider created by ConfigureServices() c.ServiceProvider = null; // Log factory, can be created and assigned independently, if kept as null, the instance is obtained from ServiceProvider c.LoggerFactory = null; });\",\"Code for making http requests\",\"var myWebApi = HttpApi.Resolve<IMyWebApi>(); var user = await myWebApi.GetUserAsync(\\\"id001\\\");\",\"The advantage of using Register/Resolve is that you only need to register IMyWebApi once at the entry point, and HttpApiFactory automatically handles the lifecycle management of IMyWebApi. In usage, you don't need to deal with releasing the myWebApi instance (even manually disposing won't release it), you will always get the same myWebApi instance within a certain period of time. When the instance exceeds the configured lifespan, it is automatically tracked and released, and a new myWebApi instance with the same configuration is provided.\"]},\"141\":{\"h\":\"Scope and Priority of Attributes\"},\"142\":{\"h\":\"Scope of Attributes\",\"t\":[\"Some attributes, such as [Header], can be applied to interfaces, methods, and parameters, with slightly different meanings and results depending on where they are used:\",\"When applied to an interface, it means that all methods under the interface will have this request header added before the request is made. When applied to a method, it means that this method will have this request header added before the request is made. When applied to a parameter, it means that the value of the parameter will be used as the value of the request header, which can be dynamically passed in by the caller.\"]},\"143\":{\"h\":\"Priority of Attributes\",\"t\":[\"Method-level attributes have higher priority than interface-level attributes. When AllowMultiple is set to true, both method-level and interface-level attributes take effect. When AllowMultiple is set to false, only the method-level attribute takes effect, and the interface-level attribute is ignored.\"]},\"144\":{\"h\":\"Full API Declaration Example\",\"t\":[\"The interfaces in this example are based on the swagger official v2/swagger.json. For more information about swagger documentation, you can use the WebApiClient.Tools.Swagger tool to generate client code.\"]},\"145\":{\"h\":\"IPetApi\",\"t\":[\"using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.Net.Http; using System.Threading; using System.Threading.Tasks; using WebApiClient; using WebApiClient.Attributes; using WebApiClient.DataAnnotations; using WebApiClient.Parameterables; namespace petstore.swagger { /// <summary> /// Everything about your Pets /// </summary> [TraceFilter] [HttpHost(\\\"https://petstore.swagger.io/v2/\\\")] public interface IPetApi : IHttpApi { /// <summary> /// Add a new pet to the store /// </summary> /// <param name=\\\"body\\\">Pet object that needs to be added to the store</param> [HttpPost(\\\"pet\\\")] ITask<HttpResponseMessage> AddPetAsync([Required] [JsonContent] Pet body); /// <summary> /// Update an existing pet /// </summary> /// <param name=\\\"body\\\">Pet object that needs to be added to the store</param> [HttpPut(\\\"pet\\\")] ITask<HttpResponseMessage> UpdatePetAsync([Required] [JsonContent] Pet body); /// <summary> /// Finds Pets by status /// </summary> /// <param name=\\\"status\\\">Status values that need to be considered for filter</param> /// <returns>successful operation</returns> [HttpGet(\\\"pet/findByStatus\\\")] ITask<List<Pet>> FindPetsByStatusAsync([Required] IEnumerable<Anonymous> status); /// <summary> /// Finds Pets by tags /// </summary> /// <param name=\\\"tags\\\">Tags to filter by</param> /// <returns>successful operation</returns> [Obsolete] [HttpGet(\\\"pet/findByTags\\\")] ITask<List<Pet>> FindPetsByTagsAsync([Required] IEnumerable<string> tags); /// <summary> /// Find pet by ID /// </summary> /// <param name=\\\"petId\\\">ID of pet to return</param> /// <returns>successful operation</returns> [HttpGet(\\\"pet/{petId}\\\")] ITask<Pet> GetPetByIdAsync([Required] long petId); /// <summary> /// Updates a pet in the store with form data /// </summary> /// <param name=\\\"petId\\\">ID of pet that needs to be updated</param> /// <param name=\\\"name\\\">Updated name of the pet</param> /// <param name=\\\"status\\\">Updated status of the pet</param> [HttpPost(\\\"pet/{petId}\\\")] ITask<HttpResponseMessage> UpdatePetWithFormAsync([Required] long petId, [FormContent] string name, [FormContent] string status); /// <summary> /// Deletes a pet /// </summary> /// <param name=\\\"api_key\\\"></param> /// <param name=\\\"petId\\\">Pet id to delete</param> [HttpDelete(\\\"pet/{petId}\\\")] ITask<HttpResponseMessage> DeletePetAsync([Header(\\\"api_key\\\")] string api_key, [Required] long petId); /// <summary> /// uploads an image /// </summary> /// <param name=\\\"petId\\\">ID of pet to update</param> /// <param name=\\\"additionalMetadata\\\">Additional data to pass to server</param> /// <param name=\\\"file\\\">file to upload</param> /// <returns>successful operation</returns> [TraceFilter(Enable = false)] [HttpPost(\\\"pet/{petId}/uploadImage\\\")] ITask<ApiResponse> UploadFileAsync([Required] long petId, [MulitpartContent] string additionalMetadata, MulitpartFile file); } }\"]},\"146\":{\"h\":\"IUserApi\",\"t\":[\"using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.Net.Http; using System.Threading; using System.Threading.Tasks; using WebApiClient; using WebApiClient.Attributes; using WebApiClient.DataAnnotations; using WebApiClient.Parameterables; namespace petstore.swagger { /// <summary> /// Operations about user /// </summary> [TraceFilter] [HttpHost(\\\"https://petstore.swagger.io/v2/\\\")] public interface IUserApi : IHttpApi { /// <summary> /// Create user /// </summary> /// <param name=\\\"body\\\">Created user object</param> /// <returns>successful operation</returns> [HttpPost(\\\"user\\\")] ITask<HttpResponseMessage> CreateUserAsync([Required] [JsonContent] User body); /// <summary> /// Creates list of users with given input array /// </summary> /// <param name=\\\"body\\\">List of user object</param> /// <returns>successful operation</returns> [HttpPost(\\\"user/createWithArray\\\")] ITask<HttpResponseMessage> CreateUsersWithArrayInputAsync([Required] [JsonContent] IEnumerable<User> body); /// <summary> /// Creates list of users with given input array /// </summary> /// <param name=\\\"body\\\">List of user object</param> /// <returns>successful operation</returns> [HttpPost(\\\"user/createWithList\\\")] ITask<HttpResponseMessage> CreateUsersWithListInputAsync([Required] [JsonContent] IEnumerable<User> body); /// <summary> /// Logs user into the system /// </summary> /// <param name=\\\"username\\\">The user name for login</param> /// <param name=\\\"password\\\">The password for login in clear text</param> /// <returns>successful operation</returns> [HttpGet(\\\"user/login\\\")] ITask<string> LoginUserAsync([Required] string username, [Required] string password); /// <summary> /// Logs out current logged in user session /// </summary> /// <returns>successful operation</returns> [HttpGet(\\\"user/logout\\\")] ITask<HttpResponseMessage> LogoutUserAsync(); /// <summary> /// Get user by user name /// </summary> /// <param name=\\\"username\\\">The name that needs to be fetched. Use user1 for testing.</param> /// <returns>successful operation</returns> [HttpGet(\\\"user/{username}\\\")] ITask<User> GetUserByNameAsync([Required] string username); /// <summary> /// Updated user /// </summary> /// <param name=\\\"username\\\">name that need to be updated</param> /// <param name=\\\"body\\\">Updated user object</param> [HttpPut(\\\"user/{username}\\\")] ITask<HttpResponseMessage> UpdateUserAsync([Required] string username, [Required] [JsonContent] User body); /// <summary> /// Delete user /// </summary> /// <param name=\\\"username\\\">The name that needs to be deleted</param> [HttpDelete(\\\"user/{username}\\\")] ITask<HttpResponseMessage> DeleteUserAsync([Required] string username); } }\"]},\"147\":{\"h\":\"GET/HEAD Request\"},\"148\":{\"h\":\"Simple Example of GET Request\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET <http://www.mywebapi.com/webapi/user?account=laojiu> [HttpGet(\\\"http://www.mywebapi.com/webapi/user\\\")] ITask<HttpResponseMessage> GetUserByAccountAsync(string account); } var api = HttpApi.Create<IMyWebApi>(); var response = await api.GetUserByAccountAsync(\\\"laojiu\\\");\"]},\"149\":{\"h\":\"Using the Attribute\",\"t\":[\" [HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] ITask<HttpResponseMessage> GetUserByAccountAsync(string account); }\",\"If the IMyWebApi interface has multiple methods that all point to the same server, you can extract the domain of the request and place it in the HttpHost attribute.\"]},\"150\":{\"h\":\"Converting Response JSON/XML Content to Strongly Typed Models\"},\"151\":{\"h\":\"Implicit Conversion to Strongly Typed Model\",\"t\":[\" [HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserByAccountAsync(string account); }\",\"When the return data of the method is JSON or XML text of type UserInfo, and the response Content-Type is application/json or application/xml, the original return type ITask<HttpResponseMessage> can be declared as ITask<UserInfo>.\"]},\"152\":{\"h\":\"Explicit Conversion to Strongly Typed Model\",\"t\":[\"[HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] [JsonReturn] // Indicates using Json to process the return value of type UserInfo ITask<UserInfo> GetUserByAccountAsync(string account); }\",\"When the return data of the method is JSON or XML text of type UserInfo, but the response Content-Type may not be the expected application/json or application/xml, you need to explicitly declare the [JsonReturn] or [XmlReturn] attribute.\"]},\"153\":{\"h\":\"Request Cancellation Token Parameter\",\"t\":[\"[HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu ITask<UserInfo> GetUserByAccountAsync(string account, CancellationToken token); }\",\"CancellationToken.None represents no cancellation; creating a CancellationTokenSource can provide a CancellationToken.\"]},\"154\":{\"h\":\"Parameters and Attribute Annotations\",\"t\":[\"These annotation attributes are in the namespace WebApiClient.DataAnnotations and are used to influence the serialization behavior of parameters.\"]},\"155\":{\"h\":\"Parameter Alias\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET <http://www.mywebapi.com/webapi/user?_name=laojiu> [HttpGet(\\\"http://www.mywebapi.com/webapi/user\\\")] ITask<string> GetUserByAccountAsync( [AliasAs(\\\"_name\\\")] string account); }\"]},\"156\":{\"h\":\"Parameter Model Attribute Annotations\",\"t\":[\"public class UserInfo { public string Account { get; set; } // Alias [AliasAs(\\\"a_password\\\")] public string Password { get; set; } // Date format, highest priority [DateTimeFormat(\\\"yyyy-MM-dd\\\")] [IgnoreWhenNull] // Ignore serialization if value is null public DateTime? BirthDay { get; set; } // Ignore serialization [IgnoreSerialized] public string Email { get; set; } // Date format [DateTimeFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")] public DateTime CreateTime { get; set; } }\"]},\"157\":{\"h\":\"Parameter and Parameter Property Validation\",\"t\":[\"These validation attributes all have the same base class ValidationAttribute provided by System.ComponentModel.DataAnnotations namespace from either netfx or corefx.\"]},\"158\":{\"h\":\"Validation of Parameter Values\",\"t\":[\"[HttpGet(\\\"webapi/user/GetById/{id}\\\")] ITask<HttpResponseMessage> GetByIdAsync( [Required, StringLength(10)] string id);\",\"The id parameter is required and must be a string with a maximum length of 10 characters. Otherwise, a ValidationException will be thrown.\"]},\"159\":{\"h\":\"Validation of Parameter Property Values\",\"t\":[\"public class UserInfo { [Required] [StringLength(10, MinimumLength = 1)] public string Account { get; set; } [Required] [StringLength(10, MinimumLength = 6)] public string Password { get; set; } } [HttpPut(\\\"webapi/user/UpdateWithJson\\\")] ITask<UserInfo> UpdateWithJsonAsync( [JsonContent] UserInfo user);\",\"When the user parameter is not null, it will validate its Account and Password properties. There is a UseParameterPropertyValidate property in HttpApiConfig that, when set to false, disables the validation of parameter property values.\"]},\"160\":{\"h\":\"Validation of Both\",\"t\":[\"For the example in the previous section, if we also want to ensure that the user parameter value is not null, we can declare the method as follows:\",\"[HttpPut(\\\"webapi/user/UpdateWithJson\\\")] ITask<UserInfo> UpdateWithJsonAsync( [Required, JsonContent] UserInfo user);\"]},\"161\":{\"h\":\"PATCH Request\",\"t\":[\"Json patch is a standard interaction designed for clients to partially update existing resources on the server. RFC6902 provides a detailed introduction to json patch, which can be summarized as follows:\",\"Use the HTTP PATCH request method.\",\"The request body contains json content that describes multiple operations.\",\"The Content-Type of the request is application/json-patch+json.\"]},\"162\":{\"h\":\"WebApiClient Example\",\"t\":[\"public interface IMyWebApi : IHttpApi { [HttpPatch(\\\"webapi/user\\\")] Task<UserInfo> PatchAsync(string id, JsonPatchDocument<UserInfo> doc); } var doc = new JsonPatchDocument<UserInfo>(); doc.Replace(item => item.Account, \\\"laojiu\\\"); doc.Replace(item => item.Email, \\\"laojiu@qq.com\\\"); var api = HttpApi.Create<IMyWebApi>(); await api.PatchAsync(\\\"id001\\\", doc);\"]},\"163\":{\"h\":\"Asp.net Server Example\",\"t\":[\"[HttpPatch] public async Task<UserInfo> Patch(string id, [FromBody] JsonPatchDocument<UserInfo> doc) { // The user is obtained from the database query var user = await GetUserInfoFromDbAsync(id); doc.ApplyTo(user); return user; }\"]},\"164\":{\"h\":\"POST/PUT/DELETE Requests\"},\"165\":{\"h\":\"Submitting with Json or Xml\",\"t\":[\"Use [XmlContent] or [Parameter(Kind.XmlBody)] to annotate strong-typed model parameters for submitting xml. Use [JsonContent] or [Parameter(Kind.JsonBody)] to annotate strong-typed model parameters for submitting json.\",\"// POST webapi/user // Body user's json text [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> AddUserWithJsonAsync([JsonContent] UserInfo user); // PUT webapi/user // Body user's xml text [HttpPut(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithXmlAsync([XmlContent] UserInfo user);\"]},\"166\":{\"h\":\"Submitting with x-www-form-urlencoded\",\"t\":[\"Use [FormContent] or [Parameter(Kind.Form)] to annotate strong-typed model parameters. Use [FormField] or [Parameter(Kind.Form)] to annotate simple type parameters.\",\"// POST webapi/user // Body Account=laojiu&Password=123456 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( [FormContent] UserInfo user); // POST webapi/user // Body Account=laojiu&Password=123456&fieldX=xxx [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( [FormContent] UserInfo user, [FormField] string fieldX); // POST webapi/user // Body Account=laojiu&Password=123456&fieldX=xxx [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserAsync( [Parameter(Kind.Form)] UserInfo user, [Parameter(Kind.Form)] string fieldX);\"]},\"167\":{\"h\":\"Submitting with multipart/form-data\",\"t\":[\"Use [MulitpartContent] or [Parameter(Kind.FormData)] to annotate strong-typed model parameters. Use [MulitpartText] or [Parameter(Kind.FormData)] to annotate simple type parameters. Use MulitpartFile type for submitting files.\",\"// POST webapi/user [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithMulitpartAsync( [MulitpartContent] UserInfo user); // POST webapi/user [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithMulitpartAsync( [MulitpartContent] UserInfo user, [MulitpartText] string nickName, MulitpartFile file); // POST webapi/user [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithMulitpartAsync( [Parameter(Kind.FormData)] UserInfo user, [Parameter(Kind.FormData)] string nickName, MulitpartFile file);\"]},\"168\":{\"h\":\"Submitting with specific HttpContent types\",\"t\":[\"// POST webapi/user // Body Account=laojiu&Password=123456 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( FormUrlEncodedContent user); // POST webapi/user // Body Account=laojiu&Password=123456&age=18 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( FormUrlEncodedContent user, [FormField] int age);\",\"If the parameter is a subclass of HttpContent, such as StringContent, ByteArrayContent, StreamContent, FormUrlEncodedContent, etc., it can be directly used as a parameter, but it must be placed before other parameters.\"]},\"169\":{\"h\":\"Request URI\"},\"170\":{\"h\":\"URI Format\",\"t\":[\"Regardless of the HTTP request method, such as GET or POST, the URI follows the following format: {Scheme}😕/{UserName}:{Password}@{Host}:{Port}{Path}{Query}{Fragment} For example: <http://account:password@www.example.com/path1/?p1=abc#tag>\"]},\"171\":{\"h\":\"Dynamic PATH\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET <http://www.webapiclient.com/laojiu> [HttpGet(\\\"http://www.webapiclient.com/{account}\\\"] ITask<string> GetUserByAccountAsync(string account); }\",\"Some interface methods semantically segment the path, such as GET <http://www.webapiclient.com/{account}. Here, different {account} represents personal information under different accounts. The path is declared using {parameter name}. The value is automatically replaced from the parameter (or the same-named property of the parameter model) before the request.\"]},\"172\":{\"h\":\"Dynamic URI\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET {URI} [HttpGet] ITask<string> GetUserByAccountAsync([Uri] string url); // GET {URI}?account=laojiu [HttpGet] ITask<string> GetUserByAccountAsync([Uri] string url, string account); }\",\"If the request URI is determined at runtime, you can pass the request URI as a parameter and decorate it with the [Uri] attribute as the first parameter.\"]},\"173\":{\"h\":\"Query Parameters\"},\"174\":{\"h\":\"Multiple query parameters flattened\",\"t\":[\"// GET /webapi/user?account=laojiu&password=123456 [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync(string account, string password);\"]},\"175\":{\"h\":\"Multiple query parameters merged into a model\",\"t\":[\"public class LoginInfo { public string Account { get; set; } public string Password { get; set; } } // GET /webapi/user?account=laojiu&password=123456 [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync(LoginInfo loginInfo);\"]},\"176\":{\"h\":\"Multiple query parameters flattened + partially merged into a model\",\"t\":[\"public class LoginInfo { public string Account { get; set; } public string Password { get; set; } } // GET /webapi/user?account=laojiu&password=123456&role=admin [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync(LoginInfo loginInfo, string role);\"]},\"177\":{\"h\":\"Explicitly declare the attribute\",\"t\":[\"// GET /webapi/user?account=laojiu&password=123456&role=admin [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync( [PathQuery]LoginInfo loginInfo, [PathQuery]string role);\",\"For each parameter without any attribute decoration, it is automatically decorated with [PathQuery], indicating that it is treated as a request path or request parameter. The [PathQuery] attribute can set multiple properties such as Encoding, IgnoreWhenNull, and DateTimeFormat.\"]},\"178\":{\"h\":\"Using the attribute\",\"t\":[\"// GET /webapi/user?account=laojiu&password=123456&role=admin [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync( [Parameter(Kind.Query)]LoginInfo loginInfo, [Parameter(Kind.Query)]string role);\"]},\"179\":{\"h\":\"3. Custom Attributes\",\"t\":[\"WebApiClient provides many built-in attributes, including interface-level, method-level, and parameter-level attributes. They respectively implement the IApiActionAttribute, IApiActionFilterAttribute, IApiParameterAttribute, IApiParameterable, and IApiReturnAttribute interfaces.\"]},\"180\":{\"h\":\"3.1 Customizing IApiParameterAttribute\",\"t\":[\"For example, if the server requires submission in x-www-form-urlencoded format, and the interface design is not ideal, the current requirement is to submit a JSON text fieldX={X} and fieldY={Y}. Here is how we design the corresponding interface:\",\"[HttpHost(\\\"/upload\\\")] ITask<bool> UploadAsync( [FormField][AliasAs(\\\"fieldX\\\")] string xJson, [FormField][AliasAs(\\\"fieldY\\\")] string yJson);\",\"Clearly, the parameter type string for our interface is too broad and lacks constraints. We would like it to be like this:\",\"[HttpHost(\\\"/upload\\\")] ITask<bool> UploadAsync([FormFieldJson] X fieldX, [FormFieldJson] Y fieldY);\",\"The [FormFieldJson] attribute serializes the parameter value into JSON and uses it as a field content in the form.\",\"[AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)] class FormFieldJson: Attribute, IApiParameterAttribute { public async Task BeforeRequestAsync(ApiActionContext context, ApiParameterDescriptor parameter) { var options = context.HttpApiConfig.FormatOptions; var json = context.HttpApiConfig.JsonFormatter.Serialize(parameter.Value, options); var fieldName = parameter.Name; await context.RequestMessage.AddFormFieldAsync(fieldName, json); } }\"]},\"181\":{\"h\":\"4. Exception Handling and Retry Strategies\"},\"182\":{\"h\":\"4.1 try-catch Exception Handling\",\"t\":[\"try { var user = await userApi.GetByIdAsync(\\\"id001\\\"); ... } catch (HttpStatusFailureException ex) { var error = ex.ReadAsAsync<ErrorModel>(); ... } catch (HttpApiException ex) { ... }\"]},\"183\":{\"h\":\"4.2 Retry Strategy\",\"t\":[\"try { var user1 = await userApi .GetByIdAsync(\\\"id001\\\") .Retry(3, i => TimeSpan.FromSeconds(i)) .WhenCatch<HttpStatusFailureException>(); ... } catch (HttpStatusFailureException ex) { var error = ex.ReadAsAsync<ErrorModel>(); ... } catch (HttpApiException ex) { ... } catch(Exception ex) { ... }\"]},\"184\":{\"h\":\"4.3 RX Extensions\",\"t\":[\"In some scenarios, you may not need to use the async/await programming approach. WebApiClient provides extensions to convert Task objects to IObservable objects. Here's how to use it:\",\"var unSubscriber = userApi.GetByIdAsync(\\\"id001\\\") .Retry(3, i => TimeSpan.FromSeconds(i)) .WhenCatch<HttpStatusFailureException>(); .ToObservable().Subscribe(result => { ... }, ex => { ... }); }\"]},\"185\":{\"h\":\"1. Filters\",\"t\":[\"The interface for filters is IApiActionFilterAttribute. WebApiClient provides an abstract base class called ApiActionFilterAttribute, which is much simpler to use than implementing a filter from IApiActionFilterAttribute.\"]},\"186\":{\"h\":\"1.1 TraceFilterAttribute\",\"t\":[\"This is a filter used for debugging and tracing. It can write the request and response content to a specified output target. If the output target is LoggerFactory, you need to configure a LoggerFactory instance or a ServiceProvider instance in HttpApiConfig.\",\"Interface or method using [TraceFilter]\",\"[TraceFilter(OutputTarget = OutputTarget.Console)] // Output to the console window public interface IUserApi : IHttpApi { // GET {url}?account={account}&password={password}&something={something} [HttpGet] [Timeout(10 * 1000)] // 10s timeout Task<string> GetAboutAsync( [Url] string url, UserInfo user, string something); }\",\"Output request information after the request\",\"var userApi = HttpApi.Resolve<IUserApi>(); var about = await userApi.GetAboutAsync(\\\"webapi/user/about\\\", user, \\\"somevalue\\\");\",\"IUserApi.GetAboutAsync [REQUEST] 2018-10-08 23:55:25.775 GET /webapi/user/about?Account=laojiu&password=123456&BirthDay=2018-01-01&Gender=1&something=somevalue HTTP/1.1 Host: localhost:9999 [RESPONSE] 2018-10-08 23:55:27.047 This is from NetworkSocket.Http [TIMESPAN] 00:00:01.2722715\"]},\"187\":{\"h\":\"1.2 Custom Filters\",\"t\":[\"[SignFilter] public interface IUserApi : IHttpApi { ... } class SignFilter : ApiActionFilterAttribute { public override Task OnBeginRequestAsync(ApiActionContext context) { var sign = DateTime.Now.Ticks.ToString(); context.RequestMessage.AddUrlQuery(\\\"sign\\\", sign); return base.OnBeginRequestAsync(context); } }\",\"When we need to dynamically add an additional parameter called \\\"sign\\\" to each request's URL, which may be related to configuration files, and needs to be calculated every time, we can design and apply a SignFilter as shown above.\"]},\"188\":{\"h\":\"2. Global Filters\",\"t\":[\"Global filters have a higher execution priority than non-global filters and affect all request methods. They require implementing the IApiActionFilter interface and instantiating them to be added to HttpApiConfig's GlobalFilters. General filters like [TraceFilter] also implement the IApiActionFilter interface and can be added to GlobalFilters as global filters.\"]},\"189\":{\"h\":\"2.1 Custom Global Filters\",\"t\":[\"class MyGlobalFilter : IApiActionFilter { public Task OnBeginRequestAsync(ApiActionContext context) { // do something return Task.CompletedTask; } public Task OnEndRequestAsync(ApiActionContext context) { // do something return Task.CompletedTask; } }\",\"Adding to GlobalFilters\",\"var myFilter = new MyGlobalFilter(); HttpApi.Register<IUserApi>().ConfigureHttpApiConfig(c => { c.GlobalFilters.Add(myFilter); });\"]},\"190\":{\"h\":\"2.2 Custom OAuth2 Global Filter\",\"t\":[\"/// <summary> /// Represents a token filter that provides client_credentials authentication. /// </summary> public class TokenFilter : AuthTokenFilter { /// <summary> /// Gets the URL endpoint for obtaining the token. /// </summary> public string TokenEndpoint { get; private set; } /// <summary> /// Gets the client_id. /// </summary> public string ClientId { get; private set; } /// <summary> /// Gets the client_secret. /// </summary> public string ClientSecret { get; private set; } /// <summary> /// OAuth token filter for authorization. /// </summary> /// <param name=\\\"tokenEndPoint\\\">The URL endpoint for obtaining the token.</param> /// <param name=\\\"client_id\\\">The client ID.</param> /// <param name=\\\"client_secret\\\">The client secret.</param> public TokenFilter(string tokenEndPoint, string client_id, string client_secret) { this.TokenEndpoint = tokenEndPoint ?? throw new ArgumentNullException(nameof(tokenEndPoint)); this.ClientId = client_id ?? throw new ArgumentNullException(nameof(client_id)); this.ClientSecret = client_secret ?? throw new ArgumentNullException(nameof(client_secret)); } /// <summary> /// Requests the token. /// TokenClient can be used for the request. /// </summary> /// <returns></returns> protected override async Task<TokenResult> RequestTokenResultAsync() { var tokenClient = new TokenClient(this.TokenEndpoint); return await tokenClient.RequestClientCredentialsAsync(this.ClientId, this.ClientSecret); } /// <summary> /// Requests the refresh token. /// TokenClient can be used for the refresh. /// </summary> /// <param name=\\\"refresh_token\\\">The refresh token returned when obtaining the token.</param> /// <returns></returns> protected override async Task<TokenResult> RequestRefreshTokenAsync(string refresh_token) { var tokenClient = new TokenClient(this.TokenEndpoint); return await tokenClient.RequestRefreshTokenAsync(this.ClientId, this.ClientSecret, refresh_token); } }\",\"Adding to GlobalFilters\",\"var tokenFilter = new TokenFilter(\\\"http://localhost/tokenEndpoint\\\", \\\"client\\\", \\\"secret\\\"); HttpApi.Register<IUserApi>().ConfigureHttpApiConfig(c => { c.GlobalFilters.Add(tokenFilter); });\"]}},\"dirtCount\":0,\"index\":[[\"775\",{\"1\":{\"186\":1}}],[\"😕\",{\"1\":{\"170\":1}}],[\"👯\",{\"0\":{\"0\":1}}],[\"9999\",{\"1\":{\"137\":1,\"138\":1,\"140\":1,\"186\":1}}],[\"$\",{\"1\":{\"132\":1}}],[\"4\",{\"0\":{\"181\":1,\"182\":1,\"183\":1,\"184\":1},\"1\":{\"116\":1}}],[\"401\",{\"1\":{\"91\":1,\"96\":2}}],[\"6\",{\"1\":{\"107\":1,\"159\":1}}],[\"6000\",{\"1\":{\"93\":1}}],[\"60\",{\"1\":{\"48\":1}}],[\"yjson\",{\"1\":{\"180\":1}}],[\"y\",{\"1\":{\"180\":2}}],[\"yes\",{\"1\":{\"123\":1,\"128\":1}}],[\"yyyy\",{\"1\":{\"156\":2}}],[\"yyyasync\",{\"1\":{\"97\":1}}],[\"yyy\",{\"1\":{\"97\":2}}],[\"yourcert\",{\"1\":{\"80\":1}}],[\"yourmodel\",{\"1\":{\"77\":1}}],[\"your\",{\"1\":{\"65\":1,\"73\":1,\"83\":1,\"95\":1,\"96\":1,\"145\":1}}],[\"yourservice\",{\"1\":{\"9\":4}}],[\"you\",{\"0\":{\"134\":1},\"1\":{\"13\":2,\"59\":1,\"63\":4,\"65\":3,\"67\":1,\"69\":1,\"83\":1,\"84\":2,\"95\":1,\"96\":3,\"97\":2,\"98\":1,\"101\":1,\"108\":1,\"115\":1,\"124\":1,\"125\":2,\"126\":1,\"128\":1,\"130\":1,\"134\":1,\"140\":3,\"144\":1,\"149\":1,\"152\":1,\"172\":1,\"184\":1,\"186\":1}}],[\"joining\",{\"1\":{\"117\":1}}],[\"jit\",{\"0\":{\"131\":1},\"1\":{\"116\":1,\"119\":1,\"130\":1,\"131\":2,\"132\":1}}],[\"jpeg\",{\"1\":{\"85\":1}}],[\"jsonbody\",{\"1\":{\"165\":1}}],[\"jsonformatter\",{\"1\":{\"140\":1,\"180\":1}}],[\"jsonformfield\",{\"1\":{\"68\":2}}],[\"jsonnetcontent\",{\"1\":{\"104\":2}}],[\"jsonnetreturn\",{\"1\":{\"104\":2}}],[\"jsonnamingpolicy\",{\"1\":{\"8\":3}}],[\"jsonserializercontext\",{\"1\":{\"77\":1}}],[\"jsonserializeoptions\",{\"1\":{\"7\":1,\"8\":1,\"85\":1,\"103\":1}}],[\"jsonserializable\",{\"1\":{\"77\":2}}],[\"jsonpatch\",{\"1\":{\"55\":1}}],[\"jsonpatchdocument<userinfo>\",{\"1\":{\"162\":2,\"163\":1}}],[\"jsonpatchdocument<user>\",{\"1\":{\"24\":2,\"55\":2}}],[\"jsonpatchdocument\",{\"0\":{\"55\":1}}],[\"jsonpropertyname\",{\"1\":{\"6\":1}}],[\"jsonreturnattribute\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"jsonreturn\",{\"1\":{\"13\":2,\"70\":2,\"104\":1,\"152\":2}}],[\"jsonrpcparam\",{\"1\":{\"105\":1,\"106\":2}}],[\"jsonrpcmethod\",{\"1\":{\"105\":1,\"106\":1}}],[\"jsonrpc\",{\"0\":{\"105\":1,\"106\":1,\"107\":1},\"1\":{\"5\":2,\"105\":2,\"106\":1,\"107\":2,\"135\":2}}],[\"jsondeserializeoptions\",{\"1\":{\"7\":1,\"8\":1}}],[\"jsoncontentattribute\",{\"0\":{\"35\":1},\"1\":{\"65\":2}}],[\"jsoncontent\",{\"1\":{\"6\":1,\"21\":1,\"22\":1,\"23\":1,\"35\":1,\"46\":1,\"58\":1,\"65\":1,\"73\":1,\"85\":1,\"104\":1,\"145\":2,\"146\":4,\"159\":1,\"160\":1,\"165\":2}}],[\"json\",{\"0\":{\"68\":1,\"102\":1,\"150\":1,\"165\":1},\"1\":{\"5\":1,\"6\":1,\"7\":2,\"13\":1,\"15\":2,\"35\":1,\"42\":2,\"65\":1,\"68\":2,\"69\":1,\"70\":3,\"77\":5,\"83\":1,\"85\":1,\"102\":2,\"107\":2,\"108\":1,\"110\":1,\"111\":1,\"112\":1,\"120\":2,\"135\":1,\"144\":1,\"151\":2,\"152\":3,\"161\":4,\"165\":2,\"180\":4}}],[\"```csharp\",{\"1\":{\"85\":1}}],[\"825135345\",{\"1\":{\"117\":1}}],[\"8\",{\"0\":{\"77\":1}}],[\"8000\",{\"1\":{\"19\":1}}],[\"<http\",{\"1\":{\"148\":1,\"155\":1,\"170\":1,\"171\":2}}],[\"<returns><\",{\"1\":{\"190\":2}}],[\"<returns>successful\",{\"1\":{\"145\":4,\"146\":6}}],[\"<returns>returns\",{\"1\":{\"83\":1}}],[\"<param\",{\"1\":{\"96\":3,\"145\":13,\"146\":9,\"190\":4}}],[\"<packagereference\",{\"1\":{\"7\":1}}],[\"<\",{\"1\":{\"73\":1,\"83\":1,\"95\":1,\"96\":2,\"104\":1,\"145\":9,\"146\":10,\"190\":11}}],[\"<summary>\",{\"1\":{\"73\":1,\"83\":1,\"95\":1,\"96\":2,\"104\":1,\"145\":9,\"146\":9,\"190\":7}}],[\"<=\",{\"1\":{\"63\":1}}],[\"3\",{\"0\":{\"179\":1,\"180\":1,\"184\":1},\"1\":{\"63\":1,\"183\":1,\"184\":1}}],[\"+=\",{\"1\":{\"96\":1}}],[\"+\",{\"0\":{\"138\":1,\"176\":1},\"1\":{\"61\":6,\"96\":1}}],[\"quality\",{\"1\":{\"134\":1}}],[\"quick\",{\"1\":{\"130\":1}}],[\"questions\",{\"0\":{\"121\":1},\"1\":{\"115\":1}}],[\"query\",{\"0\":{\"173\":1,\"174\":1,\"175\":1,\"176\":1},\"1\":{\"30\":1,\"64\":1,\"67\":1,\"75\":1,\"95\":1,\"96\":2,\"163\":1,\"170\":1,\"178\":2}}],[\"q=0\",{\"1\":{\"107\":2}}],[\"qq\",{\"1\":{\"24\":1,\"55\":1,\"117\":1,\"162\":1}}],[\"length\",{\"1\":{\"158\":1}}],[\"lead\",{\"1\":{\"129\":1}}],[\"level\",{\"1\":{\"123\":1,\"143\":6,\"179\":3}}],[\"let\",{\"1\":{\"81\":1}}],[\"list\",{\"1\":{\"146\":2}}],[\"lifespan\",{\"1\":{\"140\":1}}],[\"lifecycle\",{\"1\":{\"81\":2,\"140\":1}}],[\"library\",{\"1\":{\"122\":1}}],[\"like\",{\"1\":{\"64\":1,\"70\":1,\"180\":2,\"188\":1}}],[\"lacks\",{\"1\":{\"180\":1}}],[\"layer\",{\"1\":{\"62\":1,\"95\":1,\"96\":1}}],[\"laojiu>\",{\"1\":{\"171\":1}}],[\"laojiu\",{\"1\":{\"24\":2,\"55\":2,\"107\":1,\"120\":2,\"148\":1,\"162\":2}}],[\"long\",{\"1\":{\"145\":4}}],[\"longer\",{\"0\":{\"116\":1}}],[\"loses\",{\"1\":{\"96\":1}}],[\"lost\",{\"1\":{\"95\":1}}],[\"location\",{\"1\":{\"84\":1}}],[\"localhost\",{\"1\":{\"6\":1,\"7\":3,\"19\":2,\"79\":1,\"80\":1,\"81\":1,\"93\":1,\"97\":1,\"106\":1,\"107\":1,\"137\":1,\"138\":1,\"140\":1,\"186\":1,\"190\":1}}],[\"local\",{\"1\":{\"5\":1,\"108\":1,\"111\":1,\"112\":1,\"135\":1}}],[\"logoutuserasync\",{\"1\":{\"146\":1}}],[\"logout\",{\"1\":{\"146\":1}}],[\"logged\",{\"1\":{\"146\":1}}],[\"loggerfactory\",{\"1\":{\"140\":1,\"186\":2}}],[\"logging\",{\"1\":{\"46\":1,\"115\":1}}],[\"loggingfactory\",{\"1\":{\"46\":1}}],[\"loggingfilterattribute\",{\"0\":{\"46\":1}}],[\"loggingfilter\",{\"1\":{\"6\":1,\"46\":2,\"72\":1}}],[\"log\",{\"1\":{\"140\":1}}],[\"logmessage\",{\"1\":{\"83\":3}}],[\"logininfo\",{\"1\":{\"175\":3,\"176\":3,\"177\":2,\"178\":2}}],[\"loginuserasync\",{\"1\":{\"146\":1}}],[\"login<\",{\"1\":{\"146\":1}}],[\"loginasync\",{\"1\":{\"83\":1}}],[\"login\",{\"1\":{\"83\":2,\"146\":2}}],[\"logic\",{\"1\":{\"63\":1,\"99\":1}}],[\"logs\",{\"1\":{\"46\":2,\"146\":2}}],[\"kept\",{\"1\":{\"140\":1}}],[\"keyvalueformatter\",{\"1\":{\"140\":1}}],[\"keyvalueserializeoptions\",{\"1\":{\"7\":1,\"8\":1,\"69\":2}}],[\"keynamingstyle\",{\"1\":{\"69\":2}}],[\"keyword\",{\"1\":{\"67\":1}}],[\"key\",{\"1\":{\"7\":1,\"30\":1,\"31\":1,\"33\":1,\"40\":1,\"48\":1,\"64\":1,\"76\":1,\"84\":2,\"145\":3}}],[\"kind\",{\"1\":{\"98\":2,\"123\":1,\"165\":2,\"166\":4,\"167\":4,\"178\":2}}],[\"known\",{\"1\":{\"19\":1}}],[\"047\",{\"1\":{\"186\":1}}],[\"08\",{\"1\":{\"186\":2}}],[\"0+\",{\"1\":{\"116\":1}}],[\"01\",{\"1\":{\"107\":2,\"186\":3}}],[\"0l\",{\"1\":{\"83\":1}}],[\"00\",{\"1\":{\"186\":2}}],[\"002\",{\"1\":{\"64\":4}}],[\"001\",{\"1\":{\"64\":1}}],[\"0\",{\"1\":{\"13\":5,\"63\":1,\"65\":1,\"107\":3,\"116\":1}}],[\"rx\",{\"0\":{\"184\":1}}],[\"role\",{\"1\":{\"176\":1,\"177\":1,\"178\":1}}],[\"role=admin\",{\"1\":{\"176\":1,\"177\":1,\"178\":1}}],[\"root\",{\"1\":{\"140\":1}}],[\"rfc6902\",{\"1\":{\"161\":1}}],[\"runtime\",{\"1\":{\"131\":1,\"172\":1}}],[\"run\",{\"1\":{\"110\":1}}],[\"rules\",{\"0\":{\"61\":1},\"1\":{\"12\":1}}],[\"rpc\",{\"1\":{\"105\":2,\"107\":1}}],[\"range\",{\"1\":{\"132\":1}}],[\"razorengine\",{\"1\":{\"112\":1}}],[\"rare\",{\"1\":{\"105\":1}}],[\"rawformcontent\",{\"1\":{\"44\":1}}],[\"rawformcontentattribute\",{\"0\":{\"44\":1}}],[\"rawxmlcontent\",{\"1\":{\"43\":1}}],[\"rawxmlcontentattribute\",{\"0\":{\"43\":1}}],[\"rawjsoncontent\",{\"1\":{\"42\":1}}],[\"rawjsoncontentattribute\",{\"0\":{\"42\":1}}],[\"rawstringcontent\",{\"1\":{\"41\":1}}],[\"rawstringcontentattribute\",{\"0\":{\"41\":1}}],[\"rawreturnattribute\",{\"0\":{\"14\":1},\"1\":{\"14\":1}}],[\"rawreturn\",{\"1\":{\"13\":1}}],[\"raw\",{\"1\":{\"13\":1,\"14\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1}}],[\"r\",{\"1\":{\"63\":2}}],[\"redesigned\",{\"1\":{\"115\":1}}],[\"redis\",{\"1\":{\"84\":2}}],[\"redisresponsecacheprovider\",{\"1\":{\"84\":2}}],[\"redisresponsecacheprovider>\",{\"1\":{\"84\":1}}],[\"receives\",{\"1\":{\"96\":1}}],[\"recommend\",{\"1\":{\"130\":1}}],[\"recommended\",{\"1\":{\"61\":1,\"69\":1,\"123\":1,\"128\":1}}],[\"records\",{\"1\":{\"46\":1}}],[\"reason\",{\"1\":{\"122\":2}}],[\"reasons\",{\"1\":{\"91\":1}}],[\"readasasync<errormodel>\",{\"1\":{\"182\":1,\"183\":1}}],[\"readasstreamasync\",{\"1\":{\"83\":1}}],[\"read\",{\"1\":{\"95\":1,\"101\":1}}],[\"readonly\",{\"1\":{\"9\":2}}],[\"re\",{\"1\":{\"89\":1,\"96\":1}}],[\"refreshtokenasync\",{\"1\":{\"100\":1}}],[\"refreshcookieasync\",{\"1\":{\"83\":1}}],[\"refresh\",{\"1\":{\"83\":1,\"86\":1,\"89\":1,\"100\":1,\"190\":6}}],[\"referenced\",{\"1\":{\"131\":1}}],[\"refer\",{\"1\":{\"10\":1,\"49\":1}}],[\"released\",{\"1\":{\"140\":1}}],[\"release\",{\"1\":{\"140\":1}}],[\"releasing\",{\"1\":{\"140\":1}}],[\"relevant\",{\"1\":{\"83\":1}}],[\"related\",{\"1\":{\"75\":1,\"140\":2,\"187\":1}}],[\"relativeuri\",{\"1\":{\"61\":1}}],[\"relative\",{\"1\":{\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"37\":1}}],[\"regardless\",{\"1\":{\"62\":1,\"125\":1,\"170\":1}}],[\"register<imywebapi>\",{\"1\":{\"140\":1}}],[\"register<iuserapi>\",{\"1\":{\"120\":1,\"189\":1,\"190\":1}}],[\"registercontrollers\",{\"1\":{\"138\":1}}],[\"registering\",{\"1\":{\"96\":2}}],[\"registertypes\",{\"1\":{\"7\":1}}],[\"register\",{\"0\":{\"7\":1,\"93\":1,\"140\":1},\"1\":{\"83\":1,\"84\":1,\"93\":1,\"96\":2,\"97\":1,\"99\":1,\"100\":1,\"138\":2,\"140\":2}}],[\"retrying\",{\"1\":{\"95\":1}}],[\"retry\",{\"0\":{\"181\":1,\"183\":1},\"1\":{\"63\":4,\"91\":1,\"96\":1,\"183\":1,\"184\":1}}],[\"retries\",{\"0\":{\"63\":1},\"1\":{\"63\":1}}],[\"retrieve\",{\"1\":{\"47\":1}}],[\"return<\",{\"1\":{\"145\":1}}],[\"returned\",{\"1\":{\"101\":1,\"190\":1}}],[\"returns\",{\"1\":{\"91\":1}}],[\"returns>\",{\"1\":{\"83\":1,\"145\":4,\"146\":6,\"190\":2}}],[\"return\",{\"0\":{\"12\":1,\"13\":1,\"125\":1,\"127\":2},\"1\":{\"7\":1,\"10\":1,\"12\":3,\"13\":3,\"17\":3,\"75\":1,\"76\":1,\"80\":1,\"81\":1,\"83\":4,\"84\":1,\"85\":1,\"99\":1,\"100\":2,\"120\":2,\"125\":2,\"126\":1,\"127\":1,\"129\":1,\"137\":1,\"138\":1,\"140\":1,\"151\":2,\"152\":2,\"163\":1,\"187\":1,\"189\":2,\"190\":2}}],[\"replacable\",{\"1\":{\"140\":1}}],[\"replaced\",{\"1\":{\"171\":1}}],[\"replace\",{\"1\":{\"24\":2,\"55\":2,\"84\":1,\"104\":1,\"162\":2}}],[\"representations\",{\"1\":{\"64\":1}}],[\"represented\",{\"1\":{\"64\":1}}],[\"represents\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"55\":1,\"153\":1,\"171\":1,\"190\":1}}],[\"requestrefreshtokenasync\",{\"1\":{\"190\":2}}],[\"requestclientcredentialsasync\",{\"1\":{\"190\":1}}],[\"requesttokenresultasync\",{\"1\":{\"190\":1}}],[\"requesttokenasync\",{\"1\":{\"98\":1,\"99\":1,\"100\":3}}],[\"requesting\",{\"1\":{\"99\":1}}],[\"requested\",{\"1\":{\"81\":1}}],[\"requestversionorlower\",{\"1\":{\"78\":1}}],[\"requesturi\",{\"1\":{\"73\":1,\"96\":4}}],[\"requestmessage\",{\"1\":{\"73\":1,\"75\":1,\"83\":1,\"85\":1,\"95\":1,\"180\":1,\"187\":1}}],[\"requests\",{\"0\":{\"120\":1,\"129\":1,\"164\":1},\"1\":{\"65\":3,\"85\":1,\"95\":1,\"129\":1,\"140\":1,\"190\":2}}],[\"request\",{\"0\":{\"58\":1,\"62\":1,\"63\":1,\"74\":1,\"75\":1,\"83\":1,\"147\":1,\"148\":1,\"153\":1,\"161\":1,\"169\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"30\":1,\"35\":1,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"46\":2,\"47\":3,\"48\":1,\"50\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"62\":3,\"67\":1,\"70\":1,\"75\":2,\"89\":2,\"90\":1,\"91\":2,\"95\":5,\"96\":12,\"98\":2,\"125\":1,\"129\":1,\"131\":1,\"132\":1,\"140\":2,\"142\":5,\"149\":1,\"161\":3,\"170\":1,\"171\":1,\"172\":2,\"177\":2,\"186\":4,\"187\":1,\"188\":1,\"190\":1}}],[\"require\",{\"1\":{\"188\":1}}],[\"requirement\",{\"1\":{\"67\":1,\"69\":1,\"180\":1}}],[\"requirements\",{\"1\":{\"10\":1}}],[\"required\",{\"1\":{\"57\":1,\"58\":3,\"73\":1,\"85\":1,\"111\":1,\"145\":8,\"146\":9,\"158\":2,\"159\":2,\"160\":1}}],[\"requires\",{\"1\":{\"4\":1,\"44\":1,\"67\":1,\"69\":1,\"76\":1,\"180\":1}}],[\"respectively\",{\"1\":{\"179\":1}}],[\"responsecacheentry\",{\"1\":{\"84\":1}}],[\"responsecacheprovider\",{\"1\":{\"47\":1,\"140\":1}}],[\"responsemessage\",{\"1\":{\"83\":1}}],[\"responses\",{\"1\":{\"65\":1}}],[\"response\",{\"0\":{\"58\":1,\"70\":1,\"83\":1,\"150\":1},\"1\":{\"12\":4,\"13\":2,\"17\":2,\"45\":1,\"46\":1,\"47\":1,\"56\":1,\"58\":1,\"62\":1,\"63\":1,\"70\":2,\"83\":3,\"95\":2,\"125\":2,\"140\":1,\"148\":1,\"151\":1,\"152\":1,\"186\":2}}],[\"resources\",{\"1\":{\"161\":1}}],[\"resolve\",{\"0\":{\"140\":1},\"1\":{\"140\":1}}],[\"resolve<imywebapi>\",{\"1\":{\"140\":1}}],[\"resolve<ihttpapifactory<imywebapi>>\",{\"1\":{\"138\":1}}],[\"resolve<iuserapi>\",{\"1\":{\"120\":1,\"186\":1}}],[\"resolvehost\",{\"1\":{\"73\":1}}],[\"restrict\",{\"1\":{\"80\":1}}],[\"reserved\",{\"1\":{\"67\":1}}],[\"resulting\",{\"1\":{\"67\":1,\"68\":1}}],[\"results\",{\"1\":{\"56\":1,\"142\":1}}],[\"result\",{\"1\":{\"14\":2,\"15\":1,\"16\":1,\"17\":2,\"63\":1,\"83\":2,\"95\":1,\"184\":1}}],[\"remote\",{\"1\":{\"5\":1,\"47\":1,\"108\":1,\"111\":1,\"135\":1}}],[\"broad\",{\"1\":{\"180\":1}}],[\"blocking\",{\"1\":{\"129\":1}}],[\"birthday=2018\",{\"1\":{\"186\":1}}],[\"birthday\",{\"1\":{\"156\":1}}],[\"bitmap\",{\"1\":{\"85\":7}}],[\"binary\",{\"1\":{\"83\":2}}],[\"basis\",{\"1\":{\"96\":1}}],[\"base64\",{\"1\":{\"85\":1}}],[\"based\",{\"1\":{\"62\":1,\"63\":1,\"65\":1,\"73\":1,\"81\":1,\"115\":1,\"116\":1,\"144\":1}}],[\"baseuri\",{\"1\":{\"61\":4}}],[\"base\",{\"0\":{\"128\":1},\"1\":{\"5\":1,\"76\":1,\"96\":1,\"97\":2,\"100\":1,\"128\":1,\"135\":1,\"157\":1,\"185\":1,\"187\":1}}],[\"baidu\",{\"1\":{\"73\":1}}],[\"b\",{\"1\":{\"61\":12}}],[\"body\",{\"1\":{\"120\":1,\"145\":4,\"146\":8,\"161\":1,\"165\":2,\"166\":3,\"168\":2}}],[\"both\",{\"0\":{\"160\":1},\"1\":{\"58\":1,\"61\":1,\"97\":1,\"143\":1}}],[\"box\",{\"1\":{\"10\":1}}],[\"bug\",{\"1\":{\"130\":1}}],[\"business\",{\"1\":{\"95\":1,\"96\":1}}],[\"but\",{\"1\":{\"47\":1,\"59\":1,\"70\":2,\"85\":1,\"116\":1,\"152\":1,\"168\":1}}],[\"build\",{\"1\":{\"138\":1}}],[\"builder\",{\"1\":{\"84\":3,\"96\":3,\"138\":5}}],[\"buildserviceprovider\",{\"1\":{\"7\":1}}],[\"built\",{\"0\":{\"10\":1},\"1\":{\"10\":1,\"104\":1,\"179\":1}}],[\"by<\",{\"1\":{\"145\":1}}],[\"bytes\",{\"1\":{\"52\":1}}],[\"bytearraycontent\",{\"1\":{\"52\":1,\"168\":1}}],[\"byte\",{\"1\":{\"14\":1}}],[\"by\",{\"0\":{\"97\":1},\"1\":{\"13\":1,\"59\":2,\"63\":1,\"65\":2,\"68\":1,\"75\":1,\"80\":1,\"85\":1,\"101\":1,\"122\":2,\"123\":1,\"128\":1,\"131\":1,\"132\":1,\"140\":1,\"142\":1,\"145\":3,\"146\":1,\"157\":1}}],[\"besides\",{\"0\":{\"127\":1}}],[\"better\",{\"1\":{\"123\":1}}],[\"between\",{\"1\":{\"12\":1}}],[\"beautify\",{\"1\":{\"112\":1}}],[\"belong\",{\"1\":{\"97\":1}}],[\"belongs\",{\"1\":{\"95\":1}}],[\"below\",{\"1\":{\"97\":1}}],[\"been\",{\"1\":{\"73\":1}}],[\"behavior\",{\"1\":{\"65\":1,\"154\":1}}],[\"behave\",{\"1\":{\"61\":1}}],[\"beforerequestasync\",{\"1\":{\"180\":1}}],[\"before\",{\"0\":{\"124\":1},\"1\":{\"10\":1,\"45\":1,\"57\":1,\"132\":1,\"142\":2,\"168\":1,\"171\":1}}],[\"be\",{\"0\":{\"127\":1,\"128\":1},\"1\":{\"8\":1,\"10\":1,\"19\":1,\"37\":2,\"38\":1,\"44\":1,\"45\":1,\"64\":1,\"67\":1,\"69\":1,\"70\":2,\"73\":1,\"75\":2,\"78\":1,\"82\":2,\"85\":1,\"95\":1,\"116\":1,\"123\":2,\"127\":1,\"128\":1,\"130\":1,\"131\":3,\"132\":3,\"140\":3,\"142\":3,\"145\":4,\"146\":3,\"151\":1,\"152\":1,\"158\":2,\"161\":1,\"168\":2,\"180\":1,\"187\":2,\"188\":2,\"190\":2}}],[\"55\",{\"1\":{\"186\":2}}],[\"5+\",{\"1\":{\"116\":1}}],[\"5\",{\"1\":{\"7\":2}}],[\"5000\",{\"1\":{\"6\":1,\"7\":3,\"19\":1,\"79\":1,\"80\":1,\"81\":1,\"97\":1,\"106\":1,\"107\":1}}],[\"given\",{\"1\":{\"146\":2}}],[\"github\",{\"1\":{\"117\":1}}],[\"guarantee\",{\"1\":{\"130\":1}}],[\"group\",{\"1\":{\"117\":2}}],[\"greater\",{\"1\":{\"38\":1}}],[\"g\",{\"1\":{\"109\":1}}],[\"google\",{\"1\":{\"83\":1}}],[\"globally\",{\"1\":{\"63\":1}}],[\"global\",{\"0\":{\"8\":1,\"188\":1,\"189\":1,\"190\":1},\"1\":{\"7\":1,\"8\":1,\"77\":1,\"138\":1,\"188\":3}}],[\"globalfilters\",{\"1\":{\"7\":1,\"82\":1,\"188\":2,\"189\":2,\"190\":2}}],[\"gender=1\",{\"1\":{\"186\":1}}],[\"generic\",{\"1\":{\"145\":1,\"146\":1}}],[\"generator\",{\"1\":{\"77\":1}}],[\"generation\",{\"1\":{\"77\":3,\"122\":1}}],[\"generates\",{\"1\":{\"135\":1}}],[\"generated\",{\"1\":{\"61\":1}}],[\"generate\",{\"0\":{\"108\":1},\"1\":{\"5\":1,\"108\":1,\"144\":1}}],[\"generally\",{\"1\":{\"140\":1}}],[\"general\",{\"1\":{\"30\":1,\"128\":1,\"188\":1}}],[\"gets\",{\"1\":{\"190\":3}}],[\"getaboutasync\",{\"1\":{\"186\":3}}],[\"getasync\",{\"1\":{\"6\":1,\"9\":4,\"19\":1,\"20\":1,\"25\":1,\"26\":1,\"30\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"46\":1,\"48\":1,\"50\":1,\"57\":1,\"62\":1,\"63\":2,\"67\":1,\"72\":1,\"73\":1,\"84\":1,\"120\":2}}],[\"getbyidasync\",{\"1\":{\"158\":1,\"182\":1,\"183\":1,\"184\":1}}],[\"getbyid\",{\"1\":{\"158\":1}}],[\"getuserinfofromdbasync\",{\"1\":{\"163\":1}}],[\"getuserbyaccountasync\",{\"1\":{\"148\":2,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"171\":1,\"172\":2}}],[\"getuserbynameasync\",{\"1\":{\"146\":1}}],[\"getuserasync\",{\"1\":{\"137\":2,\"138\":2,\"140\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1}}],[\"getpetbyidasync\",{\"1\":{\"145\":1}}],[\"getexecutingassembly\",{\"1\":{\"138\":1}}],[\"getoptionsvalue\",{\"1\":{\"101\":1}}],[\"getimagebase64\",{\"1\":{\"85\":3}}],[\"getrequiredservice<itokenapi>\",{\"1\":{\"99\":1,\"100\":1}}],[\"getrequiredservice<iuserloginapi>\",{\"1\":{\"83\":1}}],[\"getrequiredservice<iuserapi>\",{\"1\":{\"9\":1}}],[\"getrequiredservice<signservice>\",{\"1\":{\"75\":1}}],[\"getrequiredservice<hostprovider>\",{\"1\":{\"73\":1}}],[\"get2async\",{\"1\":{\"40\":1}}],[\"get\",{\"0\":{\"147\":1,\"148\":1},\"1\":{\"6\":2,\"9\":1,\"20\":1,\"40\":2,\"58\":2,\"65\":1,\"68\":2,\"69\":4,\"73\":1,\"83\":1,\"84\":1,\"85\":4,\"88\":1,\"120\":1,\"138\":1,\"140\":1,\"146\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"156\":5,\"159\":2,\"170\":1,\"171\":2,\"172\":2,\"174\":1,\"175\":3,\"176\":3,\"177\":1,\"178\":1,\"186\":2,\"190\":3}}],[\"getting\",{\"0\":{\"3\":1,\"118\":1}}],[\">name\",{\"1\":{\"146\":1}}],[\">list\",{\"1\":{\"146\":2}}],[\">created\",{\"1\":{\"146\":1}}],[\">file\",{\"1\":{\"145\":1}}],[\">additional\",{\"1\":{\"145\":1}}],[\">updated\",{\"1\":{\"145\":2,\"146\":1}}],[\">id\",{\"1\":{\"145\":3}}],[\">the\",{\"1\":{\"146\":4,\"190\":4}}],[\">tags\",{\"1\":{\"145\":1}}],[\">token\",{\"1\":{\"96\":1}}],[\">status\",{\"1\":{\"145\":1}}],[\">pet\",{\"1\":{\"145\":3}}],[\"><\",{\"1\":{\"96\":2,\"145\":1}}],[\">\",{\"1\":{\"7\":7,\"10\":6,\"127\":1}}],[\"v2\",{\"1\":{\"110\":1,\"144\":1,\"145\":1,\"146\":1}}],[\"very\",{\"1\":{\"96\":1,\"105\":1}}],[\"version\",{\"1\":{\"115\":1,\"130\":1}}],[\"versions\",{\"1\":{\"114\":1,\"116\":2,\"130\":1}}],[\"version20\",{\"1\":{\"78\":1}}],[\"version=\",{\"1\":{\"7\":1}}],[\"view\",{\"1\":{\"138\":1}}],[\"viewing\",{\"1\":{\"45\":1,\"130\":1}}],[\"visit\",{\"1\":{\"117\":1}}],[\"via\",{\"0\":{\"5\":1},\"1\":{\"132\":1}}],[\"validity\",{\"0\":{\"124\":1},\"1\":{\"96\":1,\"124\":1}}],[\"validated\",{\"1\":{\"58\":1}}],[\"validate\",{\"0\":{\"124\":1},\"1\":{\"56\":1,\"57\":1,\"124\":2,\"159\":1}}],[\"validationexception\",{\"1\":{\"158\":1}}],[\"validationattribute\",{\"1\":{\"56\":1,\"157\":1}}],[\"validation\",{\"0\":{\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1},\"1\":{\"10\":2,\"57\":1,\"59\":3,\"140\":2,\"157\":1,\"159\":1}}],[\"values\",{\"0\":{\"158\":1,\"159\":1},\"1\":{\"12\":1,\"56\":1,\"64\":4,\"75\":1,\"85\":1,\"129\":1,\"145\":1,\"159\":1}}],[\"value\",{\"0\":{\"57\":1},\"1\":{\"7\":1,\"10\":2,\"12\":5,\"17\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":2,\"31\":2,\"32\":2,\"33\":2,\"34\":2,\"35\":1,\"36\":1,\"37\":1,\"38\":2,\"39\":1,\"40\":2,\"64\":2,\"68\":1,\"69\":1,\"70\":3,\"101\":2,\"125\":1,\"140\":1,\"142\":2,\"152\":1,\"156\":1,\"160\":1,\"171\":1,\"180\":2}}],[\"variable\",{\"1\":{\"67\":1}}],[\"various\",{\"1\":{\"10\":1}}],[\"var\",{\"1\":{\"7\":3,\"9\":4,\"24\":1,\"55\":1,\"62\":1,\"63\":1,\"75\":2,\"80\":1,\"81\":2,\"83\":3,\"85\":5,\"96\":2,\"120\":4,\"138\":2,\"140\":2,\"148\":2,\"162\":2,\"163\":1,\"180\":3,\"182\":2,\"183\":2,\"184\":1,\"186\":2,\"187\":1,\"189\":1,\"190\":3}}],[\"void\",{\"1\":{\"7\":3,\"8\":1,\"59\":1,\"95\":1,\"96\":1,\"137\":1}}],[\"mm\",{\"1\":{\"156\":3}}],[\"mvc\",{\"0\":{\"138\":1}}],[\"myfilter\",{\"1\":{\"189\":2}}],[\"myglobalfilter\",{\"1\":{\"189\":2}}],[\"mywebapi\",{\"1\":{\"137\":2,\"138\":2,\"140\":5,\"148\":2,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":2}}],[\"mytoken=\",{\"1\":{\"96\":1}}],[\"mytoken\",{\"1\":{\"95\":1,\"96\":1}}],[\"much\",{\"1\":{\"185\":1}}],[\"mulitparttext\",{\"1\":{\"167\":2}}],[\"mulitpartfile\",{\"1\":{\"145\":1,\"167\":3}}],[\"mulitpartcontent\",{\"1\":{\"145\":1,\"167\":3}}],[\"multi\",{\"1\":{\"64\":2}}],[\"multiple\",{\"0\":{\"97\":1,\"174\":1,\"175\":1,\"176\":1},\"1\":{\"12\":1,\"13\":2,\"64\":1,\"96\":1,\"149\":1,\"161\":1,\"177\":1}}],[\"multipart\",{\"0\":{\"167\":1},\"1\":{\"6\":1,\"28\":1,\"33\":1,\"34\":1,\"51\":1,\"54\":1}}],[\"must\",{\"1\":{\"131\":2,\"132\":1,\"158\":1,\"168\":1}}],[\"mutual\",{\"1\":{\"80\":1}}],[\"mono\",{\"1\":{\"132\":1}}],[\"more\",{\"1\":{\"50\":1,\"134\":1,\"144\":1}}],[\"module\",{\"1\":{\"132\":1}}],[\"modifies\",{\"1\":{\"132\":1}}],[\"modification\",{\"1\":{\"45\":1}}],[\"modify\",{\"1\":{\"85\":1}}],[\"modes\",{\"1\":{\"98\":1}}],[\"mode\",{\"0\":{\"92\":1},\"1\":{\"93\":1,\"97\":1}}],[\"modern\",{\"1\":{\"65\":1}}],[\"models\",{\"0\":{\"150\":1},\"1\":{\"69\":1,\"83\":1,\"95\":1}}],[\"model\",{\"0\":{\"58\":1,\"151\":1,\"152\":1,\"156\":1,\"175\":1,\"176\":1},\"1\":{\"12\":1,\"63\":1,\"68\":1,\"69\":1,\"77\":1,\"85\":6,\"95\":1,\"96\":1,\"165\":2,\"166\":1,\"167\":1,\"171\":1}}],[\"migrating\",{\"1\":{\"130\":1}}],[\"mistakes\",{\"1\":{\"61\":1}}],[\"minimum\",{\"1\":{\"81\":1}}],[\"minimumlength\",{\"1\":{\"58\":2,\"159\":2}}],[\"minutes\",{\"1\":{\"81\":1}}],[\"minute\",{\"1\":{\"48\":1}}],[\"milliseconds\",{\"1\":{\"38\":1}}],[\"microsoft\",{\"1\":{\"7\":2}}],[\"merged\",{\"0\":{\"175\":1,\"176\":1}}],[\"means\",{\"1\":{\"142\":3}}],[\"meanings\",{\"1\":{\"142\":1}}],[\"message\",{\"1\":{\"90\":1,\"91\":1,\"95\":1,\"96\":1}}],[\"message<\",{\"1\":{\"83\":1}}],[\"memory\",{\"1\":{\"84\":1}}],[\"memorystream\",{\"1\":{\"83\":1,\"85\":1}}],[\"mediatypeheadervalue\",{\"1\":{\"83\":1}}],[\"metadata\",{\"1\":{\"65\":1}}],[\"method\",{\"0\":{\"125\":1},\"1\":{\"11\":2,\"46\":1,\"63\":1,\"65\":1,\"70\":1,\"75\":1,\"101\":1,\"107\":1,\"122\":1,\"124\":1,\"142\":2,\"143\":3,\"151\":1,\"152\":1,\"160\":1,\"161\":1,\"170\":1,\"179\":1,\"186\":1}}],[\"methods\",{\"1\":{\"10\":1,\"11\":2,\"19\":1,\"46\":1,\"105\":1,\"123\":2,\"129\":1,\"142\":2,\"149\":1,\"171\":1,\"188\":1}}],[\"meets\",{\"1\":{\"47\":1}}],[\"meet\",{\"1\":{\"10\":2,\"67\":1,\"69\":1}}],[\"made\",{\"1\":{\"142\":2}}],[\"marker\",{\"1\":{\"122\":1}}],[\"may\",{\"1\":{\"75\":1,\"83\":1,\"85\":1,\"105\":1,\"128\":1,\"152\":1,\"184\":1,\"187\":1}}],[\"make\",{\"1\":{\"70\":1,\"85\":1}}],[\"making\",{\"1\":{\"62\":1,\"95\":1,\"96\":1,\"140\":1}}],[\"maximum\",{\"1\":{\"158\":1}}],[\"maxcount\",{\"1\":{\"63\":1}}],[\"max\",{\"1\":{\"13\":1}}],[\"matching\",{\"1\":{\"13\":1}}],[\"match\",{\"1\":{\"12\":1,\"70\":1}}],[\"matches\",{\"1\":{\"12\":1}}],[\"manipulate\",{\"1\":{\"95\":1}}],[\"many\",{\"1\":{\"8\":1,\"62\":2,\"98\":1,\"179\":1}}],[\"manually\",{\"1\":{\"7\":1,\"140\":1}}],[\"management\",{\"1\":{\"5\":1,\"135\":1,\"140\":1}}],[\"maintain\",{\"1\":{\"81\":1}}],[\"maintaining\",{\"0\":{\"81\":1},\"1\":{\"134\":1}}],[\"main\",{\"1\":{\"7\":1}}],[\"uwp\",{\"1\":{\"119\":1,\"131\":1}}],[\"updateuserwithmulitpartasync\",{\"1\":{\"167\":3}}],[\"updateuserwithformasync\",{\"1\":{\"166\":2,\"168\":2}}],[\"updateuserwithxmlasync\",{\"1\":{\"165\":1}}],[\"updateuserasync\",{\"1\":{\"146\":1,\"166\":1}}],[\"updatewithjsonasync\",{\"1\":{\"159\":1,\"160\":1}}],[\"updatewithjson\",{\"1\":{\"159\":1,\"160\":1}}],[\"update<\",{\"1\":{\"145\":1}}],[\"updatepetwithformasync\",{\"1\":{\"145\":1}}],[\"updatepetasync\",{\"1\":{\"145\":1}}],[\"updates\",{\"1\":{\"130\":1,\"145\":1}}],[\"update\",{\"1\":{\"116\":1,\"145\":1,\"161\":1}}],[\"updated<\",{\"1\":{\"145\":1,\"146\":1}}],[\"updated\",{\"0\":{\"116\":1},\"1\":{\"146\":1}}],[\"uploadasync\",{\"1\":{\"180\":2}}],[\"uploadfileasync\",{\"1\":{\"145\":1}}],[\"uploadimage\",{\"1\":{\"145\":1}}],[\"upload<\",{\"1\":{\"145\":1}}],[\"uploads\",{\"1\":{\"145\":1}}],[\"upload\",{\"1\":{\"51\":1,\"54\":1,\"180\":2}}],[\"unsubscriber\",{\"1\":{\"184\":1}}],[\"unauthorized\",{\"1\":{\"91\":1}}],[\"unexpected\",{\"0\":{\"70\":1},\"1\":{\"91\":1}}],[\"unfriendly\",{\"0\":{\"67\":1}}],[\"understanding\",{\"1\":{\"123\":1}}],[\"under\",{\"1\":{\"19\":1,\"142\":1,\"171\":1}}],[\"unitycontainerextension\",{\"1\":{\"7\":1}}],[\"unitycontainer\",{\"1\":{\"7\":1}}],[\"unity\",{\"1\":{\"7\":5}}],[\"us\",{\"0\":{\"133\":1,\"134\":1}}],[\"usage\",{\"0\":{\"110\":1},\"1\":{\"140\":1}}],[\"using\",{\"0\":{\"82\":1,\"95\":1,\"96\":1,\"124\":1,\"126\":1,\"140\":1,\"149\":1,\"178\":1},\"1\":{\"9\":1,\"48\":1,\"61\":1,\"63\":2,\"68\":1,\"69\":2,\"73\":1,\"77\":1,\"82\":1,\"85\":1,\"90\":1,\"95\":1,\"96\":1,\"101\":1,\"112\":1,\"131\":1,\"132\":2,\"140\":2,\"145\":10,\"146\":10,\"152\":1,\"171\":1,\"186\":1}}],[\"usecamelcase\",{\"1\":{\"140\":1}}],[\"usetokenresult\",{\"1\":{\"95\":1,\"96\":1}}],[\"useproxy\",{\"1\":{\"79\":1}}],[\"useparameterpropertyvalidate\",{\"1\":{\"59\":1,\"140\":1,\"159\":1}}],[\"usejsonfirstapiactiondescriptor\",{\"1\":{\"65\":2}}],[\"use\",{\"0\":{\"129\":1},\"1\":{\"56\":1,\"61\":1,\"67\":1,\"85\":1,\"96\":2,\"101\":1,\"102\":1,\"112\":3,\"115\":1,\"123\":1,\"124\":1,\"144\":1,\"146\":1,\"161\":1,\"165\":2,\"166\":2,\"167\":3,\"184\":2,\"185\":1}}],[\"uses\",{\"1\":{\"15\":1,\"16\":1,\"81\":1,\"90\":1,\"99\":1,\"180\":1}}],[\"useful\",{\"1\":{\"8\":1}}],[\"used\",{\"1\":{\"8\":1,\"10\":1,\"12\":1,\"19\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"45\":1,\"51\":1,\"54\":1,\"57\":1,\"58\":1,\"59\":1,\"65\":1,\"77\":1,\"89\":1,\"116\":1,\"140\":1,\"142\":2,\"154\":1,\"168\":1,\"186\":1,\"190\":2}}],[\"uselogging\",{\"1\":{\"7\":3}}],[\"user1\",{\"1\":{\"120\":1,\"146\":1,\"183\":1}}],[\"userinfo\",{\"1\":{\"120\":2,\"151\":1,\"152\":2,\"156\":1,\"159\":2,\"160\":1,\"165\":2,\"166\":3,\"167\":3,\"186\":1}}],[\"username\",{\"1\":{\"97\":2,\"146\":11,\"170\":1}}],[\"useredisresponsecacheprovider\",{\"1\":{\"84\":1}}],[\"usereturnvaluepropertyvalidate\",{\"1\":{\"59\":1,\"140\":1}}],[\"userfilter\",{\"1\":{\"82\":2}}],[\"userapi\",{\"1\":{\"9\":7,\"63\":1,\"182\":1,\"183\":1,\"184\":1,\"186\":2}}],[\"user\",{\"1\":{\"6\":9,\"9\":2,\"19\":2,\"21\":2,\"22\":2,\"23\":2,\"27\":2,\"28\":2,\"31\":2,\"32\":2,\"33\":2,\"34\":2,\"35\":2,\"36\":2,\"46\":2,\"51\":2,\"54\":2,\"58\":4,\"65\":2,\"73\":2,\"77\":1,\"95\":1,\"104\":3,\"107\":1,\"120\":7,\"137\":1,\"138\":3,\"140\":2,\"146\":23,\"148\":2,\"149\":2,\"151\":2,\"152\":2,\"153\":1,\"155\":2,\"158\":1,\"159\":3,\"160\":3,\"162\":1,\"163\":4,\"165\":8,\"166\":9,\"167\":9,\"168\":6,\"174\":2,\"175\":2,\"176\":2,\"177\":2,\"178\":2,\"182\":1,\"186\":4}}],[\"users\",{\"1\":{\"6\":5,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":2,\"46\":2,\"48\":1,\"50\":1,\"51\":1,\"52\":3,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"63\":1,\"65\":1,\"67\":2,\"73\":2,\"104\":1,\"146\":2}}],[\"urlstring\",{\"1\":{\"72\":1}}],[\"url\",{\"1\":{\"30\":1,\"172\":2,\"186\":3,\"187\":1,\"190\":2}}],[\"urlencoded\",{\"0\":{\"166\":1},\"1\":{\"6\":1,\"27\":1,\"31\":1,\"32\":1,\"44\":1,\"69\":1,\"180\":1}}],[\"urivalue\",{\"1\":{\"96\":5}}],[\"uribuilder\",{\"1\":{\"96\":1}}],[\"uriqueryoauthtokenhandler\",{\"1\":{\"96\":4}}],[\"uriquerytoken\",{\"1\":{\"95\":1}}],[\"uriquerytokenattribute\",{\"1\":{\"95\":1}}],[\"uriattribute\",{\"0\":{\"37\":1,\"72\":1}}],[\"uri\",{\"0\":{\"61\":1,\"72\":1,\"169\":1,\"170\":1,\"172\":1},\"1\":{\"7\":3,\"37\":6,\"48\":1,\"61\":4,\"64\":1,\"67\":1,\"72\":1,\"73\":1,\"75\":1,\"79\":2,\"80\":1,\"81\":1,\"93\":1,\"95\":1,\"96\":3,\"97\":1,\"111\":1,\"120\":1,\"137\":1,\"138\":1,\"140\":1,\"170\":1,\"172\":7}}],[\"warning\",{\"1\":{\"130\":1}}],[\"want\",{\"1\":{\"13\":1,\"63\":1,\"84\":1,\"85\":1,\"96\":1,\"160\":1}}],[\"wrapper\",{\"1\":{\"129\":1}}],[\"writelogasync\",{\"1\":{\"83\":1}}],[\"write\",{\"1\":{\"10\":1,\"84\":1,\"186\":1}}],[\"won\",{\"1\":{\"140\":1}}],[\"would\",{\"1\":{\"68\":1,\"70\":1,\"180\":1}}],[\"works\",{\"1\":{\"108\":1}}],[\"work\",{\"1\":{\"49\":1,\"132\":1}}],[\"welcome\",{\"1\":{\"115\":1}}],[\"we\",{\"1\":{\"68\":1,\"75\":1,\"85\":3,\"116\":1,\"130\":2,\"160\":2,\"180\":2,\"187\":2}}],[\"webapi\",{\"1\":{\"148\":2,\"149\":2,\"151\":2,\"152\":2,\"153\":1,\"155\":2,\"158\":1,\"159\":1,\"160\":1,\"162\":1,\"165\":4,\"166\":6,\"167\":6,\"168\":4,\"174\":2,\"175\":2,\"176\":2,\"177\":2,\"178\":2,\"186\":2}}],[\"webapiclient\",{\"0\":{\"116\":1,\"126\":1,\"129\":1,\"131\":1,\"132\":1,\"134\":1,\"162\":1},\"1\":{\"114\":1,\"116\":2,\"117\":2,\"119\":2,\"120\":1,\"122\":1,\"129\":2,\"130\":2,\"131\":1,\"132\":1,\"144\":1,\"145\":4,\"146\":4,\"154\":1,\"171\":3,\"179\":1,\"184\":1,\"185\":1}}],[\"webapiclientcore\",{\"0\":{\"115\":1},\"1\":{\"4\":1,\"5\":6,\"62\":1,\"65\":1,\"77\":1,\"86\":1,\"95\":1,\"96\":1,\"102\":1,\"105\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":1,\"115\":1,\"130\":1,\"135\":6}}],[\"webproxy\",{\"1\":{\"79\":1}}],[\"web\",{\"1\":{\"65\":1}}],[\"window\",{\"1\":{\"186\":1}}],[\"wide\",{\"1\":{\"132\":1}}],[\"will\",{\"1\":{\"47\":1,\"65\":1,\"67\":1,\"78\":1,\"82\":1,\"91\":1,\"95\":1,\"96\":2,\"116\":1,\"123\":2,\"125\":1,\"130\":1,\"140\":1,\"142\":3,\"158\":1,\"159\":1}}],[\"withmillisecond\",{\"1\":{\"120\":1,\"138\":1,\"140\":1}}],[\"with\",{\"0\":{\"72\":1,\"129\":1,\"136\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1},\"1\":{\"12\":2,\"13\":2,\"61\":1,\"63\":1,\"64\":2,\"65\":1,\"67\":1,\"70\":1,\"73\":1,\"80\":1,\"82\":1,\"86\":1,\"104\":2,\"105\":2,\"108\":1,\"115\":1,\"116\":1,\"128\":1,\"131\":1,\"132\":1,\"140\":3,\"142\":1,\"145\":1,\"146\":2,\"158\":1,\"172\":1,\"177\":1}}],[\"within\",{\"1\":{\"10\":1,\"11\":2,\"95\":1,\"96\":2,\"132\":1,\"140\":1}}],[\"without\",{\"0\":{\"139\":1},\"1\":{\"7\":1,\"13\":1,\"49\":1,\"61\":1,\"125\":1,\"177\":1}}],[\"what\",{\"0\":{\"127\":1}}],[\"where\",{\"1\":{\"142\":1}}],[\"whether\",{\"1\":{\"125\":1}}],[\"whencatch<httpstatusfailureexception>\",{\"1\":{\"183\":1,\"184\":1}}],[\"whencatch<httprequestexception>\",{\"1\":{\"63\":1}}],[\"whenresult\",{\"1\":{\"63\":1}}],[\"when\",{\"1\":{\"8\":1,\"12\":4,\"17\":1,\"19\":1,\"30\":1,\"62\":5,\"65\":2,\"85\":1,\"95\":1,\"96\":3,\"117\":1,\"131\":1,\"140\":1,\"142\":3,\"143\":2,\"151\":1,\"152\":1,\"159\":2,\"187\":1,\"190\":1}}],[\"why\",{\"0\":{\"122\":1,\"125\":1},\"1\":{\"61\":1}}],[\"which\",{\"1\":{\"8\":1,\"13\":1,\"44\":1,\"53\":1,\"61\":2,\"63\":1,\"67\":1,\"70\":1,\"75\":1,\"78\":1,\"82\":1,\"101\":1,\"142\":1,\"161\":1,\"185\":1,\"187\":1}}],[\"www\",{\"0\":{\"166\":1},\"1\":{\"6\":1,\"27\":1,\"31\":1,\"32\":1,\"44\":1,\"69\":1,\"120\":1,\"148\":2,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":2,\"170\":1,\"171\":3,\"180\":1}}],[\"xjson\",{\"1\":{\"180\":1}}],[\"xdocument\",{\"1\":{\"112\":1}}],[\"xxxasync\",{\"1\":{\"97\":1}}],[\"xxx\",{\"1\":{\"97\":2,\"98\":1}}],[\"xxyyzz\",{\"1\":{\"93\":1,\"97\":1}}],[\"x\",{\"0\":{\"166\":1},\"1\":{\"6\":1,\"27\":1,\"31\":1,\"32\":1,\"44\":1,\"69\":1,\"83\":1,\"180\":3}}],[\"xmlbody\",{\"1\":{\"165\":1}}],[\"xmlformatter\",{\"1\":{\"140\":1}}],[\"xmlreturnattribute\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"xmlreturn\",{\"1\":{\"13\":1,\"152\":1}}],[\"xmldeserializeoptions\",{\"1\":{\"7\":1}}],[\"xmlserializeoptions\",{\"1\":{\"7\":1}}],[\"xmlcontentattribute\",{\"0\":{\"36\":1}}],[\"xmlcontent\",{\"1\":{\"6\":1,\"36\":1,\"165\":2}}],[\"xml\",{\"0\":{\"150\":1,\"165\":1},\"1\":{\"6\":1,\"7\":2,\"13\":1,\"16\":2,\"36\":1,\"43\":2,\"70\":1,\"83\":1,\"107\":1,\"120\":2,\"128\":1,\"151\":2,\"152\":2,\"165\":2}}],[\"=>\",{\"1\":{\"7\":3,\"8\":1,\"24\":2,\"55\":2,\"59\":1,\"63\":1,\"69\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"83\":1,\"84\":1,\"93\":1,\"96\":1,\"97\":1,\"99\":1,\"103\":1,\"120\":1,\"138\":3,\"140\":1,\"162\":2,\"183\":1,\"184\":3,\"189\":1,\"190\":1}}],[\"=\",{\"1\":{\"6\":7,\"7\":9,\"8\":3,\"9\":6,\"13\":11,\"24\":1,\"46\":1,\"50\":1,\"55\":1,\"58\":2,\"59\":2,\"61\":6,\"62\":1,\"63\":1,\"64\":6,\"69\":1,\"70\":1,\"73\":4,\"75\":2,\"78\":3,\"79\":4,\"80\":2,\"81\":4,\"83\":11,\"85\":6,\"93\":3,\"96\":5,\"97\":5,\"103\":1,\"106\":1,\"120\":8,\"137\":1,\"138\":4,\"140\":14,\"145\":1,\"148\":2,\"159\":2,\"162\":2,\"163\":1,\"180\":4,\"182\":2,\"183\":2,\"184\":1,\"186\":3,\"187\":1,\"189\":1,\"190\":6}}],[\"hh\",{\"1\":{\"156\":1}}],[\"higher\",{\"1\":{\"143\":1,\"188\":1}}],[\"highest\",{\"1\":{\"12\":1,\"156\":1}}],[\"helpful\",{\"0\":{\"134\":1}}],[\"help\",{\"1\":{\"111\":2}}],[\"here\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"83\":1,\"171\":1,\"180\":1,\"184\":1}}],[\"head\",{\"0\":{\"147\":1},\"1\":{\"65\":1}}],[\"headimage\",{\"1\":{\"33\":1,\"34\":1,\"51\":1,\"54\":1}}],[\"headers\",{\"1\":{\"40\":5,\"83\":1}}],[\"headersattribute\",{\"0\":{\"40\":1}}],[\"headervalue2\",{\"1\":{\"25\":1}}],[\"headervalue1\",{\"1\":{\"25\":1}}],[\"headername2\",{\"1\":{\"25\":1}}],[\"headername1\",{\"1\":{\"25\":1,\"39\":1,\"40\":2}}],[\"header\",{\"1\":{\"25\":3,\"39\":2,\"70\":2,\"95\":1,\"96\":1,\"142\":4,\"145\":1}}],[\"headerattribute\",{\"0\":{\"25\":1,\"39\":1}}],[\"homecontroller\",{\"1\":{\"137\":1,\"138\":1}}],[\"how\",{\"0\":{\"124\":1,\"126\":1,\"129\":1},\"1\":{\"180\":1,\"184\":1}}],[\"however\",{\"1\":{\"69\":1,\"95\":1,\"96\":1,\"98\":1,\"123\":1,\"128\":1}}],[\"hostprovider\",{\"1\":{\"73\":4}}],[\"host\",{\"1\":{\"73\":3,\"107\":1,\"140\":1,\"170\":1,\"186\":1}}],[\"html\",{\"1\":{\"70\":1,\"112\":2}}],[\"httpapiexception\",{\"1\":{\"182\":1,\"183\":1}}],[\"httpapiconfig\",{\"1\":{\"159\":1,\"180\":2,\"186\":1,\"188\":1}}],[\"httpapiclient\",{\"1\":{\"131\":1}}],[\"httpapifactory\",{\"1\":{\"140\":1}}],[\"httpapifactory<imywebapi>\",{\"1\":{\"138\":1}}],[\"httpapi\",{\"0\":{\"140\":1},\"1\":{\"88\":1,\"120\":2,\"140\":2,\"148\":1,\"162\":1,\"186\":1,\"189\":1,\"190\":1}}],[\"httpapioptions\",{\"1\":{\"59\":1,\"85\":1}}],[\"httpstatusfailureexception\",{\"1\":{\"182\":1,\"183\":1}}],[\"https\",{\"1\":{\"80\":1,\"110\":1,\"117\":1,\"145\":1,\"146\":1}}],[\"httpmessagehandler\",{\"0\":{\"79\":1},\"1\":{\"81\":2}}],[\"httpversionpolicy\",{\"1\":{\"78\":1}}],[\"httpversion\",{\"1\":{\"78\":1}}],[\"httprequestmessage\",{\"1\":{\"96\":3}}],[\"httprequestexception\",{\"1\":{\"62\":8}}],[\"httpresponsemessage\",{\"1\":{\"14\":1,\"96\":2,\"125\":1}}],[\"httpcontext\",{\"1\":{\"73\":2,\"75\":2,\"83\":2,\"85\":2,\"95\":1}}],[\"httpcontentattribute\",{\"1\":{\"83\":1}}],[\"httpcontent\",{\"0\":{\"52\":1,\"168\":1},\"1\":{\"168\":1}}],[\"httpclienthandler\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\"httpclient\",{\"0\":{\"78\":1},\"1\":{\"38\":1,\"78\":5,\"129\":2,\"140\":2}}],[\"httpdelete\",{\"1\":{\"23\":1,\"145\":1,\"146\":1}}],[\"httpdeleteattribute\",{\"0\":{\"23\":1}}],[\"httppatch\",{\"1\":{\"24\":1,\"55\":1,\"162\":1,\"163\":1}}],[\"httppatchattribute\",{\"0\":{\"24\":1}}],[\"httpput\",{\"1\":{\"22\":1,\"145\":1,\"146\":1,\"159\":1,\"160\":1,\"165\":1}}],[\"httpputattribute\",{\"0\":{\"22\":1}}],[\"httppostattribute\",{\"0\":{\"21\":1}}],[\"httppost\",{\"1\":{\"6\":4,\"21\":1,\"27\":1,\"28\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"51\":1,\"52\":3,\"54\":1,\"58\":1,\"65\":1,\"73\":1,\"85\":1,\"98\":1,\"104\":1,\"120\":1,\"145\":3,\"146\":3,\"165\":1,\"166\":3,\"167\":3,\"168\":2}}],[\"httpgetattribute\",{\"0\":{\"20\":1}}],[\"httpget\",{\"1\":{\"6\":1,\"20\":1,\"25\":1,\"26\":1,\"30\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":2,\"46\":1,\"48\":1,\"50\":1,\"57\":1,\"63\":1,\"67\":1,\"72\":1,\"73\":1,\"97\":2,\"120\":1,\"137\":1,\"138\":1,\"140\":1,\"145\":3,\"146\":3,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"155\":1,\"158\":1,\"171\":1,\"172\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"186\":1}}],[\"http\",{\"0\":{\"120\":1,\"122\":1,\"123\":2},\"1\":{\"6\":1,\"7\":3,\"19\":2,\"61\":14,\"79\":2,\"80\":1,\"81\":1,\"91\":1,\"93\":1,\"96\":2,\"97\":2,\"98\":1,\"106\":1,\"107\":1,\"120\":1,\"122\":1,\"123\":1,\"125\":1,\"131\":1,\"132\":1,\"137\":1,\"138\":1,\"140\":2,\"145\":1,\"146\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"161\":1,\"170\":1,\"171\":1,\"186\":2,\"190\":1}}],[\"httphostbaseattribute\",{\"0\":{\"73\":1},\"1\":{\"73\":1}}],[\"httphostattribute\",{\"0\":{\"19\":1}}],[\"httphost\",{\"0\":{\"71\":1},\"1\":{\"6\":1,\"7\":3,\"19\":4,\"79\":1,\"80\":1,\"81\":1,\"106\":1,\"120\":1,\"137\":1,\"138\":1,\"140\":1,\"145\":1,\"146\":1,\"149\":2,\"151\":1,\"152\":1,\"153\":1,\"180\":2}}],[\"handling\",{\"0\":{\"62\":1,\"64\":1,\"181\":1,\"182\":1}}],[\"handler\",{\"1\":{\"80\":3,\"81\":3,\"91\":1,\"96\":1}}],[\"handled\",{\"1\":{\"68\":1}}],[\"handles\",{\"1\":{\"65\":1,\"140\":1}}],[\"handle\",{\"1\":{\"12\":1,\"13\":2,\"62\":6}}],[\"has\",{\"1\":{\"13\":1,\"62\":1,\"73\":1,\"81\":1,\"101\":1,\"114\":1,\"149\":1}}],[\"have\",{\"1\":{\"4\":1,\"63\":1,\"68\":1,\"70\":1,\"122\":1,\"125\":1,\"142\":2,\"143\":1,\"157\":1,\"188\":1}}],[\"flattened\",{\"0\":{\"174\":1,\"176\":1}}],[\"fetched\",{\"1\":{\"146\":1}}],[\"feature\",{\"1\":{\"130\":1}}],[\"features\",{\"0\":{\"60\":1},\"1\":{\"10\":1}}],[\"feedback\",{\"1\":{\"117\":1}}],[\"full\",{\"0\":{\"100\":1,\"144\":1}}],[\"fullname\",{\"1\":{\"69\":1}}],[\"functions\",{\"1\":{\"91\":1}}],[\"functionality\",{\"1\":{\"51\":1,\"54\":1,\"75\":1,\"105\":1}}],[\"failed\",{\"1\":{\"95\":1}}],[\"facilitate\",{\"1\":{\"122\":1}}],[\"faces\",{\"1\":{\"85\":1}}],[\"facemodel\",{\"1\":{\"85\":5}}],[\"face\",{\"1\":{\"85\":1}}],[\"factory\",{\"1\":{\"78\":1,\"88\":1,\"140\":1}}],[\"fact\",{\"1\":{\"61\":1}}],[\"false\",{\"1\":{\"12\":1,\"13\":1,\"46\":1,\"59\":2,\"70\":2,\"140\":2,\"143\":1,\"145\":1,\"159\":1,\"180\":1}}],[\"findpetsbytagsasync\",{\"1\":{\"145\":1}}],[\"findpetsbystatusasync\",{\"1\":{\"145\":1}}],[\"findbytags\",{\"1\":{\"145\":1}}],[\"findbystatus\",{\"1\":{\"145\":1}}],[\"finds\",{\"1\":{\"145\":2}}],[\"find\",{\"0\":{\"134\":1},\"1\":{\"145\":1}}],[\"finally\",{\"1\":{\"83\":1,\"85\":1,\"90\":1}}],[\"final\",{\"1\":{\"45\":1}}],[\"fixes\",{\"1\":{\"130\":1}}],[\"five\",{\"1\":{\"64\":1}}],[\"first\",{\"1\":{\"37\":1,\"89\":1,\"172\":1}}],[\"files\",{\"1\":{\"108\":2,\"110\":1,\"167\":1,\"187\":1}}],[\"fileinfo\",{\"0\":{\"51\":1},\"1\":{\"51\":1,\"54\":1}}],[\"file\",{\"0\":{\"126\":1},\"1\":{\"33\":1,\"34\":1,\"51\":2,\"54\":2,\"111\":1,\"112\":1,\"145\":2,\"167\":2}}],[\"filter<\",{\"1\":{\"145\":1}}],[\"filters\",{\"0\":{\"82\":1,\"185\":1,\"187\":1,\"188\":1,\"189\":1},\"1\":{\"82\":1,\"185\":1,\"188\":4}}],[\"filter\",{\"0\":{\"45\":1,\"190\":1},\"1\":{\"7\":1,\"45\":1,\"75\":1,\"145\":1,\"185\":1,\"186\":1,\"190\":2}}],[\"fieldy\",{\"1\":{\"180\":2}}],[\"fieldy=\",{\"1\":{\"180\":1}}],[\"fieldx=\",{\"1\":{\"180\":1}}],[\"fieldx=xxx\",{\"1\":{\"166\":2}}],[\"fieldx\",{\"1\":{\"166\":2,\"180\":2}}],[\"fields\",{\"0\":{\"69\":1,\"76\":1},\"1\":{\"76\":2}}],[\"field2\",{\"1\":{\"68\":8,\"69\":5}}],[\"field1\",{\"1\":{\"32\":1,\"34\":1,\"68\":2,\"69\":2}}],[\"fieldvalue2\",{\"1\":{\"27\":1,\"28\":1}}],[\"fieldvalue1\",{\"1\":{\"27\":1,\"28\":1}}],[\"fieldname\",{\"1\":{\"67\":1,\"180\":2}}],[\"fieldname2\",{\"1\":{\"27\":1,\"28\":1}}],[\"fieldname1\",{\"1\":{\"27\":1,\"28\":1}}],[\"field\",{\"0\":{\"68\":1},\"1\":{\"27\":1,\"28\":1,\"32\":1,\"34\":1,\"67\":3,\"68\":2,\"69\":1,\"95\":1,\"96\":1,\"180\":1}}],[\"fragment\",{\"1\":{\"170\":1}}],[\"framework\",{\"1\":{\"10\":1,\"95\":1,\"96\":1,\"116\":1}}],[\"frequently\",{\"0\":{\"121\":1}}],[\"fromseconds\",{\"1\":{\"183\":1,\"184\":1}}],[\"fromservices\",{\"1\":{\"137\":1}}],[\"frombody\",{\"1\":{\"163\":1}}],[\"fromminutes\",{\"1\":{\"78\":1,\"140\":1}}],[\"from\",{\"0\":{\"108\":1,\"123\":1},\"1\":{\"5\":1,\"9\":1,\"47\":1,\"84\":1,\"112\":1,\"123\":1,\"140\":2,\"157\":1,\"163\":1,\"171\":1,\"185\":1,\"186\":1}}],[\"folder\",{\"1\":{\"110\":1}}],[\"follow\",{\"1\":{\"81\":1}}],[\"follows\",{\"1\":{\"12\":1,\"64\":1,\"98\":1,\"160\":1,\"161\":1,\"170\":1}}],[\"following\",{\"0\":{\"1\":1,\"2\":1},\"1\":{\"12\":1,\"13\":1,\"110\":1,\"170\":1}}],[\"formurlencodedcontent\",{\"1\":{\"168\":3}}],[\"formmodel\",{\"1\":{\"69\":3}}],[\"formatoptions\",{\"1\":{\"120\":1,\"138\":1,\"140\":2,\"180\":1}}],[\"formats\",{\"1\":{\"64\":1}}],[\"format\",{\"0\":{\"170\":1},\"1\":{\"61\":1,\"69\":1,\"140\":1,\"156\":2,\"170\":1,\"180\":1}}],[\"formfieldjson\",{\"1\":{\"180\":4}}],[\"formfield\",{\"1\":{\"27\":2,\"32\":1,\"68\":1,\"166\":2,\"168\":1,\"180\":2}}],[\"formfieldattribute\",{\"0\":{\"27\":1,\"32\":1}}],[\"formdata\",{\"1\":{\"167\":4}}],[\"formdatatext\",{\"1\":{\"28\":2,\"34\":1}}],[\"formdatatextattribute\",{\"0\":{\"28\":1,\"34\":1}}],[\"formdatafile\",{\"0\":{\"54\":1},\"1\":{\"6\":1,\"33\":1,\"34\":1,\"54\":1}}],[\"formdatacontentattribute\",{\"0\":{\"33\":1}}],[\"formdatacontent\",{\"1\":{\"6\":1,\"28\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"51\":1,\"54\":1}}],[\"formcontentattribute\",{\"0\":{\"31\":1},\"1\":{\"64\":1,\"76\":1}}],[\"formcontent\",{\"1\":{\"6\":1,\"27\":1,\"120\":1,\"145\":2,\"166\":3}}],[\"form\",{\"0\":{\"64\":1,\"68\":1,\"69\":1,\"76\":1,\"166\":1,\"167\":1},\"1\":{\"6\":2,\"27\":2,\"28\":2,\"31\":2,\"32\":2,\"33\":3,\"34\":3,\"44\":4,\"51\":2,\"54\":2,\"64\":1,\"68\":1,\"69\":2,\"76\":1,\"95\":2,\"98\":2,\"145\":1,\"166\":4,\"180\":2}}],[\"for\",{\"0\":{\"1\":1,\"2\":1,\"93\":1,\"101\":1},\"1\":{\"8\":1,\"12\":1,\"15\":1,\"16\":1,\"30\":1,\"45\":1,\"46\":2,\"48\":1,\"50\":1,\"63\":1,\"64\":1,\"65\":1,\"67\":1,\"68\":1,\"69\":2,\"70\":1,\"75\":1,\"83\":1,\"85\":1,\"88\":1,\"90\":1,\"93\":1,\"95\":1,\"96\":3,\"97\":5,\"99\":2,\"100\":1,\"102\":1,\"105\":2,\"108\":1,\"110\":1,\"112\":1,\"116\":1,\"117\":1,\"119\":1,\"122\":2,\"123\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":3,\"132\":1,\"134\":2,\"140\":2,\"144\":1,\"145\":1,\"146\":3,\"160\":1,\"161\":1,\"165\":2,\"167\":1,\"170\":1,\"177\":1,\"180\":2,\"185\":1,\"186\":1,\"190\":5}}],[\"cecil\",{\"1\":{\"132\":1}}],[\"certificates\",{\"1\":{\"80\":1}}],[\"certificate\",{\"0\":{\"80\":1}}],[\"certain\",{\"0\":{\"128\":1},\"1\":{\"49\":1,\"128\":1,\"129\":1,\"140\":1}}],[\"child\",{\"1\":{\"123\":1}}],[\"characters\",{\"1\":{\"158\":1}}],[\"channels\",{\"0\":{\"117\":1}}],[\"challenging\",{\"1\":{\"96\":1}}],[\"cs\",{\"1\":{\"137\":1,\"138\":1}}],[\"cshtml\",{\"1\":{\"112\":1}}],[\"csv\",{\"1\":{\"64\":2}}],[\"current\",{\"1\":{\"110\":1,\"146\":1,\"180\":1}}],[\"customizing\",{\"0\":{\"180\":1}}],[\"customize\",{\"1\":{\"65\":1,\"84\":1,\"98\":1}}],[\"customtokenprovider>\",{\"1\":{\"100\":1}}],[\"customtokenprovider\",{\"1\":{\"100\":3}}],[\"customheaders\",{\"1\":{\"40\":2}}],[\"custom\",{\"0\":{\"73\":1,\"83\":1,\"84\":1,\"85\":1,\"98\":1,\"101\":1,\"179\":1,\"187\":1,\"189\":1,\"190\":1},\"1\":{\"10\":1,\"73\":1,\"75\":2,\"83\":1,\"99\":2}}],[\"credentials\",{\"1\":{\"93\":2,\"97\":4,\"190\":1}}],[\"creating\",{\"1\":{\"75\":1,\"88\":1,\"153\":1}}],[\"createtime\",{\"1\":{\"156\":1}}],[\"create<imywebapi>\",{\"1\":{\"148\":1,\"162\":1}}],[\"createwithlist\",{\"1\":{\"146\":1}}],[\"createwitharray\",{\"1\":{\"146\":1}}],[\"createuserswithlistinputasync\",{\"1\":{\"146\":1}}],[\"createuserswitharrayinputasync\",{\"1\":{\"146\":1}}],[\"createuserasync\",{\"1\":{\"146\":1}}],[\"createhttpapi\",{\"1\":{\"138\":1}}],[\"creates\",{\"1\":{\"90\":1,\"131\":1,\"146\":2}}],[\"createscope\",{\"1\":{\"9\":1}}],[\"created\",{\"1\":{\"9\":1,\"131\":1,\"140\":3}}],[\"createcontainerextension\",{\"1\":{\"7\":1}}],[\"create\",{\"1\":{\"7\":1,\"88\":1,\"131\":1,\"146\":1}}],[\"clearly\",{\"1\":{\"180\":1}}],[\"clear\",{\"1\":{\"146\":1}}],[\"clientid\",{\"1\":{\"93\":1,\"97\":1,\"98\":1,\"190\":4}}],[\"clientcertificates\",{\"1\":{\"80\":1}}],[\"clientsecret\",{\"1\":{\"98\":1,\"190\":4}}],[\"clients\",{\"1\":{\"80\":1,\"161\":1}}],[\"client\",{\"0\":{\"80\":1,\"92\":1},\"1\":{\"70\":1,\"80\":1,\"93\":3,\"97\":2,\"98\":1,\"144\":1,\"190\":14}}],[\"classes\",{\"0\":{\"128\":1},\"1\":{\"122\":2,\"128\":1,\"131\":1,\"132\":2}}],[\"class\",{\"1\":{\"6\":1,\"7\":1,\"9\":2,\"40\":1,\"58\":1,\"62\":1,\"68\":1,\"69\":2,\"73\":1,\"75\":1,\"76\":1,\"77\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":2,\"95\":1,\"96\":1,\"100\":1,\"131\":3,\"132\":1,\"137\":1,\"138\":1,\"156\":1,\"157\":1,\"159\":1,\"175\":1,\"176\":1,\"180\":1,\"185\":1,\"187\":1,\"189\":1,\"190\":1}}],[\"c\",{\"1\":{\"61\":12,\"67\":1,\"120\":3,\"138\":5,\"140\":13,\"189\":2,\"190\":2}}],[\"case\",{\"1\":{\"98\":1}}],[\"cases\",{\"1\":{\"62\":1,\"76\":1,\"85\":1}}],[\"calculated\",{\"1\":{\"75\":1,\"187\":1}}],[\"caller\",{\"1\":{\"142\":1}}],[\"called\",{\"1\":{\"53\":1,\"75\":1,\"76\":1,\"140\":1,\"185\":1,\"187\":1}}],[\"calls\",{\"1\":{\"105\":1}}],[\"calling\",{\"1\":{\"5\":1,\"65\":1,\"131\":1,\"135\":1}}],[\"catching\",{\"1\":{\"63\":1}}],[\"catch\",{\"0\":{\"182\":1},\"1\":{\"62\":6,\"182\":2,\"183\":3}}],[\"caching\",{\"1\":{\"48\":1}}],[\"cacheattribute\",{\"0\":{\"48\":1},\"1\":{\"140\":1}}],[\"cached\",{\"1\":{\"47\":1}}],[\"caches\",{\"1\":{\"47\":1}}],[\"cache\",{\"0\":{\"47\":1,\"84\":1},\"1\":{\"48\":3,\"84\":7,\"140\":1}}],[\"camelcase\",{\"1\":{\"8\":3}}],[\"cancellation\",{\"0\":{\"153\":1},\"1\":{\"153\":1}}],[\"cancellationtokensource\",{\"1\":{\"153\":1}}],[\"cancellationtoken\",{\"0\":{\"50\":1},\"1\":{\"6\":5,\"50\":2,\"106\":1,\"153\":3}}],[\"canceling\",{\"1\":{\"50\":1}}],[\"cannot\",{\"1\":{\"38\":1,\"53\":1,\"95\":2,\"130\":1}}],[\"can\",{\"0\":{\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1},\"1\":{\"8\":1,\"10\":2,\"13\":1,\"19\":1,\"37\":2,\"45\":1,\"47\":1,\"49\":1,\"53\":1,\"59\":1,\"63\":1,\"64\":1,\"65\":2,\"67\":1,\"69\":1,\"73\":1,\"75\":1,\"82\":1,\"96\":1,\"97\":1,\"101\":1,\"116\":1,\"124\":1,\"125\":1,\"127\":1,\"128\":1,\"129\":1,\"131\":1,\"132\":2,\"140\":2,\"142\":2,\"144\":1,\"149\":1,\"151\":1,\"153\":1,\"160\":1,\"161\":1,\"168\":1,\"172\":1,\"177\":1,\"186\":1,\"187\":1,\"188\":1,\"190\":2}}],[\"corefx\",{\"1\":{\"157\":1}}],[\"core\",{\"0\":{\"137\":1},\"1\":{\"108\":1,\"116\":1,\"140\":1}}],[\"corresponding\",{\"1\":{\"12\":1,\"69\":1,\"95\":1,\"96\":1,\"110\":1,\"180\":1}}],[\"cookie\",{\"1\":{\"81\":1,\"83\":1}}],[\"cookiecontainer\",{\"0\":{\"81\":1},\"1\":{\"81\":5}}],[\"covers\",{\"1\":{\"78\":1}}],[\"componentmodel\",{\"1\":{\"140\":1,\"145\":1,\"146\":1,\"157\":1}}],[\"compilation\",{\"1\":{\"132\":2}}],[\"compiled\",{\"1\":{\"119\":1,\"132\":2}}],[\"compile\",{\"1\":{\"112\":1}}],[\"comparison\",{\"1\":{\"85\":1}}],[\"complex\",{\"1\":{\"53\":1,\"65\":1,\"69\":1}}],[\"completedtask\",{\"1\":{\"75\":1,\"83\":2,\"189\":2}}],[\"complete\",{\"1\":{\"48\":1}}],[\"command\",{\"0\":{\"111\":1},\"1\":{\"110\":1}}],[\"comma\",{\"1\":{\"64\":1}}],[\"commonly\",{\"1\":{\"65\":1}}],[\"common\",{\"1\":{\"61\":1,\"83\":1}}],[\"com\",{\"1\":{\"24\":1,\"55\":1,\"61\":14,\"79\":1,\"98\":1,\"117\":1,\"120\":1,\"148\":2,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":2,\"162\":1,\"170\":1,\"171\":3}}],[\"collectionformat\",{\"1\":{\"64\":11}}],[\"collections\",{\"0\":{\"64\":1},\"1\":{\"145\":1,\"146\":1}}],[\"collection\",{\"1\":{\"7\":1,\"64\":1,\"65\":1}}],[\"conjunction\",{\"1\":{\"140\":1}}],[\"conversion\",{\"0\":{\"151\":1,\"152\":1}}],[\"converting\",{\"0\":{\"150\":1}}],[\"convert\",{\"1\":{\"85\":2,\"184\":1}}],[\"convenient\",{\"1\":{\"95\":1}}],[\"concepts\",{\"0\":{\"87\":1}}],[\"concatenations\",{\"1\":{\"61\":1}}],[\"concatenation\",{\"0\":{\"61\":1}}],[\"connect\",{\"1\":{\"80\":1}}],[\"connections\",{\"1\":{\"80\":1}}],[\"connection\",{\"1\":{\"62\":1}}],[\"conditional\",{\"0\":{\"63\":1}}],[\"conditions\",{\"1\":{\"47\":1,\"63\":1}}],[\"configexception\",{\"1\":{\"62\":1}}],[\"configuring\",{\"1\":{\"59\":1}}],[\"configurations\",{\"1\":{\"140\":2}}],[\"configuration\",{\"0\":{\"8\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"103\":1},\"1\":{\"8\":2,\"62\":1,\"77\":2,\"82\":1,\"115\":1,\"120\":1,\"140\":2,\"187\":1}}],[\"configured\",{\"1\":{\"140\":1}}],[\"configurenewtonsoftjson\",{\"1\":{\"103\":2}}],[\"configureprimaryhttpmessagehandler\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\"configurehttpclient\",{\"1\":{\"78\":1}}],[\"configurehttpapi<imywebapi>\",{\"1\":{\"137\":1}}],[\"configurehttpapiconfig\",{\"1\":{\"120\":1,\"138\":1,\"140\":1,\"189\":1,\"190\":1}}],[\"configurehttpapi\",{\"1\":{\"7\":3,\"8\":1,\"59\":1,\"69\":1,\"77\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1}}],[\"configureservices\",{\"1\":{\"7\":1,\"8\":1,\"59\":1,\"137\":1,\"140\":1}}],[\"configure\",{\"0\":{\"7\":1},\"1\":{\"69\":1,\"83\":1,\"93\":1,\"97\":3,\"101\":1,\"137\":1,\"186\":1}}],[\"considered\",{\"1\":{\"145\":1}}],[\"consider\",{\"0\":{\"134\":1},\"1\":{\"63\":1}}],[\"considering\",{\"1\":{\"13\":1}}],[\"constraints\",{\"1\":{\"180\":1}}],[\"constructing\",{\"1\":{\"85\":1}}],[\"constructor\",{\"1\":{\"61\":1}}],[\"constant\",{\"1\":{\"19\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1}}],[\"console\",{\"1\":{\"7\":1,\"186\":2}}],[\"continue\",{\"1\":{\"116\":1}}],[\"context\",{\"1\":{\"73\":3,\"75\":3,\"76\":2,\"77\":1,\"82\":2,\"83\":9,\"85\":3,\"95\":2,\"180\":4,\"187\":3,\"189\":2}}],[\"contenttype\",{\"1\":{\"83\":3}}],[\"contents\",{\"1\":{\"13\":1}}],[\"content\",{\"0\":{\"70\":1,\"83\":1,\"150\":1},\"1\":{\"6\":4,\"12\":3,\"13\":2,\"15\":1,\"16\":1,\"35\":1,\"36\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":2,\"45\":1,\"46\":1,\"47\":2,\"70\":5,\"78\":1,\"83\":8,\"84\":1,\"85\":1,\"95\":1,\"96\":2,\"107\":1,\"120\":2,\"134\":1,\"151\":1,\"152\":1,\"161\":2,\"180\":1,\"186\":1}}],[\"controller\",{\"1\":{\"137\":2,\"138\":2}}],[\"control\",{\"1\":{\"63\":1}}],[\"contribute\",{\"1\":{\"115\":1}}],[\"contributions\",{\"0\":{\"1\":1}}],[\"contributors\",{\"0\":{\"0\":1,\"1\":1,\"2\":1}}],[\"contains\",{\"1\":{\"62\":1,\"161\":1}}],[\"containerbuilder\",{\"1\":{\"138\":1}}],[\"containerregistry\",{\"1\":{\"7\":1}}],[\"container\",{\"1\":{\"7\":3}}],[\"codes\",{\"1\":{\"96\":1}}],[\"code\",{\"0\":{\"108\":1},\"1\":{\"5\":1,\"12\":1,\"17\":1,\"62\":1,\"91\":1,\"96\":1,\"108\":1,\"110\":1,\"111\":1,\"112\":3,\"115\":1,\"135\":1,\"137\":1,\"140\":2,\"144\":1}}],[\"o=>\",{\"1\":{\"137\":1}}],[\"older\",{\"1\":{\"116\":1}}],[\"old\",{\"1\":{\"91\":1,\"116\":1,\"130\":1}}],[\"obsolete\",{\"1\":{\"145\":1}}],[\"observe\",{\"1\":{\"65\":1}}],[\"object<\",{\"1\":{\"146\":4}}],[\"object\",{\"0\":{\"128\":1},\"1\":{\"96\":1,\"112\":1,\"124\":1,\"128\":1,\"145\":2}}],[\"objects\",{\"0\":{\"87\":1},\"1\":{\"85\":1,\"184\":2}}],[\"obtained\",{\"1\":{\"140\":2,\"163\":1}}],[\"obtaining\",{\"1\":{\"112\":1,\"190\":3}}],[\"obtain\",{\"1\":{\"89\":1,\"90\":1,\"112\":1}}],[\"overridden\",{\"1\":{\"123\":1}}],[\"overrides\",{\"1\":{\"19\":1}}],[\"override\",{\"1\":{\"7\":2,\"73\":1,\"75\":1,\"76\":1,\"83\":4,\"95\":2,\"96\":2,\"100\":2,\"187\":1,\"190\":2}}],[\"overview\",{\"0\":{\"113\":1,\"130\":1}}],[\"over\",{\"1\":{\"82\":1,\"113\":1}}],[\"our\",{\"1\":{\"75\":1,\"180\":1}}],[\"outputtarget\",{\"1\":{\"186\":2}}],[\"output\",{\"1\":{\"83\":1,\"110\":2,\"112\":1,\"186\":4}}],[\"outputs\",{\"1\":{\"46\":1}}],[\"out\",{\"1\":{\"10\":1,\"146\":1}}],[\"otherwise\",{\"1\":{\"158\":1}}],[\"other\",{\"0\":{\"127\":1},\"1\":{\"62\":1,\"73\":1,\"76\":1,\"83\":1,\"127\":1,\"168\":1}}],[\"occurred\",{\"1\":{\"62\":1}}],[\"onbeginrequestasync\",{\"1\":{\"187\":2,\"189\":1}}],[\"once\",{\"1\":{\"140\":2}}],[\"onresponseasync\",{\"1\":{\"82\":1}}],[\"onrequestasync\",{\"1\":{\"73\":1,\"75\":1,\"82\":1,\"85\":1}}],[\"on\",{\"1\":{\"62\":1,\"63\":1,\"65\":1,\"70\":1,\"73\":1,\"75\":1,\"115\":1,\"116\":2,\"142\":1,\"144\":1,\"161\":1}}],[\"onendrequestasync\",{\"1\":{\"189\":1}}],[\"one\",{\"1\":{\"48\":1,\"50\":1,\"122\":1,\"140\":1}}],[\"only\",{\"1\":{\"12\":2,\"19\":1,\"37\":1,\"80\":1,\"96\":1,\"97\":1,\"98\":1,\"140\":2,\"143\":1}}],[\"own\",{\"1\":{\"47\":1,\"65\":1,\"73\":1,\"75\":1}}],[\"optional\",{\"0\":{\"103\":1}}],[\"options\",{\"0\":{\"101\":1},\"1\":{\"7\":5,\"77\":2,\"85\":2,\"101\":2,\"115\":1,\"180\":2}}],[\"operation<\",{\"1\":{\"145\":4,\"146\":6}}],[\"operation\",{\"1\":{\"95\":1,\"104\":1}}],[\"operations\",{\"1\":{\"50\":1,\"146\":1,\"161\":1}}],[\"openapidocument\",{\"1\":{\"112\":2}}],[\"openapi=openapi\",{\"1\":{\"111\":1}}],[\"openapi\",{\"0\":{\"108\":1},\"1\":{\"5\":2,\"64\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"112\":1,\"135\":2}}],[\"o\",{\"1\":{\"7\":15,\"8\":4,\"59\":3,\"69\":2,\"79\":2,\"80\":2,\"81\":2,\"82\":2,\"93\":4,\"97\":6,\"103\":2,\"110\":1,\"111\":1,\"137\":1}}],[\"original\",{\"1\":{\"96\":1,\"151\":1}}],[\"orderby\",{\"1\":{\"76\":1}}],[\"order\",{\"1\":{\"10\":2,\"70\":1}}],[\"or\",{\"0\":{\"58\":1,\"125\":1,\"128\":1,\"165\":1},\"1\":{\"5\":1,\"9\":1,\"10\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"30\":1,\"37\":1,\"45\":1,\"50\":1,\"63\":1,\"64\":1,\"65\":1,\"67\":1,\"70\":2,\"73\":1,\"75\":1,\"83\":1,\"88\":1,\"89\":1,\"95\":1,\"108\":1,\"111\":1,\"120\":2,\"125\":2,\"128\":1,\"135\":1,\"151\":2,\"152\":3,\"157\":1,\"165\":2,\"166\":2,\"167\":2,\"170\":1,\"171\":1,\"177\":1,\"186\":2}}],[\"oauth\",{\"0\":{\"92\":1},\"1\":{\"98\":2,\"190\":1}}],[\"oauthtoken\",{\"0\":{\"95\":1},\"1\":{\"95\":1,\"97\":1}}],[\"oauthtokenhandler\",{\"0\":{\"91\":1,\"96\":1},\"1\":{\"96\":7}}],[\"oauthtokenattribute\",{\"0\":{\"90\":1},\"1\":{\"91\":1,\"95\":5}}],[\"oauth2\",{\"0\":{\"190\":1},\"1\":{\"5\":1,\"135\":1}}],[\"oauths\",{\"0\":{\"86\":1},\"1\":{\"5\":1,\"86\":1,\"135\":1}}],[\"official\",{\"1\":{\"144\":1}}],[\"of\",{\"0\":{\"1\":1,\"11\":1,\"52\":1,\"53\":1,\"73\":1,\"100\":1,\"124\":1,\"125\":2,\"127\":1,\"128\":1,\"141\":1,\"142\":1,\"143\":1,\"148\":1,\"158\":1,\"159\":1,\"160\":1},\"1\":{\"10\":1,\"12\":6,\"13\":3,\"14\":1,\"15\":1,\"16\":1,\"17\":2,\"30\":2,\"31\":1,\"33\":1,\"38\":1,\"40\":1,\"47\":1,\"48\":1,\"50\":1,\"58\":1,\"59\":1,\"62\":5,\"65\":2,\"68\":2,\"70\":2,\"75\":1,\"77\":2,\"81\":2,\"82\":1,\"85\":1,\"95\":3,\"96\":6,\"98\":1,\"99\":1,\"101\":3,\"108\":1,\"111\":2,\"112\":1,\"116\":1,\"122\":1,\"123\":4,\"124\":2,\"125\":1,\"126\":1,\"130\":1,\"132\":3,\"140\":3,\"142\":2,\"145\":5,\"146\":4,\"149\":1,\"151\":2,\"152\":3,\"154\":1,\"158\":1,\"159\":1,\"161\":1,\"168\":1,\"170\":1,\"171\":1}}],[\"error\",{\"1\":{\"182\":1,\"183\":1}}],[\"either\",{\"1\":{\"125\":1,\"157\":1}}],[\"escapedatastring\",{\"1\":{\"96\":1}}],[\"easily\",{\"1\":{\"102\":1,\"129\":1}}],[\"easy\",{\"1\":{\"86\":1,\"95\":1}}],[\"each\",{\"0\":{\"11\":1},\"1\":{\"13\":1,\"50\":1,\"75\":2,\"101\":1,\"177\":1,\"187\":1}}],[\"etc\",{\"1\":{\"73\":1,\"76\":2,\"115\":1,\"168\":1}}],[\"every\",{\"1\":{\"187\":1}}],[\"everything\",{\"1\":{\"145\":1}}],[\"even\",{\"1\":{\"59\":1,\"140\":1}}],[\"evaluating\",{\"1\":{\"63\":1}}],[\"equivalent\",{\"1\":{\"54\":1,\"85\":1}}],[\"emit\",{\"1\":{\"131\":1}}],[\"embody\",{\"1\":{\"98\":1}}],[\"emailaddress\",{\"1\":{\"57\":1}}],[\"email\",{\"1\":{\"24\":1,\"55\":1,\"57\":2,\"156\":1,\"162\":1}}],[\"empty\",{\"1\":{\"6\":2}}],[\"effect\",{\"1\":{\"12\":2,\"30\":1,\"95\":1,\"143\":2}}],[\"endpoint\",{\"1\":{\"93\":1,\"97\":1,\"190\":2}}],[\"entry\",{\"1\":{\"84\":1,\"140\":1}}],[\"entire\",{\"1\":{\"82\":1}}],[\"encoding\",{\"1\":{\"177\":1}}],[\"encoded\",{\"1\":{\"44\":1}}],[\"encounter\",{\"1\":{\"83\":1,\"105\":1}}],[\"encountered\",{\"1\":{\"62\":1}}],[\"enabled\",{\"1\":{\"59\":1}}],[\"enable\",{\"1\":{\"46\":1,\"80\":1,\"145\":1}}],[\"ensure\",{\"1\":{\"160\":1}}],[\"ensuresuccessstatuscode\",{\"1\":{\"12\":1,\"13\":5}}],[\"ensurematchacceptcontenttype\",{\"1\":{\"12\":1,\"13\":5,\"70\":2}}],[\"environments\",{\"1\":{\"129\":1}}],[\"environment\",{\"0\":{\"136\":1,\"139\":1},\"1\":{\"4\":1,\"7\":4}}],[\"exceeds\",{\"1\":{\"140\":1}}],[\"exception\",{\"0\":{\"181\":1,\"182\":1},\"1\":{\"62\":10,\"125\":1,\"183\":1}}],[\"exceptions\",{\"0\":{\"62\":1},\"1\":{\"62\":2,\"63\":1}}],[\"existing\",{\"1\":{\"95\":1,\"145\":1,\"161\":1}}],[\"extract\",{\"1\":{\"112\":1,\"149\":1}}],[\"extreme\",{\"1\":{\"85\":1}}],[\"extension\",{\"0\":{\"86\":1,\"102\":1,\"105\":1},\"1\":{\"63\":1,\"86\":1,\"98\":1,\"102\":1,\"105\":1}}],[\"extensions\",{\"0\":{\"184\":1},\"1\":{\"5\":6,\"86\":1,\"102\":1,\"105\":1,\"135\":6,\"184\":1}}],[\"example\",{\"0\":{\"144\":1,\"148\":1,\"162\":1,\"163\":1},\"1\":{\"67\":1,\"75\":1,\"77\":1,\"85\":1,\"95\":1,\"97\":1,\"110\":1,\"144\":1,\"160\":1,\"170\":2,\"180\":1}}],[\"exactly\",{\"1\":{\"61\":1}}],[\"executes\",{\"1\":{\"65\":1}}],[\"execution\",{\"1\":{\"10\":2,\"188\":1}}],[\"ex\",{\"1\":{\"62\":10,\"182\":3,\"183\":4,\"184\":1}}],[\"explicitly\",{\"0\":{\"177\":1},\"1\":{\"152\":1}}],[\"explicit\",{\"0\":{\"152\":1}}],[\"explanatory\",{\"0\":{\"85\":1},\"1\":{\"53\":1}}],[\"expires\",{\"1\":{\"89\":1}}],[\"expiration\",{\"1\":{\"84\":1}}],[\"expected\",{\"1\":{\"47\":1,\"70\":2,\"128\":1,\"152\":1}}],[\"p1=abc\",{\"1\":{\"170\":1}}],[\"phase\",{\"1\":{\"132\":1}}],[\"please\",{\"0\":{\"134\":1},\"1\":{\"117\":2}}],[\"platforms\",{\"1\":{\"119\":2,\"131\":1,\"132\":1}}],[\"placed\",{\"1\":{\"168\":1}}],[\"place\",{\"1\":{\"95\":1,\"96\":1,\"149\":1}}],[\"plain\",{\"1\":{\"41\":1,\"70\":1}}],[\"pet<\",{\"1\":{\"145\":2}}],[\"petid\",{\"1\":{\"145\":12}}],[\"pet\",{\"1\":{\"145\":18}}],[\"pets\",{\"1\":{\"145\":3}}],[\"petstore\",{\"1\":{\"110\":1,\"145\":2,\"146\":2}}],[\"personal\",{\"1\":{\"171\":1}}],[\"period\",{\"1\":{\"140\":1}}],[\"perfectly\",{\"1\":{\"115\":1}}],[\"pipe\",{\"1\":{\"64\":1}}],[\"pipes\",{\"1\":{\"64\":2}}],[\"port\",{\"1\":{\"170\":1}}],[\"point\",{\"1\":{\"140\":1,\"149\":1}}],[\"popular\",{\"1\":{\"105\":1}}],[\"polly\",{\"1\":{\"63\":1}}],[\"position\",{\"1\":{\"83\":1}}],[\"positions\",{\"0\":{\"11\":1}}],[\"possible\",{\"1\":{\"77\":1,\"123\":1,\"130\":1}}],[\"postasync\",{\"1\":{\"19\":1,\"21\":1,\"27\":1,\"28\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"51\":1,\"52\":3,\"54\":1,\"58\":1,\"65\":2,\"68\":1,\"73\":1,\"85\":1,\"104\":1}}],[\"postformdataasync\",{\"1\":{\"6\":1}}],[\"postformasync\",{\"1\":{\"6\":1}}],[\"postxmlasync\",{\"1\":{\"6\":1}}],[\"postjsonasync\",{\"1\":{\"6\":1}}],[\"post\",{\"0\":{\"164\":1},\"1\":{\"6\":4,\"21\":1,\"107\":1,\"120\":1,\"165\":1,\"166\":3,\"167\":3,\"168\":2,\"170\":1}}],[\"publish\",{\"1\":{\"77\":1}}],[\"publishing\",{\"0\":{\"77\":1}}],[\"public\",{\"1\":{\"6\":4,\"7\":3,\"8\":1,\"9\":6,\"11\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":4,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"48\":1,\"50\":1,\"51\":1,\"52\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":4,\"59\":1,\"63\":1,\"65\":1,\"67\":1,\"68\":4,\"69\":6,\"72\":1,\"73\":5,\"75\":3,\"76\":1,\"77\":1,\"82\":3,\"83\":4,\"84\":5,\"85\":8,\"95\":3,\"96\":2,\"97\":3,\"98\":1,\"100\":2,\"104\":1,\"106\":1,\"120\":1,\"131\":2,\"132\":1,\"137\":4,\"138\":4,\"140\":1,\"145\":1,\"146\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"156\":6,\"159\":3,\"162\":1,\"163\":1,\"171\":1,\"172\":1,\"175\":3,\"176\":3,\"180\":1,\"186\":1,\"187\":2,\"189\":2,\"190\":5}}],[\"puts\",{\"1\":{\"95\":1,\"96\":1}}],[\"putasync\",{\"1\":{\"22\":1}}],[\"put\",{\"0\":{\"164\":1},\"1\":{\"22\":1,\"95\":1,\"96\":1,\"165\":1}}],[\"packet\",{\"0\":{\"107\":1}}],[\"packages\",{\"0\":{\"119\":1}}],[\"package\",{\"1\":{\"5\":5,\"98\":1,\"105\":1,\"119\":1,\"135\":5}}],[\"passed\",{\"1\":{\"142\":1}}],[\"pass\",{\"1\":{\"85\":1,\"145\":1,\"172\":1}}],[\"passing\",{\"0\":{\"72\":1}}],[\"password=\",{\"1\":{\"186\":1}}],[\"password=123456\",{\"1\":{\"120\":1,\"166\":3,\"168\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"186\":1}}],[\"password\",{\"1\":{\"6\":1,\"58\":1,\"83\":1,\"97\":3,\"98\":1,\"120\":1,\"146\":3,\"156\":2,\"159\":2,\"170\":2,\"174\":1,\"175\":1,\"176\":1,\"186\":1}}],[\"pairs\",{\"1\":{\"40\":1,\"64\":1}}],[\"pair\",{\"1\":{\"30\":1,\"31\":1,\"33\":1}}],[\"path2\",{\"1\":{\"61\":3}}],[\"path1\",{\"1\":{\"61\":7,\"170\":1}}],[\"pathquery\",{\"1\":{\"30\":1,\"64\":5,\"72\":1,\"177\":4}}],[\"pathqueryattribute\",{\"0\":{\"30\":1},\"1\":{\"30\":1,\"64\":1}}],[\"path\",{\"0\":{\"171\":1},\"1\":{\"30\":1,\"111\":1,\"170\":1,\"171\":2,\"177\":1}}],[\"paths\",{\"1\":{\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"61\":1}}],[\"patch+json\",{\"1\":{\"161\":1}}],[\"patchasync\",{\"1\":{\"24\":1,\"55\":1,\"162\":2}}],[\"patch\",{\"0\":{\"161\":1},\"1\":{\"24\":1,\"161\":3,\"163\":1}}],[\"parent\",{\"1\":{\"123\":2}}],[\"params\",{\"1\":{\"107\":1}}],[\"param>\",{\"1\":{\"96\":3,\"145\":13,\"146\":9,\"190\":4}}],[\"parameterables\",{\"1\":{\"145\":1,\"146\":1}}],[\"parametervalue\",{\"1\":{\"83\":2}}],[\"parameterclass\",{\"1\":{\"11\":2}}],[\"parameter\",{\"0\":{\"29\":1,\"57\":1,\"65\":1,\"67\":1,\"85\":1,\"153\":1,\"155\":1,\"156\":1,\"157\":2,\"158\":1,\"159\":1},\"1\":{\"10\":1,\"13\":1,\"30\":3,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":2,\"38\":1,\"39\":1,\"40\":1,\"49\":1,\"53\":1,\"56\":1,\"57\":1,\"65\":2,\"67\":1,\"75\":2,\"98\":2,\"140\":1,\"142\":2,\"158\":1,\"159\":2,\"160\":1,\"165\":2,\"166\":4,\"167\":4,\"168\":2,\"171\":3,\"172\":2,\"177\":2,\"178\":2,\"179\":1,\"180\":6,\"187\":1}}],[\"parameters\",{\"0\":{\"49\":1,\"128\":1,\"154\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1},\"1\":{\"10\":1,\"30\":1,\"49\":1,\"50\":1,\"53\":1,\"65\":1,\"105\":1,\"128\":2,\"142\":1,\"154\":1,\"165\":2,\"166\":2,\"167\":2,\"168\":1}}],[\"parsing\",{\"0\":{\"83\":1},\"1\":{\"125\":2}}],[\"parses\",{\"1\":{\"135\":1}}],[\"parse\",{\"1\":{\"5\":1,\"108\":1,\"112\":1}}],[\"partially\",{\"0\":{\"176\":1},\"1\":{\"161\":1}}],[\"partial\",{\"1\":{\"7\":1,\"77\":1}}],[\"previous\",{\"1\":{\"160\":1}}],[\"prefix\",{\"1\":{\"132\":1}}],[\"precedence\",{\"1\":{\"82\":1}}],[\"precisely\",{\"1\":{\"63\":1}}],[\"prependjsonserializercontext\",{\"1\":{\"77\":1}}],[\"present\",{\"1\":{\"13\":1}}],[\"prerequisites\",{\"0\":{\"4\":1}}],[\"priority\",{\"0\":{\"141\":1,\"143\":1},\"1\":{\"143\":1,\"156\":1,\"188\":1}}],[\"principle\",{\"0\":{\"112\":1},\"1\":{\"125\":1}}],[\"primary\",{\"0\":{\"79\":1}}],[\"private\",{\"1\":{\"9\":2,\"85\":1,\"190\":3}}],[\"prism\",{\"1\":{\"7\":2}}],[\"programming\",{\"1\":{\"184\":1}}],[\"providing\",{\"1\":{\"88\":1}}],[\"provide\",{\"1\":{\"115\":1,\"129\":1,\"153\":1}}],[\"provides\",{\"1\":{\"105\":1,\"161\":1,\"179\":1,\"184\":1,\"185\":1,\"190\":1}}],[\"providers\",{\"1\":{\"98\":1}}],[\"provider<\",{\"1\":{\"96\":1}}],[\"provider\",{\"0\":{\"84\":1},\"1\":{\"69\":1,\"84\":3,\"89\":1,\"97\":1,\"98\":1,\"140\":2}}],[\"provided\",{\"1\":{\"10\":1,\"140\":1,\"157\":1}}],[\"protobufreturn\",{\"1\":{\"83\":1}}],[\"protobufcontentattribute\",{\"1\":{\"83\":1}}],[\"protobuf\",{\"1\":{\"83\":2}}],[\"protocol\",{\"1\":{\"83\":1,\"105\":1}}],[\"protected\",{\"1\":{\"7\":2,\"76\":1,\"83\":3,\"95\":1,\"96\":1,\"100\":2,\"190\":2}}],[\"proxyvalidator\",{\"1\":{\"124\":1}}],[\"proxy\",{\"0\":{\"124\":1},\"1\":{\"79\":2,\"122\":2,\"124\":1,\"131\":3,\"132\":3}}],[\"processed\",{\"1\":{\"70\":1}}],[\"process\",{\"1\":{\"70\":1,\"132\":1,\"152\":1}}],[\"processing\",{\"1\":{\"64\":1}}],[\"properly\",{\"1\":{\"132\":1}}],[\"proper\",{\"1\":{\"69\":1}}],[\"propertiesautowired\",{\"1\":{\"138\":1}}],[\"properties\",{\"1\":{\"58\":1,\"159\":1,\"177\":1}}],[\"property\",{\"0\":{\"157\":1,\"159\":1},\"1\":{\"12\":6,\"38\":1,\"68\":1,\"70\":1,\"101\":1,\"159\":2,\"171\":1}}],[\"propertynamingpolicy\",{\"1\":{\"8\":3}}],[\"projects\",{\"1\":{\"77\":1}}],[\"project\",{\"0\":{\"1\":1},\"1\":{\"4\":1,\"8\":1,\"131\":1,\"132\":1}}],[\"nickname\",{\"1\":{\"167\":2}}],[\"nswag\",{\"1\":{\"112\":1}}],[\"n\",{\"1\":{\"111\":1}}],[\"nullvaluehandling\",{\"1\":{\"103\":2}}],[\"null\",{\"1\":{\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"83\":1,\"140\":7,\"156\":1,\"159\":1,\"160\":1}}],[\"nuget\",{\"0\":{\"5\":1,\"119\":1,\"135\":1},\"1\":{\"5\":1,\"119\":1,\"132\":1,\"135\":1}}],[\"normal\",{\"1\":{\"96\":1}}],[\"normally\",{\"1\":{\"68\":1}}],[\"now\",{\"1\":{\"65\":1,\"75\":1,\"187\":1}}],[\"nongeneric\",{\"1\":{\"83\":2}}],[\"non\",{\"1\":{\"65\":1,\"119\":1,\"188\":1}}],[\"nonereturnattribute\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"nonereturn\",{\"1\":{\"13\":1}}],[\"none\",{\"1\":{\"12\":1,\"153\":1}}],[\"no\",{\"0\":{\"116\":1},\"1\":{\"30\":1,\"130\":1,\"132\":1,\"153\":1}}],[\"note\",{\"1\":{\"123\":1}}],[\"notimplementedexception\",{\"1\":{\"82\":2,\"84\":2}}],[\"not\",{\"0\":{\"125\":1},\"1\":{\"12\":1,\"47\":1,\"67\":1,\"70\":2,\"78\":1,\"81\":1,\"85\":1,\"96\":1,\"105\":1,\"116\":1,\"123\":1,\"125\":2,\"129\":2,\"131\":3,\"132\":1,\"140\":1,\"152\":1,\"159\":1,\"160\":1,\"180\":1,\"184\":1}}],[\"nested\",{\"0\":{\"69\":1},\"1\":{\"69\":1,\"132\":1}}],[\"next\",{\"1\":{\"47\":1}}],[\"need\",{\"0\":{\"122\":1},\"1\":{\"13\":1,\"84\":1,\"85\":1,\"95\":1,\"96\":2,\"97\":1,\"98\":1,\"132\":1,\"140\":2,\"145\":1,\"146\":1,\"152\":1,\"184\":1,\"186\":1,\"187\":1}}],[\"needs\",{\"1\":{\"10\":1,\"75\":1,\"95\":1,\"96\":1,\"145\":3,\"146\":2,\"187\":1}}],[\"newly\",{\"1\":{\"115\":1}}],[\"new\",{\"1\":{\"7\":7,\"24\":1,\"55\":1,\"61\":1,\"73\":1,\"79\":4,\"80\":2,\"81\":3,\"82\":3,\"83\":5,\"84\":2,\"85\":3,\"91\":1,\"93\":1,\"96\":4,\"97\":1,\"115\":1,\"120\":2,\"130\":2,\"131\":1,\"137\":1,\"138\":4,\"140\":2,\"145\":1,\"162\":1,\"189\":1,\"190\":6}}],[\"newtonsoft\",{\"1\":{\"5\":1,\"102\":1,\"135\":1}}],[\"newtonsoftjson\",{\"1\":{\"5\":1,\"102\":1,\"135\":1}}],[\"networksocket\",{\"1\":{\"186\":1}}],[\"netfx\",{\"1\":{\"157\":1}}],[\"net\",{\"0\":{\"77\":1,\"102\":1,\"137\":1,\"138\":1,\"163\":1},\"1\":{\"4\":1,\"5\":1,\"12\":1,\"68\":1,\"69\":1,\"102\":1,\"108\":1,\"115\":2,\"116\":4,\"135\":1,\"140\":1,\"145\":1,\"146\":1}}],[\"named\",{\"1\":{\"171\":1}}],[\"namespace=namespace\",{\"1\":{\"111\":1}}],[\"namespace\",{\"1\":{\"111\":2,\"131\":1,\"132\":1,\"145\":1,\"146\":1,\"154\":1,\"157\":1}}],[\"name=laojiu>\",{\"1\":{\"155\":1}}],[\"name=\",{\"1\":{\"96\":3,\"145\":13,\"146\":9,\"190\":4}}],[\"name=filenamevalue\",{\"1\":{\"67\":1}}],[\"nameof\",{\"1\":{\"84\":1,\"190\":3}}],[\"name\",{\"0\":{\"67\":1},\"1\":{\"5\":1,\"64\":1,\"67\":4,\"68\":2,\"69\":2,\"73\":1,\"84\":1,\"101\":3,\"106\":1,\"119\":1,\"131\":1,\"132\":2,\"135\":1,\"145\":3,\"146\":4,\"155\":1,\"171\":1,\"180\":1}}],[\"ienumerable<user>\",{\"1\":{\"146\":2}}],[\"ienumerable<string>\",{\"1\":{\"145\":1}}],[\"ienumerable<anonymous>\",{\"1\":{\"145\":1}}],[\"ienumerable<keyvalue>\",{\"1\":{\"76\":1}}],[\"ipetapi\",{\"0\":{\"145\":1},\"1\":{\"145\":1}}],[\"iprotobufapi\",{\"1\":{\"83\":1}}],[\"il\",{\"1\":{\"132\":1}}],[\"i\",{\"0\":{\"124\":1,\"126\":1,\"129\":1},\"1\":{\"183\":2,\"184\":2}}],[\"ihttpapi\",{\"0\":{\"122\":1},\"1\":{\"120\":1,\"122\":1,\"137\":1,\"138\":1,\"140\":1,\"145\":1,\"146\":1,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"162\":1,\"171\":1,\"172\":1,\"186\":1,\"187\":1}}],[\"iobservable\",{\"1\":{\"184\":1}}],[\"ios\",{\"1\":{\"119\":1,\"131\":1}}],[\"io\",{\"1\":{\"110\":1,\"145\":1,\"146\":1}}],[\"ignoreserialized\",{\"1\":{\"156\":1}}],[\"ignorewhennull\",{\"1\":{\"156\":1,\"177\":1}}],[\"ignored\",{\"1\":{\"143\":1}}],[\"ignore\",{\"1\":{\"103\":1,\"156\":2}}],[\"ibaidu\",{\"1\":{\"97\":7}}],[\"imywebapi\",{\"1\":{\"137\":2,\"138\":2,\"140\":3,\"148\":1,\"149\":2,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"162\":1,\"171\":1,\"172\":1}}],[\"imaging\",{\"1\":{\"85\":1}}],[\"imageformat\",{\"1\":{\"85\":1}}],[\"image\",{\"1\":{\"85\":2,\"145\":1}}],[\"image2\",{\"1\":{\"85\":5}}],[\"image1\",{\"1\":{\"85\":5}}],[\"improved\",{\"1\":{\"85\":1}}],[\"improvement\",{\"0\":{\"1\":1}}],[\"important\",{\"1\":{\"81\":1,\"123\":1}}],[\"implicit\",{\"0\":{\"151\":1}}],[\"implicitly\",{\"1\":{\"13\":1,\"30\":1}}],[\"implementing\",{\"1\":{\"185\":1,\"188\":1}}],[\"implementation\",{\"0\":{\"73\":1,\"100\":1},\"1\":{\"95\":1,\"96\":1,\"98\":1,\"99\":2}}],[\"implement\",{\"1\":{\"47\":1,\"51\":1,\"53\":1,\"54\":1,\"63\":1,\"75\":1,\"85\":1,\"95\":1,\"179\":1,\"188\":1}}],[\"iwebapiclientbuilder\",{\"1\":{\"84\":2}}],[\"iuserloginapi\",{\"1\":{\"83\":1}}],[\"iuserapi\",{\"0\":{\"146\":1},\"1\":{\"6\":1,\"9\":2,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"48\":1,\"50\":1,\"51\":1,\"52\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"63\":1,\"65\":2,\"67\":1,\"68\":1,\"72\":1,\"73\":1,\"75\":1,\"83\":2,\"95\":2,\"104\":1,\"106\":1,\"120\":1,\"146\":1,\"186\":2,\"187\":1}}],[\"irregular\",{\"0\":{\"66\":1}}],[\"iresponsecacheprovider\",{\"1\":{\"47\":1,\"84\":1}}],[\"ifaceapi\",{\"1\":{\"85\":1}}],[\"if\",{\"0\":{\"134\":1},\"1\":{\"13\":1,\"17\":1,\"47\":1,\"59\":1,\"63\":1,\"67\":1,\"69\":1,\"81\":1,\"83\":1,\"84\":1,\"91\":1,\"95\":1,\"96\":4,\"125\":1,\"140\":1,\"149\":1,\"156\":1,\"160\":1,\"168\":1,\"172\":1,\"180\":1,\"186\":1}}],[\"itask\",{\"1\":{\"129\":1}}],[\"itask<apiresponse>\",{\"1\":{\"145\":1}}],[\"itask<pet>\",{\"1\":{\"145\":1}}],[\"itask<list<pet>>\",{\"1\":{\"145\":2}}],[\"itask<httpresponsemessage>\",{\"1\":{\"145\":4,\"146\":6,\"148\":1,\"149\":1,\"151\":1,\"158\":1}}],[\"itask<httpresponsefile>\",{\"1\":{\"126\":1}}],[\"itask<bool>\",{\"1\":{\"180\":2}}],[\"itask<boo>\",{\"1\":{\"120\":1}}],[\"itask<byte\",{\"1\":{\"127\":1}}],[\"itask<stream>\",{\"1\":{\"127\":1}}],[\"itask<string>\",{\"1\":{\"67\":1,\"127\":1,\"146\":1,\"155\":1,\"171\":1,\"172\":2}}],[\"itask<userinfo>\",{\"1\":{\"120\":1,\"137\":1,\"138\":1,\"140\":1,\"151\":2,\"152\":1,\"153\":1,\"159\":1,\"160\":1,\"165\":2,\"166\":3,\"167\":3,\"168\":2,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1}}],[\"itask<user>\",{\"1\":{\"63\":1,\"72\":1,\"146\":1}}],[\"itask<jsonrpcresult<user>>\",{\"1\":{\"106\":1}}],[\"itask<>\",{\"1\":{\"63\":2}}],[\"itokenapi\",{\"1\":{\"98\":1}}],[\"itokenproviderbuilder\",{\"1\":{\"101\":2}}],[\"itokenprovider\",{\"0\":{\"89\":1},\"1\":{\"88\":2,\"90\":2,\"96\":1}}],[\"itokenproviderfactory\",{\"0\":{\"88\":1},\"1\":{\"90\":1}}],[\"its\",{\"1\":{\"70\":1,\"96\":1,\"132\":1,\"159\":1}}],[\"item\",{\"1\":{\"24\":4,\"51\":1,\"54\":1,\"55\":4,\"76\":2,\"162\":4}}],[\"it\",{\"0\":{\"125\":1},\"1\":{\"12\":4,\"47\":1,\"59\":1,\"61\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"73\":1,\"77\":1,\"81\":2,\"84\":1,\"86\":1,\"89\":1,\"90\":1,\"91\":1,\"95\":3,\"96\":6,\"99\":1,\"108\":1,\"112\":1,\"115\":1,\"123\":3,\"128\":1,\"140\":2,\"142\":3,\"149\":1,\"159\":1,\"168\":2,\"172\":1,\"177\":2,\"180\":2,\"184\":1,\"186\":1}}],[\"iapiactionfilter\",{\"1\":{\"188\":2,\"189\":1}}],[\"iapiactionfilterattribute\",{\"1\":{\"179\":1,\"185\":2}}],[\"iapiactionattribute\",{\"1\":{\"10\":1,\"11\":1,\"179\":1}}],[\"iapifilter\",{\"1\":{\"82\":2}}],[\"iapifilterattribute\",{\"1\":{\"10\":2,\"11\":2,\"82\":2}}],[\"iapiparameterable\",{\"1\":{\"179\":1}}],[\"iapiparameterattribute\",{\"0\":{\"180\":1},\"1\":{\"10\":1,\"11\":1,\"179\":1,\"180\":1}}],[\"iapiparameter\",{\"0\":{\"53\":1},\"1\":{\"53\":1,\"85\":2}}],[\"iapireturnattribute\",{\"1\":{\"10\":2,\"11\":2,\"179\":1}}],[\"icontainerregistry\",{\"1\":{\"7\":1}}],[\"icontainerextension\",{\"1\":{\"7\":1}}],[\"iso8601\",{\"1\":{\"120\":1,\"138\":1,\"140\":1}}],[\"issues\",{\"1\":{\"95\":1,\"96\":1,\"117\":1,\"128\":1}}],[\"issued\",{\"1\":{\"80\":1}}],[\"iserviceprovider\",{\"1\":{\"100\":3}}],[\"iservicescopefactory\",{\"1\":{\"9\":2}}],[\"iservicecollection\",{\"1\":{\"7\":1,\"8\":1,\"59\":1,\"137\":1}}],[\"is\",{\"0\":{\"125\":1},\"1\":{\"8\":1,\"12\":6,\"17\":2,\"19\":1,\"26\":1,\"30\":2,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"59\":1,\"61\":2,\"62\":5,\"67\":2,\"68\":1,\"69\":2,\"70\":3,\"73\":2,\"77\":1,\"81\":1,\"84\":1,\"86\":1,\"95\":2,\"96\":4,\"98\":1,\"99\":1,\"101\":1,\"105\":1,\"115\":1,\"122\":2,\"123\":3,\"125\":2,\"128\":1,\"129\":1,\"131\":1,\"132\":2,\"140\":5,\"142\":2,\"143\":3,\"151\":2,\"152\":1,\"156\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":2,\"163\":1,\"168\":1,\"171\":2,\"172\":1,\"177\":2,\"180\":4,\"185\":2,\"186\":3}}],[\"isdevelopment\",{\"1\":{\"7\":3}}],[\"ideal\",{\"1\":{\"180\":1}}],[\"ideas\",{\"1\":{\"115\":1}}],[\"id=002\",{\"1\":{\"64\":1}}],[\"id=001|002\",{\"1\":{\"64\":1}}],[\"id=001\",{\"1\":{\"64\":4}}],[\"id001\",{\"1\":{\"9\":2,\"63\":1,\"137\":1,\"138\":1,\"140\":1,\"162\":1,\"182\":1,\"183\":1,\"184\":1}}],[\"id\",{\"1\":{\"6\":2,\"9\":2,\"19\":1,\"20\":2,\"24\":2,\"25\":2,\"26\":2,\"30\":2,\"38\":2,\"39\":2,\"40\":4,\"46\":2,\"48\":2,\"50\":2,\"52\":3,\"55\":2,\"63\":3,\"64\":1,\"72\":1,\"73\":2,\"93\":1,\"97\":1,\"99\":1,\"100\":1,\"107\":1,\"137\":2,\"138\":2,\"140\":2,\"145\":2,\"158\":3,\"162\":1,\"163\":2,\"190\":6}}],[\"influence\",{\"1\":{\"154\":1}}],[\"information\",{\"1\":{\"144\":1,\"171\":1,\"186\":1}}],[\"independently\",{\"1\":{\"140\":1}}],[\"index\",{\"1\":{\"137\":1,\"138\":1}}],[\"indicates\",{\"1\":{\"152\":1}}],[\"indicate\",{\"1\":{\"117\":1}}],[\"indicating\",{\"1\":{\"70\":1,\"177\":1}}],[\"inspecting\",{\"1\":{\"132\":1}}],[\"insert\",{\"1\":{\"132\":1}}],[\"instructions\",{\"1\":{\"132\":1}}],[\"instead\",{\"0\":{\"125\":1},\"1\":{\"70\":1,\"96\":1}}],[\"instantiating\",{\"1\":{\"188\":1}}],[\"instanceperhttprequest\",{\"1\":{\"138\":1}}],[\"instance\",{\"1\":{\"9\":1,\"68\":1,\"81\":1,\"140\":6,\"186\":2}}],[\"install\",{\"1\":{\"109\":1,\"132\":1}}],[\"installation\",{\"0\":{\"5\":1,\"109\":1}}],[\"incorrectly\",{\"1\":{\"129\":1}}],[\"including\",{\"1\":{\"115\":1,\"119\":1,\"131\":1,\"179\":1}}],[\"include\",{\"1\":{\"127\":1}}],[\"includes\",{\"1\":{\"61\":1,\"65\":1,\"98\":1}}],[\"include=\",{\"1\":{\"7\":1}}],[\"inheritance\",{\"1\":{\"123\":1}}],[\"inheriting\",{\"1\":{\"122\":1}}],[\"inherit\",{\"0\":{\"122\":1,\"123\":1},\"1\":{\"123\":1}}],[\"invocation\",{\"1\":{\"120\":1}}],[\"invoke\",{\"0\":{\"9\":1},\"1\":{\"9\":1}}],[\"input\",{\"1\":{\"85\":1,\"146\":2}}],[\"innerexception\",{\"1\":{\"62\":4}}],[\"inner\",{\"1\":{\"62\":2}}],[\"integrates\",{\"1\":{\"115\":1}}],[\"interaction\",{\"1\":{\"161\":1}}],[\"interested\",{\"1\":{\"125\":2}}],[\"internal\",{\"1\":{\"62\":1}}],[\"interfaces\",{\"0\":{\"6\":1,\"7\":1,\"9\":1,\"66\":1,\"97\":1,\"122\":1},\"1\":{\"8\":2,\"10\":1,\"65\":1,\"77\":1,\"85\":1,\"97\":1,\"105\":1,\"122\":2,\"131\":1,\"132\":1,\"142\":1,\"144\":1,\"179\":1}}],[\"interface\",{\"0\":{\"82\":1,\"93\":1,\"122\":1,\"123\":2,\"125\":1,\"127\":1,\"128\":1},\"1\":{\"5\":1,\"6\":1,\"9\":2,\"11\":3,\"13\":1,\"19\":3,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"48\":1,\"50\":2,\"51\":1,\"52\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"59\":1,\"63\":1,\"65\":1,\"67\":1,\"68\":1,\"70\":1,\"72\":1,\"73\":1,\"75\":2,\"81\":1,\"82\":3,\"83\":1,\"85\":2,\"88\":1,\"93\":1,\"95\":4,\"96\":3,\"97\":6,\"98\":4,\"99\":1,\"100\":1,\"104\":2,\"106\":1,\"108\":1,\"110\":1,\"120\":4,\"122\":1,\"123\":5,\"126\":1,\"128\":1,\"131\":1,\"132\":3,\"135\":1,\"137\":2,\"138\":2,\"140\":2,\"142\":2,\"143\":3,\"145\":1,\"146\":1,\"148\":1,\"149\":2,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"162\":1,\"171\":2,\"172\":1,\"179\":1,\"180\":3,\"185\":1,\"186\":2,\"187\":1,\"188\":2}}],[\"introduction\",{\"0\":{\"111\":1,\"114\":1},\"1\":{\"161\":1}}],[\"into\",{\"0\":{\"175\":1,\"176\":1},\"1\":{\"83\":1,\"112\":1,\"146\":1,\"180\":1}}],[\"int\",{\"1\":{\"38\":1,\"68\":1,\"69\":1,\"106\":1,\"168\":1}}],[\"injected\",{\"1\":{\"73\":1}}],[\"inject\",{\"0\":{\"9\":1},\"1\":{\"9\":2}}],[\"injection\",{\"0\":{\"136\":1,\"139\":1},\"1\":{\"4\":1,\"7\":1,\"115\":1,\"137\":1}}],[\"initialization\",{\"1\":{\"140\":1}}],[\"initial\",{\"1\":{\"8\":1}}],[\"in\",{\"0\":{\"10\":1,\"70\":1,\"82\":1,\"128\":1},\"1\":{\"7\":1,\"8\":1,\"9\":2,\"10\":1,\"19\":1,\"38\":1,\"51\":1,\"54\":1,\"58\":1,\"61\":1,\"62\":2,\"64\":2,\"65\":1,\"67\":1,\"69\":1,\"70\":3,\"76\":1,\"77\":2,\"78\":1,\"82\":2,\"83\":1,\"84\":2,\"85\":1,\"89\":1,\"91\":1,\"93\":1,\"95\":3,\"96\":3,\"98\":2,\"104\":1,\"105\":1,\"110\":1,\"125\":2,\"128\":2,\"129\":1,\"131\":3,\"137\":1,\"140\":2,\"142\":1,\"144\":1,\"145\":1,\"146\":2,\"149\":1,\"154\":1,\"159\":1,\"160\":1,\"179\":1,\"180\":2,\"184\":1,\"186\":1}}],[\"dd\",{\"1\":{\"156\":2}}],[\"dll\",{\"1\":{\"131\":1}}],[\"due\",{\"1\":{\"91\":1}}],[\"during\",{\"1\":{\"85\":1,\"132\":1,\"140\":1}}],[\"duration\",{\"1\":{\"26\":2,\"38\":1}}],[\"drawing\",{\"1\":{\"85\":1}}],[\"date\",{\"1\":{\"156\":2}}],[\"datetimeformats\",{\"1\":{\"120\":1,\"138\":1,\"140\":1}}],[\"datetimeformat\",{\"1\":{\"120\":1,\"138\":1,\"140\":1,\"156\":2,\"177\":1}}],[\"datetime\",{\"1\":{\"75\":1,\"156\":2,\"187\":1}}],[\"database\",{\"1\":{\"163\":1}}],[\"dataannotations\",{\"1\":{\"140\":1,\"145\":2,\"146\":2,\"154\":1,\"157\":1}}],[\"datatype\",{\"1\":{\"83\":1}}],[\"data\",{\"0\":{\"56\":1,\"59\":1,\"107\":1,\"167\":1},\"1\":{\"6\":1,\"12\":1,\"28\":1,\"33\":1,\"34\":1,\"45\":1,\"51\":1,\"54\":1,\"59\":2,\"62\":1,\"64\":1,\"69\":1,\"73\":1,\"128\":1,\"145\":2,\"151\":1,\"152\":1}}],[\"db\",{\"1\":{\"73\":1}}],[\"dynamically\",{\"0\":{\"75\":1},\"1\":{\"142\":1,\"187\":1}}],[\"dynamic\",{\"0\":{\"71\":1,\"171\":1,\"172\":1}}],[\"d\",{\"1\":{\"61\":12}}],[\"directly\",{\"1\":{\"131\":1,\"168\":1}}],[\"directory\",{\"1\":{\"110\":1}}],[\"disposing\",{\"1\":{\"140\":1}}],[\"dispose\",{\"1\":{\"122\":1}}],[\"display\",{\"1\":{\"111\":1}}],[\"discard\",{\"1\":{\"91\":1,\"96\":1}}],[\"discussed\",{\"1\":{\"78\":1}}],[\"disable\",{\"0\":{\"59\":1},\"1\":{\"59\":2}}],[\"disables\",{\"1\":{\"46\":1,\"159\":1}}],[\"di\",{\"1\":{\"73\":1,\"140\":1}}],[\"difficult\",{\"1\":{\"70\":1,\"96\":1}}],[\"different\",{\"1\":{\"64\":1,\"84\":1,\"142\":1,\"171\":2}}],[\"dictionary<string\",{\"1\":{\"40\":1}}],[\"don\",{\"1\":{\"140\":1}}],[\"done\",{\"1\":{\"132\":1}}],[\"download\",{\"0\":{\"126\":1}}],[\"do\",{\"0\":{\"122\":1},\"1\":{\"131\":1,\"189\":2}}],[\"does\",{\"1\":{\"70\":1,\"129\":2,\"132\":1}}],[\"doc\",{\"1\":{\"24\":4,\"55\":4,\"162\":5,\"163\":2}}],[\"document\",{\"1\":{\"55\":1}}],[\"documents\",{\"1\":{\"5\":1,\"135\":1}}],[\"documentation\",{\"0\":{\"2\":1},\"1\":{\"108\":1,\"130\":1,\"134\":1,\"144\":1}}],[\"domain\",{\"1\":{\"19\":1,\"149\":1}}],[\"dotnetcore\",{\"1\":{\"117\":1}}],[\"dotnet\",{\"1\":{\"5\":1,\"109\":1,\"135\":1}}],[\"debugging\",{\"1\":{\"186\":1}}],[\"depending\",{\"1\":{\"142\":1}}],[\"dependencyresolver\",{\"1\":{\"138\":1}}],[\"dependencyinjection\",{\"1\":{\"7\":2}}],[\"dependency\",{\"0\":{\"136\":1,\"139\":1},\"1\":{\"4\":1,\"7\":1,\"115\":1,\"137\":1}}],[\"deal\",{\"1\":{\"140\":1}}],[\"deadlocks\",{\"1\":{\"129\":1}}],[\"developer\",{\"1\":{\"125\":1}}],[\"developers\",{\"1\":{\"10\":1,\"47\":1,\"105\":1}}],[\"definition\",{\"1\":{\"108\":1,\"110\":1}}],[\"defaultversionpolicy\",{\"1\":{\"78\":1}}],[\"defaultrequestversion\",{\"1\":{\"78\":1}}],[\"default\",{\"0\":{\"13\":1,\"65\":1},\"1\":{\"6\":5,\"8\":1,\"12\":2,\"13\":2,\"17\":2,\"50\":1,\"59\":1,\"65\":2,\"77\":1,\"81\":1,\"84\":2,\"95\":1,\"96\":1,\"106\":1}}],[\"decoration\",{\"1\":{\"177\":1}}],[\"decorated\",{\"1\":{\"177\":1}}],[\"decorate\",{\"1\":{\"105\":1,\"172\":1}}],[\"decompiler\",{\"1\":{\"132\":1}}],[\"declarative\",{\"1\":{\"112\":1}}],[\"declaration\",{\"0\":{\"106\":1,\"144\":1},\"1\":{\"63\":1,\"82\":1,\"120\":1,\"137\":1,\"138\":1,\"140\":1}}],[\"declaring\",{\"0\":{\"127\":1},\"1\":{\"50\":1,\"65\":1,\"75\":1}}],[\"declared\",{\"0\":{\"122\":1,\"127\":1,\"128\":1},\"1\":{\"19\":1,\"127\":1,\"151\":1,\"171\":1}}],[\"declare\",{\"0\":{\"6\":1,\"104\":1,\"125\":1,\"177\":1},\"1\":{\"13\":1,\"70\":1,\"125\":1,\"126\":1,\"128\":2,\"152\":1,\"160\":1}}],[\"delegate\",{\"0\":{\"99\":1},\"1\":{\"99\":2}}],[\"deleteuserasync\",{\"1\":{\"146\":1}}],[\"deleted<\",{\"1\":{\"146\":1}}],[\"deletepetasync\",{\"1\":{\"145\":1}}],[\"delete<\",{\"1\":{\"145\":1}}],[\"deletes\",{\"1\":{\"145\":1}}],[\"deleteasync\",{\"1\":{\"23\":1}}],[\"delete\",{\"0\":{\"164\":1},\"1\":{\"23\":1,\"146\":1}}],[\"determining\",{\"1\":{\"96\":1}}],[\"determined\",{\"1\":{\"172\":1}}],[\"determine\",{\"1\":{\"73\":1}}],[\"detailed\",{\"1\":{\"161\":1}}],[\"detail\",{\"1\":{\"78\":1}}],[\"derived\",{\"1\":{\"76\":1}}],[\"demoapimethod\",{\"1\":{\"11\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1}}],[\"demoapiinterface\",{\"1\":{\"11\":1}}],[\"describes\",{\"1\":{\"161\":1}}],[\"description\",{\"1\":{\"5\":1,\"65\":1,\"119\":1,\"135\":1}}],[\"designed\",{\"1\":{\"161\":1}}],[\"design\",{\"1\":{\"125\":1,\"180\":2,\"187\":1}}],[\"desired\",{\"1\":{\"65\":1}}],[\"deserialize\",{\"1\":{\"83\":1}}],[\"deserializing\",{\"1\":{\"83\":1,\"95\":1,\"102\":1}}],[\"deserialization\",{\"1\":{\"7\":2,\"15\":1,\"16\":1}}],[\"1+\",{\"0\":{\"137\":1}}],[\"123456\",{\"1\":{\"83\":1,\"120\":1}}],[\"1d\",{\"1\":{\"78\":1}}],[\"18\",{\"1\":{\"68\":1,\"69\":1,\"107\":1}}],[\"10s\",{\"1\":{\"186\":1}}],[\"1000\",{\"1\":{\"26\":1,\"48\":1,\"186\":1}}],[\"10\",{\"1\":{\"26\":2,\"58\":2,\"158\":2,\"159\":2,\"186\":3}}],[\"11\",{\"1\":{\"7\":1}}],[\"1\",{\"0\":{\"180\":1,\"182\":1,\"185\":1,\"186\":2,\"187\":1,\"189\":1},\"1\":{\"4\":1,\"13\":5,\"58\":2,\"107\":4,\"115\":1,\"159\":1,\"186\":2}}],[\"2722715\",{\"1\":{\"186\":1}}],[\"27\",{\"1\":{\"186\":1}}],[\"25\",{\"1\":{\"186\":1}}],[\"23\",{\"1\":{\"186\":2}}],[\"2d\",{\"1\":{\"140\":1}}],[\"2018\",{\"1\":{\"186\":2}}],[\"204\",{\"1\":{\"17\":2}}],[\"200\",{\"1\":{\"12\":1}}],[\"299\",{\"1\":{\"12\":1}}],[\"2\",{\"0\":{\"137\":1,\"183\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":2},\"1\":{\"4\":1,\"81\":1,\"107\":1,\"115\":1,\"116\":2}}],[\"ss\",{\"1\":{\"156\":1}}],[\"ssv\",{\"1\":{\"64\":2}}],[\"slightly\",{\"1\":{\"142\":1}}],[\"synchronous\",{\"0\":{\"129\":1},\"1\":{\"129\":2}}],[\"system\",{\"1\":{\"15\":1,\"16\":1,\"77\":1,\"82\":2,\"85\":1,\"140\":1,\"145\":6,\"146\":7,\"157\":1}}],[\"shown\",{\"1\":{\"187\":1}}],[\"should\",{\"1\":{\"126\":1,\"140\":1}}],[\"shared\",{\"0\":{\"97\":1}}],[\"swagger\",{\"0\":{\"108\":1},\"1\":{\"108\":1,\"110\":2,\"144\":4,\"145\":2,\"146\":2}}],[\"save\",{\"1\":{\"85\":1}}],[\"same\",{\"1\":{\"12\":1,\"13\":1,\"61\":2,\"64\":1,\"96\":1,\"101\":1,\"131\":2,\"132\":1,\"140\":2,\"149\":1,\"157\":1,\"171\":1}}],[\"sg\",{\"1\":{\"77\":1}}],[\"since\",{\"1\":{\"105\":1,\"129\":1,\"131\":1}}],[\"singleinstance\",{\"1\":{\"138\":1}}],[\"single\",{\"1\":{\"96\":1}}],[\"singleton\",{\"1\":{\"9\":1}}],[\"simpler\",{\"1\":{\"185\":1}}],[\"simple\",{\"0\":{\"148\":1},\"1\":{\"166\":1,\"167\":1}}],[\"simplest\",{\"1\":{\"99\":1}}],[\"simply\",{\"1\":{\"105\":1}}],[\"similarly\",{\"1\":{\"91\":1,\"96\":1}}],[\"similar\",{\"1\":{\"70\":1}}],[\"signfilter\",{\"1\":{\"75\":1,\"187\":3}}],[\"signfilterattribute\",{\"1\":{\"75\":1}}],[\"signvalue\",{\"1\":{\"75\":1}}],[\"signservice\",{\"1\":{\"75\":2}}],[\"sign\",{\"1\":{\"75\":5,\"187\":4}}],[\"signature\",{\"0\":{\"75\":1},\"1\":{\"76\":1}}],[\"signing\",{\"0\":{\"74\":1}}],[\"sb\",{\"1\":{\"68\":1,\"69\":1}}],[\"spirit\",{\"1\":{\"98\":1}}],[\"space\",{\"1\":{\"64\":1}}],[\"specify\",{\"1\":{\"63\":1}}],[\"specified\",{\"1\":{\"30\":1,\"186\":1}}],[\"specific\",{\"0\":{\"168\":1},\"1\":{\"10\":1,\"13\":2,\"62\":1,\"63\":2,\"128\":1}}],[\"special\",{\"0\":{\"49\":1},\"1\":{\"49\":1}}],[\"summarized\",{\"1\":{\"161\":1}}],[\"summary>\",{\"1\":{\"73\":1,\"83\":1,\"95\":1,\"96\":2,\"104\":1,\"145\":9,\"146\":9,\"190\":7}}],[\"suitable\",{\"1\":{\"131\":1}}],[\"subscribe\",{\"1\":{\"184\":1}}],[\"submission\",{\"1\":{\"180\":1}}],[\"submitting\",{\"0\":{\"165\":1,\"166\":1,\"167\":1,\"168\":1},\"1\":{\"70\":1,\"165\":2,\"167\":1}}],[\"submitted\",{\"1\":{\"69\":1}}],[\"submit\",{\"1\":{\"69\":1,\"180\":1}}],[\"subclass\",{\"1\":{\"65\":1,\"75\":1,\"168\":1}}],[\"subclasses\",{\"1\":{\"56\":1,\"82\":1}}],[\"subtypes\",{\"0\":{\"52\":1,\"53\":1}}],[\"such\",{\"1\":{\"13\":1,\"14\":1,\"83\":1,\"85\":1,\"95\":1,\"96\":2,\"111\":1,\"142\":1,\"168\":1,\"170\":1,\"171\":1,\"177\":1}}],[\"supporting\",{\"0\":{\"134\":1}}],[\"supported\",{\"0\":{\"125\":1}}],[\"supports\",{\"1\":{\"14\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"50\":1,\"119\":1,\"132\":1}}],[\"support\",{\"0\":{\"133\":1},\"1\":{\"4\":1,\"86\":1,\"96\":1,\"102\":1,\"105\":1,\"116\":2,\"129\":1,\"131\":1,\"134\":1}}],[\"scheme\",{\"1\":{\"170\":1}}],[\"screen\",{\"1\":{\"111\":1}}],[\"scenarios\",{\"1\":{\"105\":1,\"184\":1}}],[\"scenario\",{\"1\":{\"10\":1,\"69\":1}}],[\"scope\",{\"0\":{\"141\":1,\"142\":1},\"1\":{\"9\":3}}],[\"scoped\",{\"1\":{\"9\":1}}],[\"segment\",{\"1\":{\"171\":1}}],[\"semantically\",{\"1\":{\"171\":1}}],[\"session\",{\"1\":{\"146\":1}}],[\"secret\",{\"1\":{\"93\":1,\"97\":1,\"99\":1,\"100\":1,\"190\":7}}],[\"section\",{\"1\":{\"78\":1,\"160\":1}}],[\"seconds\",{\"1\":{\"26\":1}}],[\"seen\",{\"1\":{\"132\":1}}],[\"see\",{\"1\":{\"65\":1}}],[\"separated\",{\"1\":{\"64\":4}}],[\"self\",{\"0\":{\"85\":1},\"1\":{\"53\":1}}],[\"sending\",{\"1\":{\"45\":1}}],[\"serving\",{\"1\":{\"122\":1}}],[\"servicename\",{\"1\":{\"73\":5}}],[\"servicenamehostattribute\",{\"1\":{\"73\":3}}],[\"servicenamehost\",{\"1\":{\"73\":1}}],[\"service\",{\"0\":{\"117\":1},\"1\":{\"69\":1,\"73\":3,\"101\":1,\"140\":1}}],[\"serviceprovider\",{\"1\":{\"9\":1,\"73\":1,\"75\":1,\"100\":6,\"140\":4,\"186\":1}}],[\"serviceproviderextensions\",{\"1\":{\"7\":1}}],[\"servicecollection\",{\"1\":{\"7\":2}}],[\"servicescopefactory\",{\"1\":{\"9\":5}}],[\"services\",{\"1\":{\"7\":7,\"8\":2,\"9\":2,\"59\":2,\"65\":1,\"69\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":2,\"84\":1,\"93\":1,\"96\":2,\"97\":1,\"99\":1,\"100\":1,\"103\":1,\"137\":3}}],[\"server<\",{\"1\":{\"145\":1}}],[\"servers\",{\"1\":{\"80\":1}}],[\"server\",{\"0\":{\"163\":1},\"1\":{\"47\":1,\"67\":1,\"70\":1,\"85\":1,\"91\":1,\"95\":1,\"96\":2,\"128\":1,\"149\":1,\"161\":1,\"180\":1}}],[\"serializing\",{\"1\":{\"102\":1}}],[\"serializes\",{\"1\":{\"180\":1}}],[\"serializer\",{\"1\":{\"83\":2}}],[\"serializetokeyvalues\",{\"1\":{\"76\":2}}],[\"serialize\",{\"1\":{\"68\":1,\"83\":1,\"180\":1}}],[\"serialized\",{\"1\":{\"35\":1,\"36\":1}}],[\"serialization\",{\"1\":{\"7\":3,\"15\":1,\"16\":2,\"68\":1,\"77\":1,\"128\":1,\"140\":1,\"154\":1,\"156\":2}}],[\"setresolver\",{\"1\":{\"138\":1}}],[\"setresultasync\",{\"1\":{\"83\":1}}],[\"setasync\",{\"1\":{\"84\":1}}],[\"sethttpcontentasync\",{\"1\":{\"83\":1}}],[\"sets\",{\"1\":{\"17\":1}}],[\"set\",{\"1\":{\"6\":2,\"40\":2,\"58\":2,\"68\":2,\"69\":4,\"70\":1,\"83\":1,\"85\":4,\"97\":1,\"138\":1,\"143\":2,\"156\":5,\"159\":3,\"175\":2,\"176\":2,\"177\":1,\"190\":3}}],[\"step\",{\"1\":{\"132\":1}}],[\"still\",{\"1\":{\"91\":1,\"98\":1}}],[\"storage\",{\"1\":{\"84\":1}}],[\"store<\",{\"1\":{\"145\":2}}],[\"store\",{\"1\":{\"84\":1,\"145\":2}}],[\"strategy\",{\"0\":{\"183\":1}}],[\"strategies\",{\"0\":{\"181\":1}}],[\"strong\",{\"1\":{\"165\":2,\"166\":1,\"167\":1}}],[\"strongly\",{\"0\":{\"150\":1,\"151\":1,\"152\":1},\"1\":{\"83\":1}}],[\"strength\",{\"1\":{\"96\":1}}],[\"streamcontent\",{\"1\":{\"52\":1,\"83\":1,\"168\":1}}],[\"stream\",{\"1\":{\"14\":1,\"52\":1,\"83\":6,\"85\":3}}],[\"stringlength\",{\"1\":{\"58\":2,\"158\":1,\"159\":2}}],[\"stringcontent\",{\"1\":{\"52\":1,\"168\":1}}],[\"string>\",{\"1\":{\"40\":1}}],[\"string\",{\"1\":{\"6\":5,\"7\":1,\"14\":1,\"19\":1,\"20\":1,\"24\":1,\"25\":1,\"26\":1,\"30\":1,\"32\":1,\"34\":1,\"38\":1,\"39\":2,\"40\":4,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"46\":1,\"48\":1,\"50\":1,\"55\":1,\"57\":1,\"58\":2,\"63\":1,\"67\":1,\"68\":4,\"69\":2,\"72\":2,\"73\":4,\"83\":1,\"84\":3,\"85\":1,\"98\":2,\"100\":1,\"106\":1,\"120\":1,\"137\":1,\"138\":1,\"140\":1,\"145\":4,\"146\":5,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"156\":3,\"158\":2,\"159\":2,\"162\":1,\"163\":1,\"166\":2,\"167\":2,\"171\":1,\"172\":3,\"174\":2,\"175\":2,\"176\":3,\"177\":1,\"178\":1,\"180\":3,\"186\":2,\"190\":7}}],[\"stable\",{\"1\":{\"119\":1}}],[\"stargazers\",{\"1\":{\"113\":1}}],[\"start\",{\"1\":{\"138\":1}}],[\"startup\",{\"1\":{\"7\":1,\"137\":1}}],[\"started\",{\"0\":{\"3\":1,\"118\":1}}],[\"state\",{\"1\":{\"120\":1}}],[\"statusexception\",{\"1\":{\"62\":1}}],[\"status\",{\"1\":{\"12\":1,\"17\":2,\"62\":1,\"91\":1,\"96\":2,\"145\":6}}],[\"static\",{\"1\":{\"7\":1,\"84\":1,\"85\":1}}],[\"standard\",{\"1\":{\"4\":1,\"61\":1,\"98\":1,\"115\":1,\"116\":1,\"161\":1}}],[\"soon\",{\"1\":{\"130\":1}}],[\"sort\",{\"1\":{\"76\":1}}],[\"sortedformcontentattribute\",{\"1\":{\"76\":1}}],[\"sorting\",{\"0\":{\"76\":1},\"1\":{\"76\":1}}],[\"so\",{\"1\":{\"76\":1,\"85\":1}}],[\"source\",{\"1\":{\"73\":1,\"77\":3}}],[\"sourcegenerator\",{\"1\":{\"5\":1,\"109\":1,\"110\":1,\"135\":1}}],[\"solution\",{\"1\":{\"70\":1}}],[\"solve\",{\"1\":{\"53\":1}}],[\"socket\",{\"1\":{\"62\":1}}],[\"socketexception\",{\"1\":{\"62\":2}}],[\"somepath\",{\"1\":{\"85\":1}}],[\"something=somevalue\",{\"1\":{\"186\":1}}],[\"something=\",{\"1\":{\"186\":1}}],[\"something\",{\"1\":{\"70\":1,\"186\":2,\"189\":2}}],[\"somevalue\",{\"1\":{\"68\":1,\"69\":1,\"186\":1}}],[\"some\",{\"0\":{\"2\":1},\"1\":{\"10\":1,\"53\":1,\"76\":1,\"80\":1,\"85\":1,\"142\":1,\"171\":1,\"184\":1}}],[\"s\",{\"1\":{\"5\":1,\"75\":1,\"83\":3,\"96\":3,\"98\":1,\"99\":2,\"102\":1,\"135\":1,\"165\":2,\"184\":1,\"187\":1,\"188\":1}}],[\"affect\",{\"1\":{\"188\":1}}],[\"after\",{\"1\":{\"10\":1,\"64\":1,\"77\":1,\"89\":1,\"95\":2,\"96\":1,\"186\":1}}],[\"above\",{\"1\":{\"187\":1}}],[\"about\",{\"1\":{\"144\":1,\"145\":1,\"146\":1,\"186\":3}}],[\"ability\",{\"1\":{\"88\":1}}],[\"abstraction\",{\"1\":{\"115\":1}}],[\"abstract\",{\"0\":{\"127\":1},\"1\":{\"62\":2,\"127\":1,\"185\":1}}],[\"absolute\",{\"0\":{\"72\":1},\"1\":{\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"37\":1}}],[\"authtokenfilter\",{\"1\":{\"190\":1}}],[\"author\",{\"1\":{\"134\":1}}],[\"authorization\",{\"1\":{\"95\":1,\"96\":1,\"190\":1}}],[\"authentication\",{\"1\":{\"80\":1,\"81\":1,\"190\":1}}],[\"autofacdependencyresolver\",{\"1\":{\"138\":1}}],[\"autofac\",{\"0\":{\"138\":1}}],[\"autorefreshcookiehandler\",{\"1\":{\"83\":2}}],[\"automatically\",{\"1\":{\"68\":1,\"140\":2,\"171\":1,\"177\":1}}],[\"aot\",{\"0\":{\"77\":1,\"132\":1},\"1\":{\"77\":1,\"116\":1,\"119\":2,\"130\":1,\"132\":2}}],[\"age=18\",{\"1\":{\"168\":1}}],[\"agent\",{\"1\":{\"107\":1}}],[\"age\",{\"1\":{\"63\":1,\"68\":2,\"69\":2,\"106\":1,\"168\":1}}],[\"again\",{\"1\":{\"47\":1}}],[\"avoided\",{\"1\":{\"95\":1}}],[\"avoid\",{\"1\":{\"61\":1}}],[\"avatar\",{\"1\":{\"6\":1}}],[\"advantage\",{\"1\":{\"140\":1}}],[\"advanced\",{\"0\":{\"60\":1}}],[\"admin\",{\"1\":{\"83\":1}}],[\"adapting\",{\"0\":{\"66\":1}}],[\"adjusting\",{\"0\":{\"65\":1}}],[\"addformfieldasync\",{\"1\":{\"180\":1}}],[\"adduserwithjsonasync\",{\"1\":{\"165\":1}}],[\"addurlquery\",{\"1\":{\"75\":1,\"95\":1,\"187\":1}}],[\"addpetasync\",{\"1\":{\"145\":1}}],[\"addpasswordcredentialstokenprovider<ibaidu>\",{\"1\":{\"97\":1}}],[\"addasync\",{\"1\":{\"106\":1,\"120\":2}}],[\"addtokenprovider\",{\"1\":{\"101\":1}}],[\"addtokenprovider<iuserapi\",{\"1\":{\"100\":1}}],[\"addtokenprovider<iuserapi>\",{\"1\":{\"99\":1}}],[\"addquery\",{\"1\":{\"96\":1}}],[\"addoauthtokenhandler\",{\"1\":{\"96\":2}}],[\"addclientcredentialstokenprovider<iuserapi>\",{\"1\":{\"93\":1}}],[\"addsingleton<iresponsecacheprovider\",{\"1\":{\"84\":1}}],[\"addhttpapi<imywebapi>\",{\"1\":{\"137\":1}}],[\"addhttpapi<iuserloginapi>\",{\"1\":{\"83\":1}}],[\"addhttpapi<iuserapi>\",{\"1\":{\"7\":3,\"59\":1,\"69\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"96\":2,\"103\":1}}],[\"addhttpmessagehandler\",{\"1\":{\"83\":1}}],[\"added\",{\"1\":{\"82\":1,\"142\":2,\"145\":2,\"188\":2}}],[\"add\",{\"1\":{\"76\":1,\"77\":2,\"80\":1,\"82\":1,\"95\":1,\"106\":1,\"107\":1,\"145\":1,\"187\":1,\"189\":1,\"190\":1}}],[\"addition\",{\"1\":{\"82\":1,\"83\":1,\"91\":1}}],[\"additionalmetadata\",{\"1\":{\"145\":2}}],[\"additional\",{\"1\":{\"75\":1,\"116\":1,\"187\":1}}],[\"adding\",{\"0\":{\"2\":1},\"1\":{\"65\":1,\"75\":1,\"189\":1,\"190\":1}}],[\"address\",{\"1\":{\"53\":1,\"79\":1,\"111\":1}}],[\"addwebapiclient\",{\"1\":{\"8\":1,\"65\":1,\"77\":1}}],[\"actually\",{\"1\":{\"125\":1}}],[\"actiondescriptor\",{\"1\":{\"65\":1}}],[\"action\",{\"0\":{\"18\":1}}],[\"acquisition\",{\"1\":{\"86\":1}}],[\"according\",{\"1\":{\"64\":1,\"128\":1}}],[\"account=\",{\"1\":{\"186\":1}}],[\"account=laojiu>\",{\"1\":{\"148\":1}}],[\"account=laojiu\",{\"1\":{\"120\":2,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"166\":3,\"168\":2,\"172\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"186\":1}}],[\"accounts\",{\"1\":{\"171\":1}}],[\"account\",{\"1\":{\"6\":2,\"24\":1,\"55\":1,\"58\":1,\"83\":2,\"120\":2,\"148\":1,\"149\":1,\"151\":1,\"152\":1,\"153\":1,\"155\":1,\"156\":1,\"159\":2,\"162\":1,\"170\":1,\"171\":4,\"172\":1,\"174\":1,\"175\":1,\"176\":1,\"186\":1}}],[\"access\",{\"1\":{\"63\":1,\"95\":1,\"96\":3}}],[\"accept\",{\"1\":{\"107\":1}}],[\"acceptquality\",{\"1\":{\"12\":1,\"13\":2}}],[\"acceptcontenttype\",{\"1\":{\"12\":3}}],[\"attempts\",{\"1\":{\"96\":1}}],[\"attributetargets\",{\"1\":{\"180\":1}}],[\"attributeusage\",{\"1\":{\"180\":1}}],[\"attribute\",{\"0\":{\"11\":1,\"12\":1,\"13\":1,\"95\":1,\"124\":1,\"149\":1,\"154\":1,\"156\":1,\"177\":1,\"178\":1},\"1\":{\"12\":4,\"13\":2,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"19\":1,\"30\":1,\"68\":1,\"70\":1,\"73\":1,\"90\":1,\"143\":2,\"149\":1,\"152\":1,\"172\":1,\"177\":2,\"180\":2}}],[\"attributes\",{\"0\":{\"10\":1,\"18\":1,\"29\":1,\"45\":1,\"47\":1,\"65\":1,\"104\":1,\"141\":1,\"142\":1,\"143\":1,\"179\":1},\"1\":{\"10\":2,\"12\":2,\"13\":2,\"45\":1,\"49\":1,\"53\":1,\"57\":1,\"59\":1,\"65\":3,\"82\":2,\"83\":1,\"123\":1,\"140\":1,\"142\":1,\"143\":3,\"145\":1,\"146\":1,\"154\":1,\"157\":1,\"179\":2}}],[\"at\",{\"1\":{\"13\":1,\"131\":1,\"140\":1,\"172\":1}}],[\"algorithm\",{\"1\":{\"76\":1}}],[\"alias\",{\"0\":{\"155\":1},\"1\":{\"156\":1}}],[\"aliasas\",{\"1\":{\"67\":1,\"155\":1,\"156\":1,\"180\":2}}],[\"aliasasattribute\",{\"1\":{\"67\":1}}],[\"aliases\",{\"0\":{\"67\":1}}],[\"always\",{\"1\":{\"62\":1,\"140\":1}}],[\"already\",{\"1\":{\"13\":1,\"98\":1}}],[\"also\",{\"1\":{\"10\":1,\"82\":1,\"96\":1,\"108\":1,\"116\":1,\"123\":1,\"129\":1,\"160\":1,\"188\":1}}],[\"allowmultiple\",{\"1\":{\"143\":2,\"180\":1}}],[\"allowing\",{\"1\":{\"80\":1}}],[\"allowed\",{\"1\":{\"67\":1}}],[\"allows\",{\"1\":{\"63\":1,\"108\":1}}],[\"all\",{\"1\":{\"8\":1,\"11\":2,\"19\":1,\"46\":1,\"61\":1,\"77\":1,\"119\":1,\"142\":1,\"149\":1,\"157\":1,\"188\":1}}],[\"await\",{\"1\":{\"9\":2,\"62\":1,\"63\":1,\"83\":1,\"120\":2,\"137\":1,\"138\":1,\"140\":1,\"148\":1,\"162\":1,\"163\":1,\"180\":1,\"182\":1,\"183\":1,\"184\":1,\"186\":1,\"190\":2}}],[\"argumentnullexception\",{\"1\":{\"190\":3}}],[\"args\",{\"1\":{\"7\":1}}],[\"array\",{\"1\":{\"64\":1,\"146\":2}}],[\"are\",{\"1\":{\"8\":1,\"13\":1,\"40\":1,\"53\":1,\"57\":1,\"58\":1,\"59\":1,\"61\":3,\"62\":1,\"64\":1,\"65\":1,\"68\":1,\"98\":1,\"115\":1,\"116\":1,\"125\":1,\"130\":1,\"131\":1,\"132\":1,\"142\":1,\"144\":1,\"154\":2}}],[\"as<imywebapi>\",{\"1\":{\"138\":1}}],[\"as<ihttpapifactory<imywebapi>>\",{\"1\":{\"138\":1}}],[\"asax\",{\"1\":{\"138\":1}}],[\"asked\",{\"0\":{\"121\":1}}],[\"ask\",{\"1\":{\"115\":1}}],[\"asp\",{\"0\":{\"137\":1,\"138\":1,\"163\":1},\"1\":{\"108\":1,\"140\":1}}],[\"aspnetcore\",{\"1\":{\"7\":1}}],[\"assembly\",{\"1\":{\"131\":2,\"132\":3,\"138\":1}}],[\"assuming\",{\"1\":{\"98\":1}}],[\"assigned\",{\"1\":{\"140\":1}}],[\"assign\",{\"1\":{\"68\":1}}],[\"asynchronous\",{\"1\":{\"63\":1}}],[\"async\",{\"1\":{\"9\":2,\"83\":1,\"137\":1,\"138\":1,\"163\":1,\"180\":1,\"184\":1,\"190\":2}}],[\"as\",{\"0\":{\"68\":1,\"125\":1,\"127\":1},\"1\":{\"8\":1,\"12\":1,\"13\":1,\"14\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"46\":1,\"48\":1,\"51\":1,\"54\":1,\"64\":1,\"67\":1,\"68\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"95\":2,\"96\":4,\"98\":1,\"99\":1,\"101\":1,\"111\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":1,\"128\":1,\"130\":2,\"131\":1,\"132\":1,\"140\":1,\"142\":2,\"151\":1,\"160\":1,\"161\":1,\"168\":2,\"170\":1,\"171\":1,\"172\":2,\"177\":2,\"180\":1,\"187\":1,\"188\":1}}],[\"annotation\",{\"1\":{\"154\":1}}],[\"annotations\",{\"0\":{\"154\":1,\"156\":1}}],[\"annotated\",{\"1\":{\"82\":1}}],[\"annotate\",{\"1\":{\"65\":1,\"165\":2,\"166\":2,\"167\":2}}],[\"another\",{\"0\":{\"123\":1},\"1\":{\"95\":1,\"96\":1,\"122\":1,\"123\":1}}],[\"any\",{\"1\":{\"49\":1,\"177\":1}}],[\"an\",{\"0\":{\"123\":1,\"125\":1,\"127\":1,\"128\":1},\"1\":{\"7\":1,\"12\":2,\"13\":1,\"37\":1,\"62\":3,\"64\":1,\"65\":1,\"75\":1,\"90\":1,\"95\":1,\"96\":1,\"125\":2,\"128\":1,\"142\":1,\"145\":2,\"185\":1,\"187\":1}}],[\"and\",{\"0\":{\"1\":1,\"7\":1,\"9\":1,\"83\":1,\"87\":1,\"141\":1,\"154\":1,\"157\":1,\"181\":1},\"1\":{\"4\":1,\"5\":2,\"10\":1,\"12\":2,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"32\":1,\"34\":1,\"37\":1,\"38\":1,\"46\":1,\"56\":1,\"58\":1,\"61\":1,\"64\":1,\"65\":1,\"68\":2,\"70\":1,\"73\":1,\"75\":2,\"81\":1,\"82\":1,\"83\":3,\"84\":1,\"86\":1,\"90\":1,\"91\":1,\"93\":1,\"95\":1,\"96\":2,\"97\":4,\"98\":1,\"101\":1,\"102\":1,\"104\":1,\"105\":1,\"108\":1,\"112\":2,\"115\":1,\"116\":2,\"119\":1,\"127\":1,\"129\":1,\"130\":2,\"131\":2,\"132\":3,\"135\":2,\"140\":6,\"142\":2,\"143\":2,\"149\":1,\"151\":1,\"154\":1,\"158\":1,\"159\":1,\"172\":1,\"177\":1,\"179\":2,\"180\":4,\"186\":2,\"187\":2,\"188\":3}}],[\"approach\",{\"1\":{\"184\":1}}],[\"appjsonserializercontext\",{\"1\":{\"77\":2}}],[\"append\",{\"1\":{\"96\":1}}],[\"appending\",{\"0\":{\"75\":1}}],[\"appear\",{\"1\":{\"96\":1}}],[\"appears\",{\"1\":{\"70\":1}}],[\"applies\",{\"1\":{\"19\":1,\"48\":1,\"65\":1,\"90\":1}}],[\"applied\",{\"1\":{\"11\":4,\"37\":1,\"82\":1,\"142\":4}}],[\"application\",{\"1\":{\"6\":2,\"10\":1,\"69\":1,\"70\":2,\"83\":1,\"86\":1,\"107\":3,\"138\":1,\"151\":2,\"152\":2,\"161\":1}}],[\"applyto\",{\"1\":{\"163\":1}}],[\"applying\",{\"0\":{\"94\":1},\"1\":{\"90\":1,\"96\":1}}],[\"apply\",{\"1\":{\"10\":1,\"83\":1,\"96\":1,\"187\":1}}],[\"app\",{\"1\":{\"7\":1}}],[\"apiparameterdescriptor\",{\"1\":{\"180\":1}}],[\"apiparametercontext\",{\"1\":{\"76\":1,\"83\":1,\"85\":1}}],[\"apiactionfilterattribute\",{\"1\":{\"185\":1,\"187\":1}}],[\"apiactioncontext\",{\"1\":{\"180\":1,\"187\":1,\"189\":2}}],[\"apiaction\",{\"1\":{\"83\":1}}],[\"apifilterattribute\",{\"1\":{\"65\":1,\"75\":2}}],[\"apiinvalidconfigexception\",{\"1\":{\"62\":1}}],[\"apiexception\",{\"1\":{\"62\":4}}],[\"apiresponsecontext\",{\"1\":{\"82\":1,\"83\":2}}],[\"apiresponsestatusexception\",{\"1\":{\"12\":1,\"62\":1}}],[\"apirequestcontext\",{\"1\":{\"65\":1,\"73\":1,\"75\":1,\"82\":1,\"95\":1}}],[\"apireturnnotsupportedexception\",{\"1\":{\"12\":1}}],[\"api\",{\"0\":{\"144\":1},\"1\":{\"6\":5,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"39\":1,\"40\":2,\"46\":2,\"48\":1,\"50\":1,\"51\":1,\"52\":3,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"62\":3,\"63\":1,\"65\":2,\"67\":2,\"73\":2,\"83\":1,\"93\":1,\"97\":3,\"115\":1,\"120\":7,\"123\":1,\"145\":3,\"148\":2,\"162\":2}}],[\"a\",{\"0\":{\"124\":1,\"126\":1,\"175\":1,\"176\":1},\"1\":{\"4\":1,\"13\":1,\"19\":1,\"37\":1,\"51\":2,\"54\":2,\"55\":1,\"61\":17,\"62\":1,\"63\":1,\"64\":1,\"67\":2,\"68\":1,\"69\":1,\"70\":2,\"73\":1,\"75\":1,\"76\":1,\"81\":1,\"84\":1,\"89\":1,\"91\":2,\"95\":2,\"96\":5,\"97\":1,\"99\":1,\"101\":1,\"112\":2,\"115\":1,\"122\":2,\"124\":1,\"125\":2,\"129\":1,\"131\":2,\"132\":4,\"140\":2,\"142\":2,\"145\":3,\"153\":2,\"156\":1,\"158\":3,\"159\":1,\"161\":2,\"168\":2,\"172\":1,\"177\":1,\"180\":2,\"185\":1,\"186\":4,\"187\":1,\"188\":1,\"190\":1}}],[\"t\",{\"1\":{\"140\":2}}],[\"ticks\",{\"1\":{\"187\":1}}],[\"tinterface\",{\"1\":{\"131\":4}}],[\"timespan\",{\"1\":{\"78\":1,\"84\":1,\"140\":1,\"183\":1,\"184\":1,\"186\":1}}],[\"timeout\",{\"1\":{\"26\":3,\"38\":4,\"78\":1,\"140\":1,\"186\":2}}],[\"timeoutattribute\",{\"0\":{\"26\":1,\"38\":1}}],[\"time\",{\"1\":{\"13\":1,\"75\":1,\"113\":1,\"140\":1,\"187\":1}}],[\"testing\",{\"1\":{\"146\":1}}],[\"technology\",{\"1\":{\"131\":1}}],[\"template\",{\"1\":{\"112\":1}}],[\"text<\",{\"1\":{\"146\":1}}],[\"textual\",{\"1\":{\"112\":1}}],[\"text\",{\"0\":{\"68\":1},\"1\":{\"15\":1,\"41\":3,\"52\":1,\"68\":1,\"70\":2,\"77\":1,\"151\":1,\"152\":1,\"165\":2,\"180\":1}}],[\"two\",{\"1\":{\"98\":1,\"114\":1}}],[\"tp\",{\"1\":{\"96\":2}}],[\"tsv\",{\"1\":{\"64\":2}}],[\"typed\",{\"0\":{\"150\":1,\"151\":1,\"152\":1},\"1\":{\"83\":1,\"165\":2,\"166\":1,\"167\":1}}],[\"typeof\",{\"1\":{\"77\":2}}],[\"types\",{\"0\":{\"85\":1,\"127\":1,\"168\":1},\"1\":{\"13\":1,\"14\":1,\"30\":1,\"49\":1,\"53\":2,\"65\":1,\"77\":1,\"82\":1,\"127\":1,\"128\":1}}],[\"type\",{\"0\":{\"50\":1,\"51\":1,\"54\":1,\"55\":1,\"70\":1,\"125\":1,\"127\":1,\"128\":1},\"1\":{\"12\":2,\"13\":1,\"14\":1,\"17\":2,\"50\":1,\"54\":1,\"62\":2,\"68\":1,\"70\":3,\"82\":1,\"83\":1,\"88\":1,\"107\":1,\"125\":1,\"126\":1,\"132\":3,\"151\":3,\"152\":3,\"161\":1,\"166\":1,\"167\":2,\"180\":1}}],[\"tag>\",{\"1\":{\"170\":1}}],[\"tags\",{\"1\":{\"145\":3}}],[\"target\",{\"1\":{\"83\":1,\"186\":2}}],[\"take\",{\"1\":{\"82\":1,\"143\":1}}],[\"takes\",{\"1\":{\"12\":2,\"30\":1,\"143\":1}}],[\"tab\",{\"1\":{\"64\":1}}],[\"tasks\",{\"1\":{\"145\":1,\"146\":1}}],[\"task<string>\",{\"1\":{\"186\":1}}],[\"task<specialresultclass>\",{\"1\":{\"13\":1}}],[\"task<actionresult>\",{\"1\":{\"138\":1}}],[\"task<tokenresult>\",{\"1\":{\"98\":1,\"100\":2,\"190\":2}}],[\"task<responsecacheresult>\",{\"1\":{\"84\":1}}],[\"task<userinfo>\",{\"1\":{\"24\":1,\"55\":1,\"137\":1,\"162\":1,\"163\":1}}],[\"task<user>\",{\"1\":{\"6\":5,\"19\":2,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":2,\"46\":2,\"48\":1,\"50\":1,\"51\":1,\"54\":1,\"57\":1,\"58\":1,\"65\":1,\"73\":2}}],[\"task<int>\",{\"1\":{\"17\":1}}],[\"task<xmlresultclass>\",{\"1\":{\"16\":1}}],[\"task<jsonresultclass>\",{\"1\":{\"15\":1}}],[\"task<httpresponsemessage>\",{\"1\":{\"11\":1,\"14\":1,\"83\":1,\"85\":1,\"125\":1}}],[\"task\",{\"1\":{\"9\":2,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"52\":3,\"68\":1,\"73\":1,\"75\":2,\"82\":2,\"83\":5,\"84\":1,\"85\":1,\"96\":1,\"97\":2,\"104\":1,\"129\":1,\"180\":1,\"184\":1,\"187\":1,\"189\":4}}],[\"treated\",{\"1\":{\"123\":1,\"177\":1}}],[\"triggers\",{\"1\":{\"89\":1}}],[\"try\",{\"0\":{\"182\":1},\"1\":{\"62\":1,\"182\":1,\"183\":1}}],[\"tracing\",{\"1\":{\"186\":1}}],[\"tracefilterattribute\",{\"0\":{\"186\":1}}],[\"tracefilter\",{\"1\":{\"145\":2,\"146\":1,\"186\":2,\"188\":1}}],[\"tracked\",{\"1\":{\"140\":1}}],[\"transmission\",{\"1\":{\"85\":2}}],[\"transient\",{\"1\":{\"9\":1}}],[\"trailing\",{\"1\":{\"61\":3}}],[\"true\",{\"1\":{\"12\":3,\"13\":9,\"79\":1,\"140\":1,\"143\":1}}],[\"threading\",{\"1\":{\"145\":2,\"146\":2}}],[\"through\",{\"1\":{\"88\":1,\"105\":1}}],[\"throw\",{\"1\":{\"82\":2,\"84\":2,\"125\":1,\"190\":3}}],[\"thrown\",{\"1\":{\"62\":1,\"158\":1}}],[\"throws\",{\"1\":{\"12\":2}}],[\"those\",{\"1\":{\"123\":1}}],[\"thank\",{\"1\":{\"134\":1}}],[\"thanks\",{\"0\":{\"1\":1,\"2\":1}}],[\"than\",{\"1\":{\"38\":1,\"143\":1,\"185\":1,\"188\":1}}],[\"that\",{\"1\":{\"10\":1,\"17\":1,\"49\":1,\"53\":2,\"62\":1,\"65\":1,\"70\":1,\"73\":1,\"91\":1,\"95\":1,\"98\":1,\"122\":1,\"123\":1,\"127\":1,\"131\":1,\"135\":1,\"140\":1,\"142\":3,\"145\":4,\"146\":3,\"149\":1,\"159\":1,\"160\":1,\"161\":1,\"177\":1,\"190\":1}}],[\"this\",{\"1\":{\"9\":4,\"11\":2,\"46\":1,\"47\":1,\"57\":1,\"67\":1,\"69\":1,\"70\":1,\"73\":3,\"78\":1,\"83\":2,\"84\":1,\"85\":2,\"98\":1,\"100\":1,\"105\":2,\"108\":1,\"111\":1,\"123\":1,\"125\":1,\"132\":1,\"138\":1,\"140\":1,\"142\":3,\"144\":1,\"180\":1,\"186\":2,\"190\":9}}],[\"they\",{\"1\":{\"61\":1,\"116\":1,\"142\":1,\"179\":1,\"188\":1}}],[\"these\",{\"1\":{\"57\":1,\"132\":1,\"154\":1,\"157\":1}}],[\"them\",{\"1\":{\"10\":1,\"80\":1,\"85\":1,\"116\":1,\"188\":1}}],[\"then\",{\"1\":{\"10\":1,\"75\":1,\"90\":1}}],[\"therefore\",{\"1\":{\"65\":1,\"123\":1}}],[\"there\",{\"1\":{\"8\":1,\"98\":1,\"128\":1,\"130\":1,\"159\":1}}],[\"their\",{\"0\":{\"1\":1},\"1\":{\"47\":1,\"61\":1,\"98\":1}}],[\"the\",{\"0\":{\"1\":2,\"2\":1,\"93\":1,\"94\":1,\"95\":1,\"122\":1,\"124\":2,\"125\":1,\"127\":1,\"128\":1,\"149\":1,\"177\":1,\"178\":1},\"1\":{\"4\":1,\"8\":2,\"9\":3,\"10\":2,\"11\":2,\"12\":19,\"13\":7,\"14\":2,\"15\":1,\"16\":1,\"17\":5,\"19\":5,\"30\":4,\"31\":2,\"32\":1,\"33\":2,\"34\":1,\"35\":2,\"36\":2,\"37\":3,\"38\":4,\"39\":2,\"40\":3,\"44\":1,\"45\":2,\"46\":2,\"47\":6,\"48\":3,\"54\":1,\"57\":1,\"58\":2,\"59\":2,\"61\":4,\"62\":6,\"63\":4,\"64\":3,\"65\":7,\"67\":4,\"68\":7,\"69\":5,\"70\":11,\"73\":3,\"75\":3,\"76\":1,\"77\":3,\"81\":5,\"82\":3,\"83\":3,\"84\":4,\"85\":7,\"86\":1,\"88\":3,\"89\":3,\"90\":6,\"91\":3,\"93\":2,\"95\":15,\"96\":27,\"97\":7,\"98\":4,\"99\":6,\"100\":1,\"101\":7,\"102\":1,\"104\":1,\"105\":3,\"108\":1,\"110\":4,\"111\":4,\"112\":7,\"115\":1,\"117\":1,\"122\":6,\"123\":5,\"124\":3,\"125\":5,\"126\":2,\"128\":4,\"130\":3,\"131\":5,\"132\":11,\"134\":2,\"140\":13,\"142\":8,\"143\":2,\"144\":3,\"145\":6,\"146\":1,\"149\":5,\"151\":4,\"152\":6,\"154\":2,\"157\":1,\"158\":1,\"159\":2,\"160\":4,\"161\":5,\"163\":2,\"168\":1,\"170\":3,\"171\":7,\"172\":4,\"177\":1,\"179\":1,\"180\":8,\"184\":1,\"185\":1,\"186\":4,\"188\":2,\"190\":10}}],[\"tostring\",{\"1\":{\"187\":1}}],[\"toobservable\",{\"1\":{\"184\":1}}],[\"too\",{\"1\":{\"180\":1}}],[\"tools\",{\"1\":{\"140\":1,\"144\":1}}],[\"tool\",{\"0\":{\"112\":1},\"1\":{\"5\":1,\"108\":1,\"109\":1,\"135\":1,\"144\":1}}],[\"touri\",{\"1\":{\"96\":1}}],[\"toarray\",{\"1\":{\"85\":1}}],[\"tobase64string\",{\"1\":{\"85\":1}}],[\"tokenclient\",{\"1\":{\"190\":8}}],[\"tokenendpoint\",{\"1\":{\"190\":9}}],[\"tokenfilter\",{\"1\":{\"190\":5}}],[\"tokenresult\",{\"1\":{\"95\":3,\"96\":5}}],[\"tokenprovider\",{\"0\":{\"93\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1},\"1\":{\"93\":1,\"96\":3,\"97\":2,\"98\":1,\"99\":3,\"100\":1,\"101\":2}}],[\"tokens\",{\"1\":{\"89\":1,\"90\":1,\"93\":1,\"96\":1,\"97\":1}}],[\"token\",{\"0\":{\"86\":1,\"94\":1,\"153\":1},\"1\":{\"5\":1,\"6\":5,\"50\":1,\"86\":1,\"89\":3,\"90\":2,\"91\":2,\"95\":6,\"96\":11,\"97\":1,\"98\":3,\"99\":1,\"100\":1,\"106\":1,\"135\":1,\"153\":1,\"190\":11}}],[\"to\",{\"0\":{\"1\":1,\"2\":1,\"66\":1,\"122\":1,\"125\":1,\"150\":1,\"151\":1,\"152\":1},\"1\":{\"4\":1,\"5\":1,\"10\":4,\"11\":4,\"12\":1,\"13\":2,\"17\":1,\"19\":1,\"37\":1,\"44\":1,\"46\":1,\"49\":1,\"51\":1,\"54\":2,\"56\":1,\"57\":1,\"61\":2,\"62\":1,\"63\":3,\"64\":1,\"65\":2,\"67\":1,\"68\":3,\"69\":3,\"70\":7,\"73\":1,\"75\":3,\"77\":2,\"80\":2,\"81\":1,\"82\":3,\"83\":2,\"84\":4,\"85\":6,\"86\":1,\"88\":1,\"89\":1,\"90\":2,\"91\":3,\"95\":6,\"96\":7,\"97\":2,\"98\":1,\"101\":1,\"102\":1,\"108\":1,\"110\":2,\"112\":4,\"115\":1,\"116\":1,\"122\":1,\"123\":3,\"124\":1,\"128\":2,\"129\":1,\"130\":1,\"132\":3,\"140\":2,\"142\":4,\"143\":2,\"144\":1,\"145\":14,\"146\":3,\"149\":1,\"152\":2,\"154\":1,\"159\":1,\"160\":1,\"161\":2,\"165\":2,\"166\":2,\"167\":2,\"180\":2,\"184\":4,\"185\":1,\"186\":3,\"187\":4,\"188\":3,\"189\":1,\"190\":1}}]],\"serializationVersion\":2},\"/\":{\"documentCount\":213,\"nextId\":213,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"2#webapiclientcore-benchmarks\",\"4\":\"3\",\"5\":\"3#依赖环境\",\"6\":\"3#从-nuget-安装\",\"7\":\"3#声明接口\",\"8\":\"3#注册和配置接口\",\"9\":\"3#全局配置接口\",\"10\":\"3#注入和调用接口\",\"11\":\"4\",\"12\":\"4#各特性的位置\",\"13\":\"4#return-特性\",\"14\":\"4#缺省的return特性\",\"15\":\"4#rawreturnattribute\",\"16\":\"4#jsonreturnattribute\",\"17\":\"4#xmlreturnattribute\",\"18\":\"4#nonereturnattribute\",\"19\":\"4#action-特性\",\"20\":\"4#httphostattribute\",\"21\":\"4#httpgetattribute\",\"22\":\"4#httppostattribute\",\"23\":\"4#httpputattribute\",\"24\":\"4#httpdeleteattribute\",\"25\":\"4#httppatchattribute\",\"26\":\"4#headerattribute\",\"27\":\"4#timeoutattribute\",\"28\":\"4#formfieldattribute\",\"29\":\"4#formdatatextattribute\",\"30\":\"4#parameter-特性\",\"31\":\"4#pathqueryattribute\",\"32\":\"4#formcontentattribute\",\"33\":\"4#formfieldattribute-1\",\"34\":\"4#formdatacontentattribute\",\"35\":\"4#formdatatextattribute-1\",\"36\":\"4#jsoncontentattribute\",\"37\":\"4#xmlcontentattribute\",\"38\":\"4#uriattribute\",\"39\":\"4#timeoutattribute-1\",\"40\":\"4#headerattribute-1\",\"41\":\"4#headersattribute\",\"42\":\"4#rawstringcontentattribute\",\"43\":\"4#rawjsoncontentattribute\",\"44\":\"4#rawxmlcontentattribute\",\"45\":\"4#rawformcontentattribute\",\"46\":\"4#filter-特性\",\"47\":\"4#loggingfilterattribute\",\"48\":\"4#cache-特性\",\"49\":\"4#cacheattribute\",\"50\":\"5\",\"51\":\"5#cancellationtoken-类型\",\"52\":\"5#fileinfo-类型\",\"53\":\"5#httpcontent-的子类型\",\"54\":\"5#iapiparameter-的子类型\",\"55\":\"5#formdatafile-类型\",\"56\":\"5#jsonpatchdocument-类型\",\"57\":\"6\",\"58\":\"6#参数值验证\",\"59\":\"6#请求或响应模型验证\",\"60\":\"6#关闭数据验证功能\",\"61\":\"7\",\"62\":\"7#uri-拼接规则\",\"63\":\"7#请求异常处理\",\"64\":\"7#请求条件性重试\",\"65\":\"7#表单集合处理\",\"66\":\"7#调整缺省参数特性\",\"67\":\"7#适配畸形接口\",\"68\":\"7#不友好的参数名别名\",\"69\":\"7#form-的某个字段为-json-文本\",\"70\":\"7#form-的字段多层嵌套\",\"71\":\"7#响应的-content-type-不是预期值\",\"72\":\"7#动态-httphost\",\"73\":\"7#使用-uriattribute-传绝对-uri-参\",\"74\":\"7#自定义-httphostbaseattribute-实现\",\"75\":\"7#请求签名\",\"76\":\"7#动态追加请求签名\",\"77\":\"7#请求表单的字段排序\",\"78\":\"7#net8-aot-发布\",\"79\":\"7#httpclient-的配置\",\"80\":\"7#主-httpmessagehandler-的配置\",\"81\":\"7#http-代理配置\",\"82\":\"7#客户端证书配置\",\"83\":\"7#维持-cookiecontainer-不变\",\"84\":\"7#在接口配置中使用过滤器\",\"85\":\"7#自定义请求内容与响应内容解析\",\"86\":\"7#自定义-cookieauthorizationhandler\",\"87\":\"7#自定义日志输出目标\",\"88\":\"7#自定义缓存提供者\",\"89\":\"7#自定义自解释的参数类型\",\"90\":\"8\",\"91\":\"8#对象与概念\",\"92\":\"8#itokenproviderfactory\",\"93\":\"8#itokenprovider\",\"94\":\"8#oauthtokenattribute\",\"95\":\"8#oauthtokenhandler\",\"96\":\"8#oauth-的-client-模式\",\"97\":\"8#为接口注册-tokenprovider\",\"98\":\"8#token-的应用\",\"99\":\"8#使用-oauthtoken-特性\",\"100\":\"8#使用-oauthtokenhandler\",\"101\":\"8#多接口共享的-tokenprovider\",\"102\":\"8#自定义-tokenprovider\",\"103\":\"8#委托-tokenprovider\",\"104\":\"8#完整实现的-tokenprovider\",\"105\":\"8#自定义-tokenprovider-的选项\",\"106\":\"9\",\"107\":\"9#配置-可选\",\"108\":\"9#声明特性\",\"109\":\"10\",\"110\":\"10#jsonrpc-声明\",\"111\":\"10#jsonrpc-数据包\",\"112\":\"11\",\"113\":\"11#安装工具\",\"114\":\"11#使用工具\",\"115\":\"11#命令介绍\",\"116\":\"11#工具原理\",\"117\":\"12\",\"118\":\"12#简介\",\"119\":\"12#webapiclientcore\",\"120\":\"12#webapiclient-不再更新\",\"121\":\"12#服务渠道\",\"122\":\"14\",\"123\":\"14#nuget包\",\"124\":\"14#http请求\",\"125\":\"15\",\"126\":\"15#声明的http接口为什么要继承ihttpapi接口\",\"127\":\"15#http接口可以继承其它http接口吗\",\"128\":\"15#使用-proxyattribute-host-port-代理特性前-怎么验证代理的有效性\",\"129\":\"15#为什么不支持将接口方法的返回类型声明为task对象而必须为task-或itask\",\"130\":\"15#使用webapiclient怎么下载文件\",\"131\":\"15#接口返回类型除了声明为itask-httpresponsemessage-还可以声明哪些抽象的返回类型\",\"132\":\"15#接口声明的参数可以为object或某些类型的基类吗\",\"133\":\"15#webapiclient怎么使用同步请求\",\"134\":\"16\",\"135\":\"16#webapiclient-jit\",\"136\":\"16#webapiclient-aot\",\"137\":\"17\",\"138\":\"17#感谢以下贡献者添砖加瓦-完善项目\",\"139\":\"17#感谢以下贡献者锦上添花-贡献文档\",\"140\":\"18\",\"141\":\"18#如果您觉得webapiclient对你有所帮助-就请支持一下我们吧\",\"142\":\"19\",\"143\":\"20\",\"144\":\"21\",\"145\":\"22\",\"146\":\"23\",\"147\":\"24\",\"148\":\"40\",\"149\":\"40#asp-net-core-2-1\",\"150\":\"40#asp-net-mvc-autofac\",\"151\":\"41\",\"152\":\"41#使用httpapi-register-resolve\",\"153\":\"42\",\"154\":\"42#特性的范围\",\"155\":\"42#特性的优先级\",\"156\":\"43\",\"157\":\"43#ipetapi\",\"158\":\"43#iuserapi\",\"159\":\"44\",\"160\":\"44#get请求简单例子\",\"161\":\"44#使用-httphost-特性\",\"162\":\"44#响应的json-xml内容转换为强类型模型\",\"163\":\"44#隐式转换为强类型模型\",\"164\":\"44#显式转换为强类型模型\",\"165\":\"44#请求取消令牌参数cancellationtoken\",\"166\":\"45\",\"167\":\"45#参数别名\",\"168\":\"45#参数模型属性注解\",\"169\":\"46\",\"170\":\"46#参数值的验证\",\"171\":\"46#参数的属性值验证\",\"172\":\"46#两者同时验证\",\"173\":\"47\",\"174\":\"47#webapiclient例子\",\"175\":\"47#asp-net-服务端例子\",\"176\":\"48\",\"177\":\"48#使用json或xml提交\",\"178\":\"48#使用x-www-form-urlencoded提交\",\"179\":\"48#使用multipart-form-data提交\",\"180\":\"48#使用具体的httpcontent类型提交\",\"181\":\"49\",\"182\":\"49#uri的格式\",\"183\":\"49#动态path\",\"184\":\"49#动态uri\",\"185\":\"49#query参数\",\"186\":\"49#多个query参数平铺\",\"187\":\"49#多个query参数合并到模型\",\"188\":\"49#多个query参数平铺-部分合并到模型\",\"189\":\"49#显式声明-pathquery-特性\",\"190\":\"49#使用-parameter-kind-query-特性\",\"191\":\"50\",\"192\":\"50#_3-1-自定义iapiparameterattribute\",\"193\":\"51\",\"194\":\"51#_4-1-try-catch异常处理\",\"195\":\"51#_4-2-retry重试策略\",\"196\":\"51#_4-3-rx扩展\",\"197\":\"52\",\"198\":\"52#_1-1-tracefilterattribute\",\"199\":\"52#_1-2-自定义过滤器\",\"200\":\"53\",\"201\":\"53#_2-1-自定义全局过滤器\",\"202\":\"53#_2-2-自定义oauth2全局过滤器\",\"203\":\"68\",\"204\":\"69\",\"205\":\"70\",\"206\":\"71\",\"207\":\"72\",\"208\":\"73\",\"209\":\"74\",\"210\":\"75\",\"211\":\"76\",\"212\":\"77\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,12],\"2\":[1],\"3\":[2],\"4\":[1],\"5\":[1,7],\"6\":[3,26],\"7\":[1,52],\"8\":[1,68],\"9\":[1,19],\"10\":[1,29],\"11\":[1,16],\"12\":[1,16],\"13\":[2,39],\"14\":[1,35],\"15\":[1,8],\"16\":[1,8],\"17\":[1,8],\"18\":[1,16],\"19\":[2],\"20\":[1,21],\"21\":[1,15],\"22\":[1,16],\"23\":[1,16],\"24\":[1,16],\"25\":[1,25],\"26\":[1,17],\"27\":[1,16],\"28\":[1,23],\"29\":[1,22],\"30\":[2],\"31\":[1,21],\"32\":[1,18],\"33\":[1,21],\"34\":[1,20],\"35\":[1,23],\"36\":[1,15],\"37\":[1,15],\"38\":[1,13],\"39\":[1,19],\"40\":[1,14],\"41\":[1,22],\"42\":[1,12],\"43\":[1,12],\"44\":[1,12],\"45\":[1,16],\"46\":[2,3],\"47\":[1,24],\"48\":[2,9],\"49\":[1,20],\"50\":[1,2],\"51\":[2,18],\"52\":[2,20],\"53\":[2,16],\"54\":[2,8],\"55\":[2,23],\"56\":[2,27],\"57\":[1,4],\"58\":[1,14],\"59\":[1,26],\"60\":[1,20],\"61\":[1],\"62\":[2,34],\"63\":[1,40],\"64\":[1,38],\"65\":[1,37],\"66\":[1,44],\"67\":[1],\"68\":[1,25],\"69\":[4,40],\"70\":[2,48],\"71\":[4,38],\"72\":[2],\"73\":[5,13],\"74\":[3,51],\"75\":[1],\"76\":[1,46],\"77\":[1,31],\"78\":[4,31],\"79\":[2,22],\"80\":[3],\"81\":[2,28],\"82\":[1,26],\"83\":[3,31],\"84\":[1,30],\"85\":[1,85],\"86\":[2,81],\"87\":[1,19],\"88\":[1,37],\"89\":[1,75],\"90\":[3,10],\"91\":[1],\"92\":[1,6],\"93\":[1,6],\"94\":[1,11],\"95\":[1,15],\"96\":[4],\"97\":[2,21],\"98\":[2],\"99\":[3,52],\"100\":[2,97],\"101\":[2,48],\"102\":[2,30],\"103\":[2,18],\"104\":[2,25],\"105\":[3,21],\"106\":[3,13],\"107\":[3,10],\"108\":[1,21],\"109\":[2,18],\"110\":[2,22],\"111\":[2,29],\"112\":[3,12],\"113\":[1,7],\"114\":[1,16],\"115\":[1,15],\"116\":[1,21],\"117\":[1,3],\"118\":[1,2],\"119\":[1,17],\"120\":[3,19],\"121\":[1,11],\"122\":[1],\"123\":[1,11],\"124\":[1,55],\"125\":[1],\"126\":[2,5],\"127\":[2,8],\"128\":[4,2],\"129\":[4,6],\"130\":[2,2],\"131\":[3,5],\"132\":[2,6],\"133\":[1,6],\"134\":[1,10],\"135\":[2,17],\"136\":[2,16],\"137\":[4],\"138\":[2],\"139\":[2],\"140\":[1],\"141\":[2,2],\"142\":[1,26],\"143\":[1,65],\"144\":[1,64],\"145\":[1,61],\"146\":[1,75],\"147\":[1,69],\"148\":[1],\"149\":[5,41],\"150\":[5,65],\"151\":[1],\"152\":[3,87],\"153\":[1],\"154\":[1,13],\"155\":[1,7],\"156\":[1,9],\"157\":[1,135],\"158\":[1,109],\"159\":[2],\"160\":[1,27],\"161\":[2,21],\"162\":[2],\"163\":[1,29],\"164\":[1,30],\"165\":[1,24],\"166\":[1,4],\"167\":[1,21],\"168\":[1,30],\"169\":[1,6],\"170\":[1,14],\"171\":[1,27],\"172\":[1,13],\"173\":[1,12],\"174\":[1,30],\"175\":[3,19],\"176\":[3],\"177\":[1,25],\"178\":[4,24],\"179\":[3,22],\"180\":[1,22],\"181\":[1],\"182\":[1,21],\"183\":[1,27],\"184\":[1,19],\"185\":[1],\"186\":[1,12],\"187\":[1,18],\"188\":[1,20],\"189\":[2,21],\"190\":[2,17],\"191\":[2,9],\"192\":[3,63],\"193\":[2],\"194\":[4,15],\"195\":[3,23],\"196\":[3,23],\"197\":[2,4],\"198\":[2,71],\"199\":[3,28],\"200\":[2,10],\"201\":[3,26],\"202\":[2,70],\"203\":[1,3],\"204\":[1],\"205\":[1],\"206\":[1],\"207\":[1],\"208\":[1],\"209\":[1],\"210\":[1],\"211\":[1],\"212\":[1]},\"averageFieldLength\":[1.6056338028169015,24.688153546977556],\"storedFields\":{\"0\":{\"h\":\"\"},\"1\":{\"h\":\"项目主页\",\"t\":[\"这是项目主页的案例。你可以在这里放置你的主体内容。\",\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\",\"配置项的相关说明详见 项目主页配置。\"]},\"2\":{\"h\":\"\"},\"3\":{\"h\":\"WebApiClientCore.Benchmarks\"},\"4\":{\"h\":\"快速上手\"},\"5\":{\"h\":\"依赖环境\",\"t\":[\"WebApiclientCore要求项目的.NET版本支持.NET Standard2.1，并且具备依赖注入的环境。\"]},\"6\":{\"h\":\"从 Nuget 安装\",\"t\":[\"包名\",\"Nuget\",\"描述\",\"WebApiClientCore\",\"基础包\",\"WebApiClientCore.Extensions.OAuths\",\"OAuth2 与 token 管理扩展包\",\"WebApiClientCore.Extensions.NewtonsoftJson\",\"Newtonsoft 的 Json.NET 扩展包\",\"WebApiClientCore.Extensions.JsonRpc\",\"JsonRpc 调用扩展包\",\"WebApiClientCore.OpenApi.SourceGenerator\",\"将本地或远程 OpenApi 文档解析生成 WebApiClientCore 接口代码的 dotnet tool\"]},\"7\":{\"h\":\"声明接口\",\"t\":[\"[LoggingFilter] [HttpHost(\\\"http://localhost:5000/\\\")] public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, CancellationToken token = default); // POST application/json content [HttpPost(\\\"api/users\\\")] Task<User> PostJsonAsync([JsonContent] User user, CancellationToken token = default); // POST application/xml content [HttpPost(\\\"api/users\\\")] Task<User> PostXmlAsync([XmlContent] User user, CancellationToken token = default); // POST x-www-form-urlencoded content [HttpPost(\\\"api/users\\\")] Task<User> PostFormAsync([FormContent] User user, CancellationToken token = default); // POST multipart/form-data content [HttpPost(\\\"api/users\\\")] Task<User> PostFormDataAsync([FormDataContent] User user, FormDataFile avatar, CancellationToken token = default); } public class User { [JsonPropertyName(\\\"account\\\")] public string Account { get; set; } = string.Empty; public string Password { get; set; } = string.Empty; }\"]},\"8\":{\"h\":\"注册和配置接口\",\"t\":[\"AspNetCore Startup\",\"public void ConfigureServices(IServiceCollection services) { services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.UseLogging = Environment.IsDevelopment(); o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); // o.JsonSerializeOptions -> json 序列化选项 // o.JsonDeserializeOptions -> json 反序列化选项 // o.KeyValueSerializeOptions -> 键值对序列化选项 // o.XmlSerializeOptions -> xml 序列化选项 // o.XmlDeserializeOptions -> xml 反序列化选项 // o.GlobalFilters -> 全局过滤器集合 }); }\",\"Console\",\"public static void Main(string[] args) { // 无依赖注入的环境需要自行创建 var services = new ServiceCollection(); services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.UseLogging = Environment.IsDevelopment(); o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }); }\",\"Prism.Unity\",\"<PackageReference Include=\\\"Unity.Microsoft.DependencyInjection\\\" Version=\\\"5.11.5\\\" />\",\"public partial class App { protected override IContainerExtension CreateContainerExtension() { var services = new ServiceCollection(); services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.UseLogging = Environment.IsDevelopment(); o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }); var container = new Unity.UnityContainer(); Unity.Microsoft.DependencyInjection.ServiceProviderExtensions.BuildServiceProvider(services, container); return new Prism.Unity.UnityContainerExtension(container); } protected override void RegisterTypes(IContainerRegistry containerRegistry) { } }\"]},\"9\":{\"h\":\"全局配置接口\",\"t\":[\"全局配置可以做为所有接口的默认初始配置，当项目中有很多接口时就很有用。\",\"public void ConfigureServices(IServiceCollection services) { services.AddWebApiClient().ConfigureHttpApi(o => { o.JsonSerializeOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase; o.JsonDeserializeOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase; o.KeyValueSerializeOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase; }); }\"]},\"10\":{\"h\":\"注入和调用接口\",\"t\":[\"在Scoped或Transient服务中注入\",\"public class YourService { private readonly IUserApi userApi; public YourService(IUserApi userApi) { this.userApi = userApi; } public async Task GetAsync() { // 调用接口 var user = await this.userApi.GetAsync(id:\\\"id001\\\"); ... } }\",\"在Singleton服务中注入\",\"public class YourService { private readonly IServiceScopeFactory serviceScopeFactory; public YourService(IServiceScopeFactory serviceScopeFactory) { this.serviceScopeFactory = serviceScopeFactory; } public async Task GetAsync() { // 从创建的scope中获取接口实例 using var scope = this.serviceScopeFactory.CreateScope(); var userApi = scope.ServiceProvider.GetRequiredService<IUserApi>(); var user = await userApi.GetAsync(id:\\\"id001\\\"); ... } }\"]},\"11\":{\"h\":\"内置特性\",\"t\":[\"内置特性指框架内提供的一些特性，拿来即用就能满足一般情况下的各种应用。当然，开发者也可以在实际应用中，编写满足特定场景需求的特性，然后将自定义特性修饰到接口、方法或参数即可。\",\"执行前顺序\",\"参数值验证 -> IApiActionAttribute -> IApiParameterAttribute -> IApiReturnAttribute -> IApiFilterAttribute\",\"执行后顺序\",\"IApiReturnAttribute -> 返回值验证 -> IApiFilterAttribute\"]},\"12\":{\"h\":\"各特性的位置\",\"t\":[\"[IApiFilterAttribute]/*作用于接口内所有方法的Filter*/ [IApiReturnAttribute]/*作用于接口内所有方法的ReturnAttribute*/ public interface DemoApiInterface { [IApiActionAttribute] [IApiFilterAttribute]/*作用于本方法的Filter*/ [IApiReturnAttribute]/*作用于本方法的ReturnAttribute*/ Task<HttpResponseMessage> DemoApiMethod([IApiParameterAttribute] ParameterClass parameterClass); }\"]},\"13\":{\"h\":\"Return 特性\",\"t\":[\"Return 特性用于处理响应内容为对应的 .NET 数据模型，其存在以下规则：\",\"当特性的 EnsureMatchAcceptContentType 属性为 true 时(默认为 false)，其 AcceptContentType 属性值与响应的 Content-Type 值匹配时才生效。\",\"当所有 Return 特性的 AcceptContentType 属性值都不匹配响应的 Content-Type 值时，引发ApiReturnNotSupportedException\",\"当特性的 EnsureSuccessStatusCode 属性为 true 时(默认值 为true)，且响应的状态码不在 200 到 299 之间时，引发ApiResponseStatusException。\",\"同一种 AcceptContentType 属性值的多个 Return 特性，只有 AcceptQuality 属性值最大的特性生效。\"]},\"14\":{\"h\":\"缺省的Return特性\",\"t\":[\"在缺省情况下，每个接口的都已经隐性存在了多个 AcceptQuality 为 0.1 的 Return 特性，能同时处理原始类型、json 和 xml 多种响应内容。\",\"当你想以特定的 Return 特性来处理相应内容而不关注相应的 Content-Type 的匹配性，你需要声明缺省参数的特定 Return 特性即可。\",\"[JsonReturn] // (.AcceptQuality = MAX, .EnsureSuccessStatusCode = true, .EnsureMatchAcceptContentType = false) /* 以下特性是隐性存在的 [RawReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] [NoneReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] [JsonReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] [XmlReturn(0.1, EnsureSuccessStatusCode = true, EnsureMatchAcceptContentType = true)] */ Task<SpecialResultClass> DemoApiMethod();\"]},\"15\":{\"h\":\"RawReturnAttribute\",\"t\":[\"表示原始类型的结果特性,支持结果类型为string、byte[]、Stream和HttpResponseMessage\",\"[RawReturnAttribute] Task<HttpResponseMessage> DemoApiMethod();\"]},\"16\":{\"h\":\"JsonReturnAttribute\",\"t\":[\"表示json内容的结果特性，使用System.Text.Json进行序列化和反序列化\",\"[JsonReturnAttribute] Task<JsonResultClass> DemoApiMethod();\"]},\"17\":{\"h\":\"XmlReturnAttribute\",\"t\":[\"表示xml内容的结果特性,使用System.Xml.Serialization进行序列化和反序列化\",\"[XmlReturnAttribute] Task<XmlResultClass> DemoApiMethod();\"]},\"18\":{\"h\":\"NoneReturnAttribute\",\"t\":[\"表示响应状态为204时将结果设置为返回类型的默认值特性\",\"// if response status code is 204, return default value of return type [NoneReturnAttribute] Task<int> DemoApiMethod();\"]},\"19\":{\"h\":\"Action 特性\"},\"20\":{\"h\":\"HttpHostAttribute\",\"t\":[\"当请求域名是已知的常量时，才能使用 HttpHost 特性。\",\"[HttpHost(\\\"http://localhost:5000/\\\")] // 对接口下所有方法适用 public interface IUserApi { Task<User> GetAsync(string id); [HttpHost(\\\"http://localhost:8000/\\\")] // 会覆盖接口声明的HttpHost Task<User> PostAsync(User user); }\"]},\"21\":{\"h\":\"HttpGetAttribute\",\"t\":[\"GET请求\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] // 支持 null、绝对或相对路径 Task<User> GetAsync(string id); }\"]},\"22\":{\"h\":\"HttpPostAttribute\",\"t\":[\"POST请求\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] // 支持 null、绝对或相对路径 Task<User> PostAsync([JsonContent] User user); }\"]},\"23\":{\"h\":\"HttpPutAttribute\",\"t\":[\"PUT请求\",\"public interface IUserApi { [HttpPut(\\\"api/users\\\")] // 支持 null、绝对或相对路径 Task<User> PutAsync([JsonContent] User user); }\"]},\"24\":{\"h\":\"HttpDeleteAttribute\",\"t\":[\"DELETE请求\",\"public interface IUserApi { [HttpDelete(\\\"api/users\\\")] // 支持 null、绝对或相对路径 Task<User> DeleteAsync([JsonContent] User user); }\"]},\"25\":{\"h\":\"HttpPatchAttribute\",\"t\":[\"PATCH请求\",\"public interface IUserApi { [HttpPatch(\\\"api/users/{id}\\\")] Task<UserInfo> PatchAsync(string id, JsonPatchDocument<User> doc); } var doc = new JsonPatchDocument<User>(); doc.Replace(item => item.Account, \\\"laojiu\\\"); doc.Replace(item => item.Email, \\\"laojiu@qq.com\\\");\"]},\"26\":{\"h\":\"HeaderAttribute\",\"t\":[\"常量值请求头。\",\"public interface IUserApi { [Header(\\\"headerName1\\\", \\\"headerValue1\\\")] [Header(\\\"headerName2\\\", \\\"headerValue2\\\")] [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); }\"]},\"27\":{\"h\":\"TimeoutAttribute\",\"t\":[\"常量值请求超时时长。\",\"public interface IUserApi { [Timeout(10 * 1000)] // 超时时长为10秒 [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); }\"]},\"28\":{\"h\":\"FormFieldAttribute\",\"t\":[\"常量值 x-www-form-urlencoded 表单字段。\",\"public interface IUserApi { [FormField(\\\"fieldName1\\\", \\\"fieldValue1\\\")] [FormField(\\\"fieldName2\\\", \\\"fieldValue2\\\")] [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormContent] User user); }\"]},\"29\":{\"h\":\"FormDataTextAttribute\",\"t\":[\"常量值 multipart/form-data 表单字段。\",\"public interface IUserApi { [FormDataText(\\\"fieldName1\\\", \\\"fieldValue1\\\")] [FormDataText(\\\"fieldName2\\\", \\\"fieldValue2\\\")] [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user); }\"]},\"30\":{\"h\":\"Parameter 特性\"},\"31\":{\"h\":\"PathQueryAttribute\",\"t\":[\"参数值的键值对作为请示 url 路径参数或 query 参数的特性，一般类型的参数，缺省特性时 PathQueryAttribute 会隐性生效。\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync([PathQuery] string id); }\"]},\"32\":{\"h\":\"FormContentAttribute\",\"t\":[\"参数值的键值对作为 x-www-form-urlencoded 表单。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user); }\"]},\"33\":{\"h\":\"FormFieldAttribute\",\"t\":[\"参数值作为 x-www-form-urlencoded 表单字段与值。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, [FormField] string field1); }\"]},\"34\":{\"h\":\"FormDataContentAttribute\",\"t\":[\"参数值的键值对作为 multipart/form-data 表单。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, /*表单文件*/ FormDataFile headImage); }\"]},\"35\":{\"h\":\"FormDataTextAttribute\",\"t\":[\"参数值作为 multipart/form-data 表单字段与值。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, /*表单文件*/ FormDataFile headImage, [FormDataText] string field1); }\"]},\"36\":{\"h\":\"JsonContentAttribute\",\"t\":[\"参数值序列化为请求的 json 内容。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([JsonContent] User user); }\"]},\"37\":{\"h\":\"XmlContentAttribute\",\"t\":[\"参数值序列化为请求的 xml 内容。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([XmlContent] User user); }\"]},\"38\":{\"h\":\"UriAttribute\",\"t\":[\"参数值作为请求Uri，只能修饰第一个参数，可以是相对 Uri 或绝对 Uri。\",\"public interface IUserApi { [HttpGet] Task<User> GetAsync([Uri] Uri uri); }\"]},\"39\":{\"h\":\"TimeoutAttribute\",\"t\":[\"参数值作为超时时间的毫秒数，值不能大于 HttpClient 的 Timeout 属性。\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, [Timeout] int timeout); }\"]},\"40\":{\"h\":\"HeaderAttribute\",\"t\":[\"参数值作为请求头。\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, [Header] string headerName1); }\"]},\"41\":{\"h\":\"HeadersAttribute\",\"t\":[\"参数值的键值对作为请求头。\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, [Headers] CustomHeaders headers); [HttpGet(\\\"api/users/{id}\\\")] Task<User> Get2Async(string id, [Headers] Dictionary<string,string> headers); } public class CustomHeaders { public string HeaderName1 { get; set; } public string HeaderName1 { get; set; } }\"]},\"42\":{\"h\":\"RawStringContentAttribute\",\"t\":[\"原始文本内容。\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawStringContent(\\\"text/plain\\\")] string text); }\"]},\"43\":{\"h\":\"RawJsonContentAttribute\",\"t\":[\"原始 json 内容。\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawJsonContent] string json); }\"]},\"44\":{\"h\":\"RawXmlContentAttribute\",\"t\":[\"原始 xml 内容。\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawXmlContent] string xml); }\"]},\"45\":{\"h\":\"RawFormContentAttribute\",\"t\":[\"原始 x-www-form-urlencoded 表单内容，这些内容要求是表单编码过的。\",\"public interface IUserApi { [HttpPost] Task PostAsync([RawFormContent] string form); }\"]},\"46\":{\"h\":\"Filter 特性\",\"t\":[\"Filter特性可用于发送前最后一步的内容修改，或者查看响应数据内容。\"]},\"47\":{\"h\":\"LoggingFilterAttribute\",\"t\":[\"请求和响应内容的输出为日志到 LoggingFactory。\",\"[LoggingFilter] // 所有方法都记录请求日志 public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); [LoggingFilter(Enable = false)] // 本方法禁用日志 [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([JsonContent] User user); }\"]},\"48\":{\"h\":\"Cache 特性\",\"t\":[\"把本次的响应内容缓存起来，下一次如果符合预期条件的话，就不会再请求到远程服务器，而是从 IResponseCacheProvider 获取缓存内容，开发者可以自己实现 ResponseCacheProvider。\"]},\"49\":{\"h\":\"CacheAttribute\",\"t\":[\"使用请求的完整 Uri 做为缓存的 Key 应用缓存。\",\"public interface IUserApi { [Cache(60 * 1000)] // 缓存一分钟 [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); }\"]},\"50\":{\"h\":\"特殊参数\",\"t\":[\"特殊参数是指不需要任何特性来修饰就能工作的一些参数类型。\"]},\"51\":{\"h\":\"CancellationToken 类型\",\"t\":[\"每个接口都支持声明一个或多个 CancellationToken 类型的参数，用于取消请求操作。\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id, CancellationToken token = default); }\"]},\"52\":{\"h\":\"FileInfo 类型\",\"t\":[\"做为 multipart/form-data 表单的一个文件项，实现文件上传功能。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, FileInfo headImage); }\"]},\"53\":{\"h\":\"HttpContent 的子类型\",\"t\":[\"public interface IUserApi { [HttpPost(\\\"api/users/{id}\\\")] Task PostAsync(StringContent text); [HttpPost(\\\"api/users/{id}\\\")] Task PostAsync(StreamContent stream); [HttpPost(\\\"api/users/{id}\\\")] Task PostAsync(ByteArrayContent bytes); }\"]},\"54\":{\"h\":\"IApiParameter 的子类型\",\"t\":[\"实现 IApiParameter 的类型，称为自解释参数类型，它可以弥补特性(Attribute)不能解决的一些复杂参数。\"]},\"55\":{\"h\":\"FormDataFile 类型\",\"t\":[\"做为 multipart/form-data 表单的一个文件项，实现文件上传功能，等效于 FileInfo 类型。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([FormDataContent] User user, FormDataFile headImage); }\"]},\"56\":{\"h\":\"JsonPatchDocument 类型\",\"t\":[\"表示 JsonPatch 请求文档。\",\"public interface IUserApi { [HttpPatch(\\\"api/users/{id}\\\")] Task<UserInfo> PatchAsync(string id, JsonPatchDocument<User> doc); } var doc = new JsonPatchDocument<User>(); doc.Replace(item => item.Account, \\\"laojiu\\\"); doc.Replace(item => item.Email, \\\"laojiu@qq.com\\\");\"]},\"57\":{\"h\":\"数据验证\",\"t\":[\"使用 ValidationAttribute 的子类特性来验证请求参数值和响应结果。\"]},\"58\":{\"h\":\"参数值验证\",\"t\":[\"public interface IUserApi { [HttpGet(\\\"api/users/{email}\\\")] Task<User> GetAsync( [EmailAddress, Required] // 这些验证特性用于请求前验证此参数 string email); }\"]},\"59\":{\"h\":\"请求或响应模型验证\",\"t\":[\"请求和相应用到的 User 的两个属性值都得到验证。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([Required][JsonContent] User user); } public class User { [Required] [StringLength(10, MinimumLength = 1)] public string Account { get; set; } [Required] [StringLength(10, MinimumLength = 1)] public string Password { get; set; } }\"]},\"60\":{\"h\":\"关闭数据验证功能\",\"t\":[\"数据验证功能默认是开启的，可以在接口的 HttpApiOptions 配置关闭数据验证功能。\",\"public void ConfigureServices(IServiceCollection services) { services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { // 关闭数据验证功能，即使打了验证特性也不验证。 o.UseParameterPropertyValidate = false; o.UseReturnValuePropertyValidate = false; }); }\"]},\"61\":{\"h\":\"进阶功能\"},\"62\":{\"h\":\"Uri 拼接规则\",\"t\":[\"所有的 Uri 拼接都是通过 new Uri(Uri baseUri, Uri relativeUri) 这个构造器生成。\",\"带/结尾的 baseUri\",\"http://a.com/ + b/c/d = http://a.com/b/c/d\",\"http://a.com/path1/ + b/c/d = http://a.com/path1/b/c/d\",\"http://a.com/path1/path2/ + b/c/d = http://a.com/path1/path2/b/c/d\",\"不带/结尾的 baseUri\",\"http://a.com + b/c/d = http://a.com/b/c/d\",\"http://a.com/path1 + b/c/d = http://a.com/b/c/d\",\"http://a.com/path1/path2 + b/c/d = http://a.com/path1/b/c/d\",\"事实上http://a.com与http://a.com/是完全一样的，他们的 path 都是/，所以才会表现一样。为了避免低级错误的出现，请使用的标准 baseUri 书写方式，即使用/作为 baseUri 的结尾的第一种方式。\"]},\"63\":{\"h\":\"请求异常处理\",\"t\":[\"请求一个接口，不管出现何种异常，最终都抛出 HttpRequestException，HttpRequestException 的内部异常为实际具体异常，之所以设计为内部异常，是为了完好的保存内部异常的堆栈信息。\",\"WebApiClientCore 内部的很多异常都基于 ApiException 这个异常抽象类，也就是很多情况下抛出的异常都是内部异常为某个 ApiException 的 HttpRequestException。\",\"try { var datas = await api.GetAsync(); } catch (HttpRequestException ex) when (ex.InnerException is ApiInvalidConfigException configException) { // 请求配置异常 } catch (HttpRequestException ex) when (ex.InnerException is ApiResponseStatusException statusException) { // 响应状态码异常 } catch (HttpRequestException ex) when (ex.InnerException is ApiException apiException) { // 抽象的api异常 } catch (HttpRequestException ex) when (ex.InnerException is SocketException socketException) { // socket连接层异常 } catch (HttpRequestException ex) { // 请求异常 } catch (Exception ex) { // 异常 }\"]},\"64\":{\"h\":\"请求条件性重试\",\"t\":[\"使用ITask<>异步声明，就有 Retry 的扩展，Retry 的条件可以为捕获到某种 Exception 或响应模型符合某种条件。\",\"public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] ITask<User> GetAsync(string id); } var result = await userApi.GetAsync(id: \\\"id001\\\") .Retry(maxCount: 3) .WhenCatch<HttpRequestException>() .WhenResult(r => r.Age <= 0);\",\"ITask<>可以精确控制某个方法的重试逻辑，如果想全局性实现重试，请结合使用 Polly 来实现。\"]},\"65\":{\"h\":\"表单集合处理\",\"t\":[\"按照 OpenApi，一个集合在 Uri 的 Query 或表单中支持 5 种表述方式，分别是：\",\"Csv // 逗号分隔\",\"Ssv // 空格分隔\",\"Tsv // 反斜杠分隔\",\"Pipes // 竖线分隔\",\"Multi // 多个同名键的键值对\",\"对于 id = [\\\"001\\\",\\\"002\\\"] 这样的数组值，在 PathQueryAttribute 与 FormContentAttribute 处理后分别是：\",\"CollectionFormat\",\"Data\",\"[PathQuery(CollectionFormat = CollectionFormat.Csv)]\",\"id=001,002\",\"[PathQuery(CollectionFormat = CollectionFormat.Ssv)]\",\"id=001 002\",\"[PathQuery(CollectionFormat = CollectionFormat.Tsv)]\",\"id=001\\\\002\",\"[PathQuery(CollectionFormat = CollectionFormat.Pipes)]\",\"id=001|002\",\"[PathQuery(CollectionFormat = CollectionFormat.Multi)]\",\"id=001&id=002\"]},\"66\":{\"h\":\"调整缺省参数特性\",\"t\":[\"WebApiClientCore 是基于元数据来执行请求和处理响应，可以自定义 Api 方法的描述，填充上想要的特性即可。现代 Web 接口中，json 请求几乎占据了大部分的场景，所以你的客户端接口提交的内容往往也是 json 内容，以下 UseJsonFirstApiActionDescriptor 行为在非GET或HEAD请求的缺省参数特性声明时，为复杂参数类型的参数应用 JsonContentAttribute。\",\"services .AddWebApiClient() .UseJsonFirstApiActionDescriptor();\",\"你可以为 IUserApi 标注上你的一个自定义 ApiFilterAttribute 子类，用于观察调用 PostAsync 时的 ApiRequestContext.ActionDescriptor.Parameters[0].Attributes，会发现集合里面默认加上了 JsonContentAttribute。\",\"public interface IUserApi { [HttpPost(\\\"api/users\\\")] Task<User> PostAsync(/*[JsonContent]*/ User user); }\"]},\"67\":{\"h\":\"适配畸形接口\"},\"68\":{\"h\":\"不友好的参数名别名\",\"t\":[\"例如服务器要求一个 Query 参数的名字为field-Name，这个是C#关键字或变量命名不允许的，我们可以使用[AliasAsAttribute]来达到这个要求：\",\"public interface IUserApi { [HttpGet(\\\"api/users\\\")] ITask<string> GetAsync([AliasAs(\\\"field-Name\\\")] string fieldName); }\",\"然后最终请求 uri 变为 api/users/?field-name=fileNameValue\"]},\"69\":{\"h\":\"Form 的某个字段为 json 文本\",\"t\":[\"字段\",\"值\",\"field1\",\"someValue\",\"field2\",\"{\\\"name\\\":\\\"sb\\\",\\\"age\\\":18}\",\"field2 对应的 .NET 模型为\",\"public class Field2 { public string Name {get; set;} public int Age {get; set;} }\",\"常规下我们得把 field2 的实例 json 序列化得到 json 文本，然后赋值给 field2 这个 string 属性，使用[JsonFormField]特性可以轻松帮我们自动完成 Field2 类型的 json 序列化并将结果字符串作为表单的一个字段。\",\"public interface IUserApi { Task PostAsync([FormField] string field1, [JsonFormField] Field2 field2) }\"]},\"70\":{\"h\":\"Form 的字段多层嵌套\",\"t\":[\"字段\",\"值\",\"field1\",\"someValue\",\"field2.name\",\"sb\",\"field2.age\",\"18\",\"Form 对应的 .NET 模型为\",\"public class FormModel { public string Field1 {get; set;} public Field2 Field2 {get; set;} } public class Field2 { public string Name {get; set;} public int Age {get; set;} }\",\"合理情况下，对于复杂嵌套结构的数据模型，应当设计为使用 applicaiton/json 提交 FormModel，但服务提供方设计为使用 x-www-form-urlencoded 来提交 FormModel，我可以配置 KeyValueSerializeOptions 来达到这个格式要求：\",\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.KeyValueSerializeOptions.KeyNamingStyle = KeyNamingStyle.FullName; });\"]},\"71\":{\"h\":\"响应的 Content-Type 不是预期值\",\"t\":[\"响应的内容通过肉眼看上是 json 内容，但响应头里的 Content-Type 为非预期值 application/json或 application/xml，而是诸如 text/html 等。这好比客户端提交 json 内容时指示请求头的 Content-Type 值为 text/plain 一样，让服务端无法处理。\",\"解决办法是在 Interface 或 Method 声明[JsonReturn]特性，并设置其 EnsureMatchAcceptContentType 属性为 false，表示 Content-Type 不是期望值匹配也要处理。\",\"[JsonReturn(EnsureMatchAcceptContentType = false)] public interface IUserApi { }\"]},\"72\":{\"h\":\"动态 HttpHost\"},\"73\":{\"h\":\"使用 UriAttribute 传绝对 Uri 参\",\"t\":[\"[LoggingFilter] public interface IUserApi { [HttpGet] ITask<User> GetAsync([Uri] string urlString, [PathQuery] string id); }\"]},\"74\":{\"h\":\"自定义 HttpHostBaseAttribute 实现\",\"t\":[\"[ServiceNameHost(\\\"baidu\\\")] // 使用自定义的ServiceNameHostAttribute public interface IUserApi { [HttpGet(\\\"api/users/{id}\\\")] Task<User> GetAsync(string id); [HttpPost(\\\"api/users\\\")] Task<User> PostAsync([JsonContent] User user); } /// <summary> /// 以服务名来确定主机的特性 /// </summary> public class ServiceNameHostAttribute : HttpHostBaseAttribute { public string ServiceName { get; } public ServiceNameHostAttribute(string serviceName) { this.ServiceName = serviceName; } public override Task OnRequestAsync(ApiRequestContext context) { // HostProvider是你自己的服务，数据来源可以是db或其它等等，要求此服务已经注入了DI HostProvider hostProvider = context.HttpContext.ServiceProvider.GetRequiredService<HostProvider>(); string host = hostProvider.ResolveHost(this.ServiceName); // 最终目的是设置请求消息的RequestUri的属性 context.HttpContext.RequestMessage.RequestUri = new Uri(host); } }\"]},\"75\":{\"h\":\"请求签名\"},\"76\":{\"h\":\"动态追加请求签名\",\"t\":[\"例如每个请求的 Uri 额外的动态添加一个叫 sign 的 query 参数，这个 sign 可能和请求参数值有关联，每次都需要计算。 我们可以自定义 ApiFilterAttribute 的子来实现自己的 sign 功能，然后把自定义 Filter 声明到 Interface 或 Method 即可\",\"public class SignFilterAttribute : ApiFilterAttribute { public override Task OnRequestAsync(ApiRequestContext context) { var signService = context.HttpContext.ServiceProvider.GetRequiredService<SignService>(); var sign = signService.SignValue(DateTime.Now); context.HttpContext.RequestMessage.AddUrlQuery(\\\"sign\\\", sign); return Task.CompletedTask; } } [SignFilter] public interface IUserApi { ... }\"]},\"77\":{\"h\":\"请求表单的字段排序\",\"t\":[\"不知道是哪门公司起的所谓的“签名算法”，往往要表单的字段排序等。\",\"public interface IUserApi { [HttpGet(\\\"/path\\\")] Task<HttpResponseMessage> PostAsync([SortedFormContent] Model model); } public class SortedFormContentAttribute : FormContentAttribute { protected override IEnumerable<KeyValue> SerializeToKeyValues(ApiParameterContext context) { 这里可以排序、加上其它衍生字段等 return base.SerializeToKeyValues(context).OrderBy(item => item.Key); } }\"]},\"78\":{\"h\":\".NET8 AOT 发布\",\"t\":[\"System.Text.Json 中使用源生成功能之后，使项目AOT发布成为可能。\",\"json 序列化源生成示例\",\"[JsonSerializable(typeof(User[]))] // 这里要挂上所有接口中使用到的 json 模型类型 [JsonSerializable(typeof(YourModel[]))] public partial class AppJsonSerializerContext : JsonSerializerContext { }\",\"在 WebApiClientCore 的全局配置中添加 json 源生成的上下文\",\"services .AddWebApiClient() .ConfigureHttpApi(options => // json SG生成器配置 { options.PrependJsonSerializerContext(AppJsonSerializerContext.Default); });\"]},\"79\":{\"h\":\"HttpClient 的配置\",\"t\":[\"这部分是 Httpclient Factory 的内容，这里不做过多介绍。\",\"services.AddHttpApi<IUserApi>().ConfigureHttpClient(httpClient => { httpClient.Timeout = TimeSpan.FromMinutes(1d); httpClient.DefaultRequestVersion = HttpVersion.Version20; httpClient.DefaultVersionPolicy = HttpVersionPolicy.RequestVersionOrLower; });\"]},\"80\":{\"h\":\"主 HttpMessageHandler 的配置\"},\"81\":{\"h\":\"Http 代理配置\",\"t\":[\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }) .ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler { UseProxy = true, Proxy = new WebProxy { Address = new Uri(\\\"http://proxy.com\\\"), Credentials = new NetworkCredential { UserName = \\\"useranme\\\", Password = \\\"pasword\\\" } } });\"]},\"82\":{\"h\":\"客户端证书配置\",\"t\":[\"有些服务器为了限制客户端的连接，开启了 https 双向验证，只允许它执有它颁发的证书的客户端进行连接\",\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }) .ConfigurePrimaryHttpMessageHandler(() => { var handler = new HttpClientHandler(); handler.ClientCertificates.Add(yourCert); return handler; });\"]},\"83\":{\"h\":\"维持 CookieContainer 不变\",\"t\":[\"如果请求的接口不幸使用了 Cookie 保存身份信息机制，那么就要考虑维持 CookieContainer 实例不要跟随 HttpMessageHandler 的生命周期，默认的 HttpMessageHandler 最短只有 2 分钟的生命周期。\",\"var cookieContainer = new CookieContainer(); services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.HttpHost = new Uri(\\\"http://localhost:5000/\\\"); }) .ConfigurePrimaryHttpMessageHandler(() => { var handler = new HttpClientHandler(); handler.CookieContainer = cookieContainer; return handler; });\"]},\"84\":{\"h\":\"在接口配置中使用过滤器\",\"t\":[\"除了能在接口声明中使用 IApiFilterAttribute 子类的特性标注之外，还可以在接口注册时的配置添加 IApiFilter 类型的过滤器，这些过滤器将对整个接口生效，且优先于通过特性标注的 IApiFilterAttribute 类型执行。\",\"services.AddHttpApi<IUserApi>().ConfigureHttpApi(o => { o.GlobalFilters.Add(new UserFiler()); });\",\"public class UserFiler : IApiFilter { public Task OnRequestAsync(ApiRequestContext context) { throw new System.NotImplementedException(); } public Task OnResponseAsync(ApiResponseContext context) { throw new System.NotImplementedException(); } }\"]},\"85\":{\"h\":\"自定义请求内容与响应内容解析\",\"t\":[\"除了常见的 xml 或 json 响应内容要反序列化为强类型结果模型，你可能会遇到其它的二进制协议响应内容，比如 google 的 ProtoBuf 二进制内容。\",\"自定义请求内容处理特性\",\"public class ProtobufContentAttribute : HttpContentAttribute { public string ContentType { get; set; } = \\\"application/x-protobuf\\\"; protected override Task SetHttpContentAsync(ApiParameterContext context) { var stream = new MemoryStream(); if (context.ParameterValue != null) { Serializer.NonGeneric.Serialize(stream, context.ParameterValue); stream.Position = 0L; } var content = new StreamContent(stream); content.Headers.ContentType = new MediaTypeHeaderValue(this.ContentType); context.HttpContext.RequestMessage.Content = content; return Task.CompletedTask; } }\",\"自定义响应内容解析特性\",\"public class ProtobufReturnAttribute : ApiReturnAttribute { public ProtobufReturnAttribute(string acceptContentType = \\\"application/x-protobuf\\\") : base(new MediaTypeWithQualityHeaderValue(acceptContentType)) { } public override async Task SetResultAsync(ApiResponseContext context) { var stream = await context.HttpContext.ResponseMessage.Content.ReadAsStreamAsync(); context.Result = Serializer.NonGeneric.Deserialize(context.ApiAction.Return.DataType.Type, stream); } }\",\"应用相关自定义特性\",\"[ProtobufReturn] public interface IProtobufApi { [HttpPut(\\\"/users/{id}\\\")] Task<User> UpdateAsync([Required, PathQuery] string id, [ProtobufContent] User user); }\"]},\"86\":{\"h\":\"自定义 CookieAuthorizationHandler\",\"t\":[\"对于使用 Cookie 机制的接口，只有在接口请求之后，才知道 Cookie 是否已失效。通过自定义 CookieAuthorizationHandler，可以做在请求某个接口过程中，遇到 Cookie 失效时自动刷新 Cookie 再重试请求接口。\",\"首先，我们需要把登录接口与某它业务接口拆分在不同的接口定义，例如 IUserApi 和 IUserLoginApi\",\"[HttpHost(\\\"http://localhost:5000/\\\")] public interface IUserLoginApi { [HttpPost(\\\"/users\\\")] Task<HttpResponseMessage> LoginAsync([JsonContent] Account account); }\",\"然后实现自动登录的 CookieAuthorizationHandler\",\"public class AutoRefreshCookieHandler : CookieAuthorizationHandler { private readonly IUserLoginApi api; public AutoRefreshCookieHandler(IUserLoginApi api) { this.api = api; } /// <summary> /// 登录并刷新Cookie /// </summary> /// <returns>返回登录响应消息</returns> protected override Task<HttpResponseMessage> RefreshCookieAsync() { return this.api.LoginAsync(new Account { account = \\\"admin\\\", password = \\\"123456\\\" }); } }\",\"最后，注册 IUserApi、IUserLoginApi，并为 IUserApi 配置 AutoRefreshCookieHandler\",\"services .AddHttpApi<IUserLoginApi>(); services .AddHttpApi<IUserApi>() .AddHttpMessageHandler(s => new AutoRefreshCookieHandler(s.GetRequiredService<IUserLoginApi>()));\",\"现在，调用 IUserApi 的任意接口，只要响应的状态码为 401，就触发 IUserLoginApi 登录，然后将登录得到的 cookie 来重试请求接口，最终响应为正确的结果。你也可以重写 CookieAuthorizationHandler 的 IsUnauthorizedAsync(HttpResponseMessage) 方法来指示响应是未授权状态。\"]},\"87\":{\"h\":\"自定义日志输出目标\",\"t\":[\"[CustomLogging] public interface IUserApi { } public class CustomLoggingAttribute : LoggingFilterAttribute { protected override Task WriteLogAsync(ApiResponseContext context, LogMessage logMessage) { // 这里把logMessage输出到你的目标 return Task.CompletedTask; } }\"]},\"88\":{\"h\":\"自定义缓存提供者\",\"t\":[\"默认的缓存提供者为内存缓存，如果希望将缓存保存到其它存储位置，则需要自定义 缓存提者，并注册替换默认的缓存提供者。\",\"public static IWebApiClientBuilder UseRedisResponseCacheProvider(this IWebApiClientBuilder builder) { builder.Services.AddSingleton<IResponseCacheProvider, RedisResponseCacheProvider>(); return builder; } public class RedisResponseCacheProvider : IResponseCacheProvider { public string Name => nameof(RedisResponseCacheProvider); public Task<ResponseCacheResult> GetAsync(string key) { // 从redis获取缓存 throw new NotImplementedException(); } public Task SetAsync(string key, ResponseCacheEntry entry, TimeSpan expiration) { // 把缓存内容写入redis throw new NotImplementedException(); } }\"]},\"89\":{\"h\":\"自定义自解释的参数类型\",\"t\":[\"在某些极限情况下，比如人脸比对的接口，我们输入模型与传输模型未必是对等的，例如：\",\"服务端要求的 json 模型\",\"{ \\\"image1\\\": \\\"图片1的base64\\\", \\\"image2\\\": \\\"图片2的base64\\\" }\",\"客户端期望的业务模型\",\"public class FaceModel { public Bitmap Image1 {get; set;} public Bitmap Image2 {get; set;} }\",\"我们希望构造模型实例时传入 Bitmap 对象，但传输的时候变成 Bitmap 的 base64 值，所以我们要改造 FaceModel，让它实现 IApiParameter 接口：\",\"public class FaceModel : IApiParameter { public Bitmap Image1 { get; set; } public Bitmap Image2 { get; set; } public Task OnRequestAsync(ApiParameterContext context) { var image1 = GetImageBase64(this.Image1); var image2 = GetImageBase64(this.Image2); var model = new { image1, image2 }; var options = context.HttpContext.HttpApiOptions.JsonSerializeOptions; context.HttpContext.RequestMessage.Content = new JsonContent(model,options); } private static string GetImageBase64(Bitmap image) { using var stream = new MemoryStream(); image.Save(stream, System.Drawing.Imaging.ImageFormat.Jpeg); return Convert.ToBase64String(stream.ToArray()); } }\",\"最后，我们在使用改进后的 FaceModel 来请求\",\"public interface IFaceApi { [HttpPost(\\\"/somePath\\\")] Task<HttpResponseMessage> PostAsync(FaceModel faces); }\"]},\"90\":{\"h\":\"OAuths&Token 扩展\",\"t\":[\"使用 WebApiClientCore.Extensions.OAuths 扩展，轻松支持 token 的获取、刷新与应用。\"]},\"91\":{\"h\":\"对象与概念\"},\"92\":{\"h\":\"ITokenProviderFactory\",\"t\":[\"ITokenProvider 的创建工厂，提供通过 HttpApi 接口类型获取或创建 ITokenProvider。\"]},\"93\":{\"h\":\"ITokenProvider\",\"t\":[\"token 提供者，用于获取 token，在 token 的过期后的头一次请求里触发重新请求或刷新 token。\"]},\"94\":{\"h\":\"OAuthTokenAttribute\",\"t\":[\"token 的应用特性，使用 ITokenProviderFactory 创建 ITokenProvider，然后使用 ITokenProvider 获取 token，最后将 token 应用到请求消息中。\"]},\"95\":{\"h\":\"OAuthTokenHandler\",\"t\":[\"属于 http 消息处理器，功能与 OAuthTokenAttribute 一样，除此之外，如果因为意外的原因导致服务器仍然返回未授权(401 状态码)，其还会丢弃旧 token，申请新 token 来重试一次请求。\"]},\"96\":{\"h\":\"OAuth 的 Client 模式\"},\"97\":{\"h\":\"为接口注册 TokenProvider\",\"t\":[\"// 为接口注册与配置Client模式的tokenProvider services.AddClientCredentialsTokenProvider<IUserApi>(o => { o.Endpoint = new Uri(\\\"http://localhost:6000/api/tokens\\\"); o.Credentials.Client_id = \\\"clientId\\\"; o.Credentials.Client_secret = \\\"xxyyzz\\\"; });\"]},\"98\":{\"h\":\"token 的应用\"},\"99\":{\"h\":\"使用 OAuthToken 特性\",\"t\":[\"OAuthTokenAttribute 属于 WebApiClientCore 框架层，很容易操控请求内容和响应模型，比如将 token 作为表单字段添加到既有请求表单中，或者读取响应消息反序列化之后对应的业务模型都非常方便，但它不能在请求内部实现重试请求的效果。在服务器颁发 token 之后，如果服务器的 token 丢失了，使用 OAuthTokenAttribute 会得到一次失败的请求，本次失败的请求无法避免。\",\"/// <summary> /// 用户操作接口 /// </summary> [OAuthToken] public interface IUserApi { ... }\",\"OAuthTokenAttribute 默认实现将 token 放到 Authorization 请求头，如果你的接口需要请 token 放到其它地方比如 Uri 的 Query，需要重写 OAuthTokenAttribute：\",\"public class UriQueryTokenAttribute : OAuthTokenAttribute { protected override void UseTokenResult(ApiRequestContext context, TokenResult tokenResult) { context.HttpContext.RequestMessage.AddUrlQuery(\\\"mytoken\\\", tokenResult.Access_token); } } [UriQueryToken] public interface IUserApi { ... }\"]},\"100\":{\"h\":\"使用 OAuthTokenHandler\",\"t\":[\"OAuthTokenHandler 的强项是支持在一个请求内部里进行多次尝试，在服务器颁发 token 之后，如果服务器的 token 丢失了，OAuthTokenHandler 在收到 401 状态码之后，会在本请求内部丢弃和重新请求 token，并使用新 token 重试请求，从而表现为一次正常的请求。但 OAuthTokenHandler 不属于 WebApiClientCore 框架层的对象，在里面只能访问原始的 HttpRequestMessage 与 HttpResponseMessage，如果需要将 token 追加到 HttpRequestMessage 的 Content 里，这是非常困难的，同理，如果不是根据 http 状态码(401 等)作为 token 无效的依据，而是使用 HttpResponseMessage 的 Content 对应的业务模型的某个标记字段，也是非常棘手的活。\",\"// 注册接口时添加OAuthTokenHandler services .AddHttpApi<IUserApi>() .AddOAuthTokenHandler();\",\"OAuthTokenHandler 默认实现将 token 放到 Authorization 请求头，如果你的接口需要请 token 放到其它地方比如 uri 的 query，需要重写 OAuthTokenHandler：\",\"public class UriQueryOAuthTokenHandler : OAuthTokenHandler { /// <summary> /// token应用的http消息处理程序 /// </summary> /// <param name=\\\"tokenProvider\\\">token提供者</param> public UriQueryOAuthTokenHandler(ITokenProvider tokenProvider) : base(tokenProvider) { } /// <summary> /// 应用token /// </summary> /// <param name=\\\"request\\\"></param> /// <param name=\\\"tokenResult\\\"></param> protected override void UseTokenResult(HttpRequestMessage request, TokenResult tokenResult) { // var builder = new UriBuilder(request.RequestUri); // builder.Query += \\\"mytoken=\\\" + Uri.EscapeDataString(tokenResult.Access_token); // request.RequestUri = builder.Uri; var uriValue = new UriValue(request.RequestUri); uriValue = uriValue.AddQuery(\\\"myToken\\\", tokenResult.Access_token); request.RequestUri = uriValue.ToUri(); } } // 注册接口时添加UriQueryOAuthTokenHandler services .AddHttpApi<IUserApi>() .AddOAuthTokenHandler((s, tp) => new UriQueryOAuthTokenHandler(tp));\"]},\"101\":{\"h\":\"多接口共享的 TokenProvider\",\"t\":[\"可以给 http 接口设置基础接口，然后为基础接口配置 TokenProvider，例如下面的 xxx 和 yyy 接口，都属于 IBaidu，只需要给 IBaidu 配置 TokenProvider。\",\"[OAuthToken] public interface IBaidu { } public interface IBaidu_XXX_Api : IBaidu { [HttpGet] Task xxxAsync(); } public interface IBaidu_YYY_Api : IBaidu { [HttpGet] Task yyyAsync(); }\",\"// 注册与配置password模式的token提者选项 services.AddPasswordCredentialsTokenProvider<IBaidu>(o => { o.Endpoint = new Uri(\\\"http://localhost:5000/api/tokens\\\"); o.Credentials.Client_id = \\\"clientId\\\"; o.Credentials.Client_secret = \\\"xxyyzz\\\"; o.Credentials.Username = \\\"username\\\"; o.Credentials.Password = \\\"password\\\"; });\"]},\"102\":{\"h\":\"自定义 TokenProvider\",\"t\":[\"扩展包已经内置了 OAuth 的 Client 和 Password 模式两种标准 token 请求，但是仍然还有很多接口提供方在实现上仅仅体现了它的精神，这时候就需要自定义 TokenProvider，假设接口提供方的获取 token 的接口如下：\",\"public interface ITokenApi { [HttpPost(\\\"http://xxx.com/token\\\")] Task<TokenResult> RequestTokenAsync([Parameter(Kind.Form)] string clientId, [Parameter(Kind.Form)] string clientSecret); }\"]},\"103\":{\"h\":\"委托 TokenProvider\",\"t\":[\"委托 TokenProvider 是一种最简单的实现方式，它将请求 token 的委托作为自定义 TokenProvider 的实现逻辑：\",\"// 为接口注册自定义tokenProvider services.AddTokenProvider<IUserApi>(s => { return s.GetRequiredService<ITokenApi>().RequestTokenAsync(\\\"id\\\", \\\"secret\\\"); });\"]},\"104\":{\"h\":\"完整实现的 TokenProvider\",\"t\":[\"// 为接口注册CustomTokenProvider services.AddTokenProvider<IUserApi, CustomTokenProvider>();\",\"public class CustomTokenProvider : TokenProvider { public CustomTokenProvider(IServiceProvider serviceProvider) : base(serviceProvider) { } protected override Task<TokenResult> RequestTokenAsync(IServiceProvider serviceProvider) { return serviceProvider.GetRequiredService<ITokenApi>().RequestTokenAsync(\\\"id\\\", \\\"secret\\\"); } protected override Task<TokenResult> RefreshTokenAsync(IServiceProvider serviceProvider, string refresh_token) { return this.RequestTokenAsync(serviceProvider); } }\"]},\"105\":{\"h\":\"自定义 TokenProvider 的选项\",\"t\":[\"每个 TokenProvider 都有一个 Name 属性，与 service.AddTokenProvider()返回的 ITokenProviderBuilder 的 Name 是同一个值。读取 Options 值可以使用 TokenProvider 的 GetOptionsValue()方法，配置 Options 则通过 ITokenProviderBuilder 的 Name 来配置。\"]},\"106\":{\"h\":\"Json.NET 扩展\",\"t\":[\"使用 WebApiClientCore.Extensions.NewtonsoftJson 扩展，轻松支持 Newtonsoft 的 Json.NET 来序列化和反序列化 json。\"]},\"107\":{\"h\":\"配置[可选]\",\"t\":[\"// ConfigureNewtonsoftJson services.AddHttpApi<IUserApi>().ConfigureNewtonsoftJson(o => { o.JsonSerializeOptions.NullValueHandling = NullValueHandling.Ignore; });\"]},\"108\":{\"h\":\"声明特性\",\"t\":[\"使用[JsonNetReturn]替换内置的[JsonReturn]，[JsonNetContent]替换内置[JsonContent]\",\"/// <summary> /// 用户操作接口 /// </summary> [JsonNetReturn] public interface IUserApi { [HttpPost(\\\"/users\\\")] Task PostAsync([JsonNetContent] User user); }\"]},\"109\":{\"h\":\"JsonRpc 扩展\",\"t\":[\"在极少数场景中，开发者可能遇到 JsonRpc 调用的接口，由于该协议不是很流行，WebApiClientCore 将该功能的支持作为 WebApiClientCore.Extensions.JsonRpc 扩展包提供。使用[JsonRpcMethod]修饰 Rpc 方法，使用[JsonRpcParam]修饰 Rpc 参数 即可。\"]},\"110\":{\"h\":\"JsonRpc 声明\",\"t\":[\"[HttpHost(\\\"http://localhost:5000/jsonrpc\\\")] public interface IUserApi { [JsonRpcMethod(\\\"add\\\")] ITask<JsonRpcResult<User>> AddAsync([JsonRpcParam] string name, [JsonRpcParam] int age, CancellationToken token = default); }\"]},\"111\":{\"h\":\"JsonRpc 数据包\",\"t\":[\" POST /jsonrpc HTTP/1.1 Host: localhost:5000 User-Agent: WebApiClientCore/1.0.6.0 Accept: application/json; q=0.01, application/xml; q=0.01 Content-Type: application/json-rpc {\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"add\\\",\\\"params\\\":[\\\"laojiu\\\",18],\\\"id\\\":1}\"]},\"112\":{\"h\":\"将OpenApi(swagger)生成代码\",\"t\":[\"使用这个工具可以将 OpenApi 的本地或远程文档解析生成 WebApiClientCore 的接口定义代码文件，ASP.NET Core 的 swagger json 文件也适用\"]},\"113\":{\"h\":\"安装工具\",\"t\":[\"dotnet tool install WebApiClientCore.OpenApi.SourceGenerator -g\"]},\"114\":{\"h\":\"使用工具\",\"t\":[\"运行以下命令，会将对应的 WebApiClientCore 的接口定义代码文件输出到当前目录的 output 文件夹下\",\"#举例 WebApiClientCore.OpenApi.SourceGenerator -o https://petstore.swagger.io/v2/swagger.json\"]},\"115\":{\"h\":\"命令介绍\",\"t\":[\" -o OpenApi, --openapi=OpenApi Required. openApi的json本地文件路径或远程Uri地址 -n Namespace, --namespace=Namespace 代码的命名空间，如WebApiClientCore --help Display this help screen.\"]},\"116\":{\"h\":\"工具原理\",\"t\":[\"使用 NSwag 解析 OpenApi 的 json 得到 OpenApiDocument 对象\",\"使用 RazorEngine 将 OpenApiDocument 传入 cshtml 模板编译得到 html\",\"使用 XDocument 将 html 的文本代码提取，得到 WebApiClientCore 的声明式代码\",\"代码美化，输出到本地文件\"]},\"117\":{\"h\":\"概览\",\"t\":[\"Stargazers over time\"]},\"118\":{\"h\":\"简介\",\"t\":[\"WebApiClient 有两个版本\"]},\"119\":{\"h\":\"WebApiclientCore\",\"t\":[\"WebApiclientCore 基于.NET Standard2.1重新设计的新版本，与全新的依赖注入、配置、选项、日志等重新设计过的.NET 抽象 Api 完美契合，欢迎您使用、提问、贡献代码、提供创意。\"]},\"120\":{\"h\":\"WebApiClient[不再更新]\",\"t\":[\"WebApiClient.JIT、WebApiClient.AOT 基于.NET Standard2.0的旧版本(额外支持.NET Framework 4.5+)，支持.NET Core 2.0+，在老版本的 .NET 上亦能独当一面,但我们不会继续更新它。\"]},\"121\":{\"h\":\"服务渠道\",\"t\":[\"QQ 群 825135345 进群时请注明 WebApiClient\",\"反馈问题请前往 https://github.com/dotnetcore/WebApiClient/issues\"]},\"122\":{\"h\":\"快速开始\"},\"123\":{\"h\":\"Nuget包\",\"t\":[\"包名\",\"描述\",\"Nuget\",\"WebApiClient.JIT\",\"适用于非AOT编译的所有平台，稳定性好\",\"WebApiClient.AOT\",\"适用于所有平台，包括IOS和UWP，复杂依赖项目可能编译不通过\"]},\"124\":{\"h\":\"Http请求\",\"t\":[\"接口的声明\",\"public interface IUserApi : IHttpApi { // GET api/user?account=laojiu // Return json或xml内容 [HttpGet(\\\"api/user\\\")] ITask<UserInfo> GetAsync(string account); // POST api/user // Body Account=laojiu&password=123456 // Return json或xml内容 [HttpPost(\\\"api/user\\\")] ITask<boo> AddAsync([FormContent] UserInfo user); }\",\"接口的配置\",\"HttpApi.Register<IUserApi>().ConfigureHttpApiConfig(c => { c.HttpHost = new Uri(\\\"http://www.webapiclient.com/\\\"); c.FormatOptions.DateTimeFormat = DateTimeFormats.ISO8601_WithMillisecond; });;\",\"接口的调用\",\"var api = HttpApi.Resolve<IUserApi>(); var user = new UserInfo { Account = \\\"laojiu\\\", Password = \\\"123456\\\" }; var user1 = await api.GetAsync(\\\"laojiu\\\"); var state = await api.AddAsync(user);\"]},\"125\":{\"h\":\"常见问题\"},\"126\":{\"h\":\"声明的http接口为什么要继承IHttpApi接口？\",\"t\":[\"一是为了方便WebApiClient库自动生成接口的代理类，相当用于标记作用；二是继承了IHttpApi接口，http接口代理类实例就有Dispose方法。\"]},\"127\":{\"h\":\"http接口可以继承其它http接口吗？\",\"t\":[\"可以继承，父接口的相关方法也都当作Api方法，需要注意的是，父接口的方法的接口级特性将失效，而是应用了子接口的接口级特性，所以为了方便理解，最好不要这样继承。\"]},\"128\":{\"h\":\"使用 代理特性前，怎么验证代理的有效性？\",\"t\":[\"可以使用ProxyValidator对象的Validate方法来验证代理的有效性。\"]},\"129\":{\"h\":\"为什么不支持将接口方法的返回类型声明为 对象而必须为 或 ？\",\"t\":[\"这个是设计的原则，因为不管开发者关不关注返回值，Http请求要么有响应要么抛出异常，如果你不关注结果的解析，可以声明为Task<HttpResponseMessage>而不去解析HttpResponseMessage就可以。\"]},\"130\":{\"h\":\"使用WebApiClient怎么下载文件？\",\"t\":[\"你应该将接口返回类型声明为ITask<HttpResponseFile>。\"]},\"131\":{\"h\":\"接口返回类型除了声明为 ，还可以声明哪些抽象的返回类型？\",\"t\":[\"还可以声明为ITask<string>、ITask<Stream>和ITask<Byte[]>，这些都是抽象的返回类型。\"]},\"132\":{\"h\":\"接口声明的参数可以为Object或某些类型的基类吗？\",\"t\":[\"可以这样声明，数据还是子类的，但xml序列化会有问题，一般情况下，建议严格按照服务器的具体类型来声明参数。\"]},\"133\":{\"h\":\"WebApiClient怎么使用同步请求\",\"t\":[\"WebApiClient是对HttpClient的封包，HttpClient没有提供相关的同步请求方法，所以WebApiClient也没有同步请求，不正确的阻塞ITask和Task返回值，在一些环境下很容易死锁。\"]},\"134\":{\"h\":\"概览\",\"t\":[\"注意\",\"你正在浏览的部分是老版本WebApiClient.JIT、WebApiClient.AOT的文档。 它将不会有新的功能更新，即使有bug我们也不能保证快速修复。 我们建议您尽快迁移到新的版本，更现代的WebApiClientCore。\"]},\"135\":{\"h\":\"WebApiClient.JIT\",\"t\":[\"在运行时使用Emit创建Http请求接口的代理类，HttpApiClient.Create()时，在新的程序集创建了TInterface的代理类，类名与TInterface相同，命名空间也相同，由于代理类和TInterface接口不在同一程序集，所以要求TInterface为public。\",\"可以在项目中直接引用WebApiClient.JIT.dll就能使用；\",\"不适用于不支持JIT技术的平台(IOS、UWP)；\",\"接口要求为public；\"]},\"136\":{\"h\":\"WebApiClient.AOT\",\"t\":[\"在编译过程中使用Mono.Cecil修改编译得到的程序集，向其插入Http请求接口的代理类IL指令，这一步是在AOT编译阶段之前完成。代理类型所在的程序集、模块、命名空间与接口类型的一样，其名称为$前缀的接口类型名称，使用反编译工具查看项目编译后的程序集可以看到这些代理类。\",\"项目必须使用nuget安装WebApiClient.AOT才能正常使用；\",\"没有JIT，支持的平台广泛；\",\"接口不要求为public，可以嵌套在类里面；\"]},\"137\":{\"h\":\"👯 Contributors (贡献者)\"},\"138\":{\"h\":\"感谢以下贡献者添砖加瓦，完善项目\"},\"139\":{\"h\":\"感谢以下贡献者锦上添花，贡献文档\"},\"140\":{\"h\":\"☕为我们加油\"},\"141\":{\"h\":\"如果您觉得WebApiClient对你有所帮助，就请支持一下我们吧\",\"t\":[\"支持作者再出精品\",\"感谢文档维护\"]},\"142\":{\"h\":\"Nuget\",\"t\":[\"包名\",\"Nuget\",\"描述\",\"WebApiClientCore\",\"基础包\",\"WebApiClientCore.Extensions.OAuths\",\"OAuth2 与 token 管理扩展包\",\"WebApiClientCore.Extensions.NewtonsoftJson\",\"Newtonsoft 的 Json.NET 扩展包\",\"WebApiClientCore.Extensions.JsonRpc\",\"JsonRpc 调用扩展包\",\"WebApiClientCore.OpenApi.SourceGenerator\",\"将本地或远程 OpenApi 文档解析生成 WebApiClientCore 接口代码的 dotnet tool\"]},\"143\":{\"h\":\"\",\"t\":[\" BenchmarkDotNet v0.13.12, CentOS Linux 7 (Core) Intel Xeon CPU E5-2650 v2 2.60GHz, 2 CPU, 32 logical and 16 physical cores [Host] : .NET 8.0.4, X64 NativeAOT AVX Job=InProcess Toolchain=InProcessEmitToolchain\",\"Method\",\"Mean\",\"Error\",\"StdDev\",\"Ratio\",\"RatioSD\",\"Gen0\",\"Allocated\",\"Alloc Ratio\",\"WebApiClientCore_GetAsync\",\"5.558 μs\",\"0.1094 μs\",\"0.1384 μs\",\"1.00\",\"0.00\",\"0.3357\",\"3.45 KB\",\"1.00\",\"Refit_GetAsync\",\"14.494 μs\",\"0.2764 μs\",\"0.3394 μs\",\"2.61\",\"0.10\",\"0.4883\",\"5.18 KB\",\"1.50\"]},\"144\":{\"h\":\"\",\"t\":[\" BenchmarkDotNet v0.13.12, CentOS Linux 7 (Core) Intel Xeon CPU E5-2650 v2 2.60GHz, 2 CPU, 32 logical and 16 physical cores [Host] : .NET 8.0.4, X64 NativeAOT AVX Job=InProcess Toolchain=InProcessEmitToolchain\",\"Method\",\"Mean\",\"Error\",\"StdDev\",\"Ratio\",\"RatioSD\",\"Gen0\",\"Allocated\",\"Alloc Ratio\",\"WebApiClientCore_GetJsonAsync\",\"11.31 μs\",\"0.225 μs\",\"0.322 μs\",\"1.00\",\"0.00\",\"0.4120\",\"4.3 KB\",\"1.00\",\"Refit_GetJsonAsync\",\"29.03 μs\",\"0.575 μs\",\"0.788 μs\",\"2.57\",\"0.09\",\"0.5493\",\"5.67 KB\",\"1.32\"]},\"145\":{\"h\":\"\",\"t\":[\" BenchmarkDotNet v0.13.12, CentOS Linux 7 (Core) Intel Xeon CPU E5-2650 v2 2.60GHz, 2 CPU, 32 logical and 16 physical cores [Host] : .NET 8.0.4, X64 NativeAOT AVX Job=InProcess Toolchain=InProcessEmitToolchain\",\"Method\",\"Mean\",\"Error\",\"StdDev\",\"Ratio\",\"RatioSD\",\"Gen0\",\"Allocated\",\"Alloc Ratio\",\"WebApiClientCore_PostJsonAsync\",\"11.26 μs\",\"0.221 μs\",\"0.331 μs\",\"1.00\",\"0.00\",\"0.4120\",\"4.23 KB\",\"1.00\",\"Refit_PostJsonAsync\",\"26.16 μs\",\"0.510 μs\",\"0.663 μs\",\"2.32\",\"0.08\",\"0.5798\",\"6.08 KB\",\"1.44\"]},\"146\":{\"h\":\"\",\"t\":[\" BenchmarkDotNet v0.13.12, CentOS Linux 7 (Core) Intel Xeon CPU E5-2650 v2 2.60GHz, 2 CPU, 32 logical and 16 physical cores [Host] : .NET 8.0.4, X64 NativeAOT AVX Job=InProcess Toolchain=InProcessEmitToolchain\",\"Method\",\"Mean\",\"Error\",\"StdDev\",\"Median\",\"Ratio\",\"RatioSD\",\"Gen0\",\"Gen1\",\"Allocated\",\"Alloc Ratio\",\"WebApiClientCore_PostXmlAsync\",\"47.97 μs\",\"0.943 μs\",\"2.009 μs\",\"47.11 μs\",\"1.00\",\"0.00\",\"3.4180\",\"0.1221\",\"35.48 KB\",\"1.00\",\"Refit_PostXmlAsync\",\"57.06 μs\",\"0.948 μs\",\"0.740 μs\",\"56.87 μs\",\"1.21\",\"0.02\",\"14.0381\",\"2.3193\",\"144.38 KB\",\"4.07\"]},\"147\":{\"h\":\"\",\"t\":[\" BenchmarkDotNet v0.13.12, CentOS Linux 7 (Core) Intel Xeon CPU E5-2650 v2 2.60GHz, 2 CPU, 32 logical and 16 physical cores [Host] : .NET 8.0.4, X64 NativeAOT AVX Job=InProcess Toolchain=InProcessEmitToolchain\",\"Method\",\"Mean\",\"Error\",\"StdDev\",\"Median\",\"Ratio\",\"RatioSD\",\"Gen0\",\"Allocated\",\"Alloc Ratio\",\"WebApiClientCore_PutFormAsync\",\"19.94 μs\",\"0.394 μs\",\"0.679 μs\",\"19.62 μs\",\"1.00\",\"0.00\",\"0.5493\",\"5.7 KB\",\"1.00\",\"Refit_PutFormAsync\",\"79.90 μs\",\"1.551 μs\",\"2.321 μs\",\"78.62 μs\",\"3.98\",\"0.17\",\"1.0986\",\"11.57 KB\",\"2.03\"]},\"148\":{\"h\":\"有依赖注入的环境\"},\"149\":{\"h\":\"Asp.net core 2.1+\",\"t\":[\"接口声明\",\"public interface IMyWebApi : IHttpApi { [HttpGet(\\\"user/{id}\\\")] ITask<UserInfo> GetUserAsync(string id); }\",\"Startup.cs配置依赖注入\",\"public void ConfigureServices(IServiceCollection services) { services.AddHttpApi<IMyWebApi>(); services.ConfigureHttpApi<IMyWebApi>(o=> { o.HttpHost = new Uri(\\\"http://localhost:9999/\\\"); ... }); }\",\"Controller代码\",\"public class HomeController : Controller { public async Task<UserInfo> Index([FromServices]IMyWebApi myWebApi) { return await myWebApi.GetUserAsync(\\\"id001\\\"); } }\"]},\"150\":{\"h\":\"Asp.net MVC + Autofac\",\"t\":[\"接口声明\",\"public interface IMyWebApi : IHttpApi { [HttpGet(\\\"user/{id}\\\")] ITask<UserInfo> GetUserAsync(string id); }\",\"Global.asax.cs Application_Start\",\"var builder = new ContainerBuilder(); builder.RegisterControllers(Assembly.GetExecutingAssembly()).PropertiesAutowired(); builder.Register(_ => new HttpApiFactory<IMyWebApi>() .ConfigureHttpApiConfig(c => { c.HttpHost = new Uri(\\\"http://localhost:9999/\\\"); c.FormatOptions.DateTimeFormat = DateTimeFormats.ISO8601_WithMillisecond; })) .As<IHttpApiFactory<IMyWebApi>>() .SingleInstance(); builder.Register(c => c.Resolve<IHttpApiFactory<IMyWebApi>>().CreateHttpApi()) .As<IMyWebApi>() .InstancePerHttpRequest(); DependencyResolver.SetResolver(new AutofacDependencyResolver(builder.Build()));\",\"Controller\",\"public class HomeController : Controller { public IMyWebApi MyWebApi { get; set; } public async Task<ActionResult> Index() { var user = await this.MyWebApi.GetUserAsync(\\\"id001\\\"); return View(user); } }\"]},\"151\":{\"h\":\"没有依赖注入的环境\"},\"152\":{\"h\":\"使用HttpApi.Register/Resolve\",\"t\":[\"接口声明\",\"public interface IMyWebApi : IHttpApi { [HttpGet(\\\"user/{id}\\\")] ITask<UserInfo> GetUserAsync(string id); }\",\"初始化代码（只能调用一次）\",\"HttpApi.Register<IMyWebApi>().ConfigureHttpApiConfig(c => { // 可以替换的序列化工具 c.JsonFormatter = null; c.XmlFormatter = null; c.KeyValueFormatter = null; // 参数验证和返回值验证，使用System.ComponentModel.DataAnnotations验证特性 c.UseParameterPropertyValidate = false; c.UseReturnValuePropertyValidate = false; // 请求主机和HttpClient相关配置 c.HttpHost = new Uri(\\\"http://localhost:9999/\\\"); c.HttpClient.Timeout = TimeSpan.FromMinutes(2d); // 格式相关配置 c.FormatOptions.UseCamelCase = true; c.FormatOptions.DateTimeFormat = DateTimeFormats.ISO8601_WithMillisecond; // 响应缓存提供者配置，配合[CacheAttribute]来使用 c.ResponseCacheProvider = null; // 服务提供者，实例一般由DI创建得到 // 对于Asp.net core，此ServiceProvider应该为请求时创建的ServiceProvider，而不是ConfigureServices()创建的根ServiceProvider c.ServiceProvider = null; // 日志工厂，可以自主创建并赋值，如果保留为null，获取其实例时则从ServiceProvider获取 c.LoggerFactory = null; });\",\"调用http请求代码\",\"var myWebApi = HttpApi.Resolve<IMyWebApi>(); var user = await myWebApi.GetUserAsync(\\\"id001\\\");\",\"使用Register/Resolve的好处是在入口处只Register一次IMyWebApi，由HttpApiFactory自动接理IMyWebApi的生命周期管理。在使用中，不用处理myWebApi实例的释放（手动Dispose也不会释放），在一定的时间内都是获取到同一个myWebApi实例，当实例生命超过配置的周期时，自动被跟踪释放，并提供返回下一个一样配置的myWebApi实例。\"]},\"153\":{\"h\":\"特性的范围和优先级\"},\"154\":{\"h\":\"特性的范围\",\"t\":[\"有些特性比如[Header]，可以修饰于接口、方法和参数，使用不同的构造器和修饰于不同的地方产生的含义和结果是有点差别的：\",\"修饰接口时，表示接口下的所有方法在请求前都会添加这个请求头； 修饰方法时，表示此方法在请求前添加这个请求头； 修饰参数时，表示参数的值将做为请求头的值，由调用者动态传入；\"]},\"155\":{\"h\":\"特性的优先级\",\"t\":[\"方法级比接口级优先级高； AllowMultiple为true时，方法级和接口级都生效； AllowMultiple为false时，方法级的生效，接口级的无效；\"]},\"156\":{\"h\":\"完整接口声明示例\",\"t\":[\"本示例的接口为swagger官方的v2/swagger.json，参见swagger官网接口，对于swagger文档，可以使用WebApiClient.Tools.Swagger工具生成客户端代码。\"]},\"157\":{\"h\":\"IPetApi\",\"t\":[\"using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.Net.Http; using System.Threading; using System.Threading.Tasks; using WebApiClient; using WebApiClient.Attributes; using WebApiClient.DataAnnotations; using WebApiClient.Parameterables; namespace petstore.swagger { /// <summary> /// Everything about your Pets /// </summary> [TraceFilter] [HttpHost(\\\"https://petstore.swagger.io/v2/\\\")] public interface IPetApi : IHttpApi { /// <summary> /// Add a new pet to the store /// </summary> /// <param name=\\\"body\\\">Pet object that needs to be added to the store</param> [HttpPost(\\\"pet\\\")] ITask<HttpResponseMessage> AddPetAsync([Required] [JsonContent] Pet body); /// <summary> /// Update an existing pet /// </summary> /// <param name=\\\"body\\\">Pet object that needs to be added to the store</param> [HttpPut(\\\"pet\\\")] ITask<HttpResponseMessage> UpdatePetAsync([Required] [JsonContent] Pet body); /// <summary> /// Finds Pets by status /// </summary> /// <param name=\\\"status\\\">Status values that need to be considered for filter</param> /// <returns>successful operation</returns> [HttpGet(\\\"pet/findByStatus\\\")] ITask<List<Pet>> FindPetsByStatusAsync([Required] IEnumerable<Anonymous> status); /// <summary> /// Finds Pets by tags /// </summary> /// <param name=\\\"tags\\\">Tags to filter by</param> /// <returns>successful operation</returns> [Obsolete] [HttpGet(\\\"pet/findByTags\\\")] ITask<List<Pet>> FindPetsByTagsAsync([Required] IEnumerable<string> tags); /// <summary> /// Find pet by ID /// </summary> /// <param name=\\\"petId\\\">ID of pet to return</param> /// <returns>successful operation</returns> [HttpGet(\\\"pet/{petId}\\\")] ITask<Pet> GetPetByIdAsync([Required] long petId); /// <summary> /// Updates a pet in the store with form data /// </summary> /// <param name=\\\"petId\\\">ID of pet that needs to be updated</param> /// <param name=\\\"name\\\">Updated name of the pet</param> /// <param name=\\\"status\\\">Updated status of the pet</param> [HttpPost(\\\"pet/{petId}\\\")] ITask<HttpResponseMessage> UpdatePetWithFormAsync([Required] long petId, [FormContent] string name, [FormContent] string status); /// <summary> /// Deletes a pet /// </summary> /// <param name=\\\"api_key\\\"></param> /// <param name=\\\"petId\\\">Pet id to delete</param> [HttpDelete(\\\"pet/{petId}\\\")] ITask<HttpResponseMessage> DeletePetAsync([Header(\\\"api_key\\\")] string api_key, [Required] long petId); /// <summary> /// uploads an image /// </summary> /// <param name=\\\"petId\\\">ID of pet to update</param> /// <param name=\\\"additionalMetadata\\\">Additional data to pass to server</param> /// <param name=\\\"file\\\">file to upload</param> /// <returns>successful operation</returns> [TraceFilter(Enable = false)] [HttpPost(\\\"pet/{petId}/uploadImage\\\")] ITask<ApiResponse> UploadFileAsync([Required] long petId, [MulitpartContent] string additionalMetadata, MulitpartFile file); } }\"]},\"158\":{\"h\":\"IUserApi\",\"t\":[\"using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.Net.Http; using System.Threading; using System.Threading.Tasks; using WebApiClient; using WebApiClient.Attributes; using WebApiClient.DataAnnotations; using WebApiClient.Parameterables; namespace petstore.swagger { /// <summary> /// Operations about user /// </summary> [TraceFilter] [HttpHost(\\\"https://petstore.swagger.io/v2/\\\")] public interface IUserApi : IHttpApi { /// <summary> /// Create user /// </summary> /// <param name=\\\"body\\\">Created user object</param> /// <returns>successful operation</returns> [HttpPost(\\\"user\\\")] ITask<HttpResponseMessage> CreateUserAsync([Required] [JsonContent] User body); /// <summary> /// Creates list of users with given input array /// </summary> /// <param name=\\\"body\\\">List of user object</param> /// <returns>successful operation</returns> [HttpPost(\\\"user/createWithArray\\\")] ITask<HttpResponseMessage> CreateUsersWithArrayInputAsync([Required] [JsonContent] IEnumerable<User> body); /// <summary> /// Creates list of users with given input array /// </summary> /// <param name=\\\"body\\\">List of user object</param> /// <returns>successful operation</returns> [HttpPost(\\\"user/createWithList\\\")] ITask<HttpResponseMessage> CreateUsersWithListInputAsync([Required] [JsonContent] IEnumerable<User> body); /// <summary> /// Logs user into the system /// </summary> /// <param name=\\\"username\\\">The user name for login</param> /// <param name=\\\"password\\\">The password for login in clear text</param> /// <returns>successful operation</returns> [HttpGet(\\\"user/login\\\")] ITask<string> LoginUserAsync([Required] string username, [Required] string password); /// <summary> /// Logs out current logged in user session /// </summary> /// <returns>successful operation</returns> [HttpGet(\\\"user/logout\\\")] ITask<HttpResponseMessage> LogoutUserAsync(); /// <summary> /// Get user by user name /// </summary> /// <param name=\\\"username\\\">The name that needs to be fetched. Use user1 for testing.</param> /// <returns>successful operation</returns> [HttpGet(\\\"user/{username}\\\")] ITask<User> GetUserByNameAsync([Required] string username); /// <summary> /// Updated user /// </summary> /// <param name=\\\"username\\\">name that need to be updated</param> /// <param name=\\\"body\\\">Updated user object</param> [HttpPut(\\\"user/{username}\\\")] ITask<HttpResponseMessage> UpdateUserAsync([Required] string username, [Required] [JsonContent] User body); /// <summary> /// Delete user /// </summary> /// <param name=\\\"username\\\">The name that needs to be deleted</param> [HttpDelete(\\\"user/{username}\\\")] ITask<HttpResponseMessage> DeleteUserAsync([Required] string username); } }\"]},\"159\":{\"h\":\"GET/HEAD请求\"},\"160\":{\"h\":\"Get请求简单例子\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET <http://www.mywebapi.com/webapi/user?account=laojiu> [HttpGet(\\\"http://www.mywebapi.com/webapi/user\\\")] ITask<HttpResponseMessage> GetUserByAccountAsync(string account); } var api = HttpApi.Create<IMyWebApi>(); var response = await api.GetUserByAccountAsync(\\\"laojiu\\\");\"]},\"161\":{\"h\":\"使用 特性\",\"t\":[\" [HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] ITask<HttpResponseMessage> GetUserByAccountAsync(string account); }\",\"如果接口IMyWebApi有多个方法且都指向同一服务器，可以将请求的域名抽出来放到HttpHost特性。\"]},\"162\":{\"h\":\"响应的json/xml内容转换为强类型模型\"},\"163\":{\"h\":\"隐式转换为强类型模型\",\"t\":[\" [HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserByAccountAsync(string account); }\",\"当方法的返回数据是UserInfo类型的json或xml文本，且响应的Content-Type为application/json或application/xml值时，方法的原有返回类型ITask(Of HttpResponseMessage)就可以声明为ITask(Of UserInfo)。\"]},\"164\":{\"h\":\"显式转换为强类型模型\",\"t\":[\"[HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] [JsonReturn] // 指明使用Json处理返回值为UserInfo类型 ITask<UserInfo> GetUserByAccountAsync(string account); }\",\"当方法的返回数据是UserInfo类型的json或xml文本，但响应的Content-Type可能不是期望的application/json或application/xml值时，就需要显式声明[JsonReturn]或[XmlReturn]特性。\"]},\"165\":{\"h\":\"请求取消令牌参数CancellationToken\",\"t\":[\"[HttpHost(\\\"http://www.mywebapi.com/\\\")] public interface IMyWebApi : IHttpApi { // GET /webapi/user?account=laojiu [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserByAccountAsync(string account, CancellationToken token); }\",\"CancellationToken.None表示永不取消；创建一个CancellationTokenSource，可以提供一个CancellationToken。\"]},\"166\":{\"h\":\"参数及属性注解\",\"t\":[\"这些注解特性的命名空间在WebApiClient.DataAnnotations，用于影响参数的序列化行为。\"]},\"167\":{\"h\":\"参数别名\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET <http://www.mywebapi.com/webapi/user?_name=laojiu> [HttpGet(\\\"http://www.mywebapi.com/webapi/user\\\")] ITask<string> GetUserByAccountAsync( [AliasAs(\\\"_name\\\")] string account); }\"]},\"168\":{\"h\":\"参数模型属性注解\",\"t\":[\"public class UserInfo { public string Account { get; set; } // 别名 [AliasAs(\\\"a_password\\\")] public string Password { get; set; } // 时间格式，优先级最高 [DateTimeFormat(\\\"yyyy-MM-dd\\\")] [IgnoreWhenNull] // 值为null则忽略序列化 public DateTime? BirthDay { get; set; } // 忽略序列化 [IgnoreSerialized] public string Email { get; set; } // 时间格式 [DateTimeFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")] public DateTime CreateTime { get; set; } }\"]},\"169\":{\"h\":\"参数及参数属性输入验证\",\"t\":[\"这些验证特性都有相同的基类ValidationAttribute，命名空间为System.ComponentModel.DataAnnotations，由netfx或corefx提供。\"]},\"170\":{\"h\":\"参数值的验证\",\"t\":[\"[HttpGet(\\\"webapi/user/GetById/{id}\\\")] ITask<HttpResponseMessage> GetByIdAsync( [Required, StringLength(10)] string id);\",\"id的参数要求必填且最大长度为10的字符串，否则抛出ValidationException的异常。\"]},\"171\":{\"h\":\"参数的属性值验证\",\"t\":[\"public class UserInfo { [Required] [StringLength(10, MinimumLength = 1)] public string Account { get; set; } [Required] [StringLength(10, MinimumLength = 6)] public string Password { get; set; } } [HttpPut(\\\"webapi/user/UpdateWithJson\\\")] ITask<UserInfo> UpdateWithJsonAsync( [JsonContent] UserInfo user);\",\"当user参数不为null的情况，就会验证它的Account和Password两个属性，HttpApiConfig有个UseParameterPropertyValidate属性，设置为false就禁用验证参数的属性值。\"]},\"172\":{\"h\":\"两者同时验证\",\"t\":[\"对于上节的例子，如果我们希望user参数值也不能为null，可以如下声明方法：\",\"[HttpPut(\\\"webapi/user/UpdateWithJson\\\")] ITask<UserInfo> UpdateWithJsonAsync( [Required, JsonContent] UserInfo user);\"]},\"173\":{\"h\":\"PATCH请求\",\"t\":[\"json patch是为客户端能够局部更新服务端已存在的资源而设计的一种标准交互，在RFC6902里有详细的介绍json patch，通俗来讲有以下几个要点：\",\"使用HTTP PATCH请求方法； 请求body为描述多个opration的数据json内容； 请求的Content-Type为application/json-patch+json；\"]},\"174\":{\"h\":\"WebApiClient例子\",\"t\":[\"public interface IMyWebApi : IHttpApi { [HttpPatch(\\\"webapi/user\\\")] Task<UserInfo> PatchAsync(string id, JsonPatchDocument<UserInfo> doc); } var doc = new JsonPatchDocument<UserInfo>(); doc.Replace(item => item.Account, \\\"laojiu\\\"); doc.Replace(item => item.Email, \\\"laojiu@qq.com\\\"); var api = HttpApi.Create<IMyWebApi>(); await api.PatchAsync(\\\"id001\\\", doc);\"]},\"175\":{\"h\":\"Asp.net 服务端例子\",\"t\":[\"[HttpPatch] public async Task<UserInfo> Patch(string id, [FromBody] JsonPatchDocument<UserInfo> doc) { // 此处user是从db查询获得 var user = await GetUserInfoFromDbAsync(id); doc.ApplyTo(user); return user; }\"]},\"176\":{\"h\":\"POST/PUT/DELETE请求\"},\"177\":{\"h\":\"使用Json或Xml提交\",\"t\":[\"使用[XmlContent]或[Parameter(Kind.XmlBody)]修饰强类型模型参数，表示提交xml 使用[JsonContent]或[Parameter(Kind.JsonBody)]修饰强类型模型参数，表示提交json\",\"// POST webapi/user // Body user的json文本 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> AddUserWithJsonAsync([JsonContent] UserInfo user); // PUT webapi/user // Body user的xml文本 [HttpPut(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithXmlAsync([XmlContent] UserInfo user);\"]},\"178\":{\"h\":\"使用x-www-form-urlencoded提交\",\"t\":[\"使用[FormContent]或[Parameter(Kind.Form)]修饰强类型模型参数 使用[FormField]或[Parameter(Kind.Form)]修饰简单类型参数\",\"// POST webapi/user // Body Account=laojiu&Password=123456 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( [FormContent] UserInfo user); // POST webapi/user // Body Account=laojiu&Password=123456&fieldX=xxx [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( [FormContent] UserInfo user, [FormField] string fieldX); // POST webapi/user // Body Account=laojiu&Password=123456&fieldX=xxx [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserAsync( [Parameter(Kind.Form)] UserInfo user, [Parameter(Kind.Form)] string fieldX);\"]},\"179\":{\"h\":\"使用multipart/form-data提交\",\"t\":[\"使用[MulitpartContent]或[Parameter(Kind.FormData)]修饰强类型模型参数 使用[MulitpartText]或[Parameter(Kind.FormData)]修饰简单类型参数 使用MulitpartFile类型作为提交的文件\",\"// POST webapi/user [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithMulitpartAsync( [MulitpartContent] UserInfo user); // POST webapi/user [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithMulitpartAsync( [MulitpartContent] UserInfo user, [MulitpartText] string nickName, MulitpartFile file); // POST webapi/user [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithMulitpartAsync( [Parameter(Kind.FormData)] UserInfo user, [Parameter(Kind.FormData)] string nickName, MulitpartFile file);\"]},\"180\":{\"h\":\"使用具体的HttpContent类型提交\",\"t\":[\"// POST webapi/user // Body Account=laojiu&Password=123456 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( FormUrlEncodedContent user); // POST webapi/user // Body Account=laojiu&Password=123456&age=18 [HttpPost(\\\"webapi/user\\\")] ITask<UserInfo> UpdateUserWithFormAsync( FormUrlEncodedContent user, [FormField] int age);\",\"如果参数是类型是HttpContent类型的子类，如StringContent、ByteArrayContent、StreamContent、FormUrlEncodedContent等等，则可以直接做为参数，但是必须放在其它参数的前面\"]},\"181\":{\"h\":\"请求URI\"},\"182\":{\"h\":\"URI的格式\",\"t\":[\"无论是GET还是POST等哪种http请求方法，都遵循如下的URI格式： {Scheme}😕/{UserName}:{Password}@{Host}:{Port}{Path}{Query}{Fragment} 例如：<http://account:password@www.baidu.com/path1/?p1=abc#tag>\"]},\"183\":{\"h\":\"动态PATH\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET <http://www.webapiclient.com/laojiu> [HttpGet(\\\"http://www.webapiclient.com/{account}\\\"] ITask<string> GetUserByAccountAsync(string account); }\",\"某些接口方法将路径的一个分段语意化，比如GET <http://www.webapiclient.com/{account}，这里不同的{account}代表不同账号下的个人信息，使用{参数名}声明路径，在请求前会自动从参数（或参数模型的同名属性）取值替换>。\"]},\"184\":{\"h\":\"动态URI\",\"t\":[\"public interface IMyWebApi : IHttpApi { // GET {URI} [HttpGet] ITask<string> GetUserByAccountAsync([Uri] string url); // GET {URI}?account=laojiu [HttpGet] ITask<string> GetUserByAccountAsync([Uri] string url, string account); }\",\"如果请求URI在运行时才确定，可以将请求URI作为一个参数，使用[Uri]特性修饰这个参数并作为第一个参数。\"]},\"185\":{\"h\":\"Query参数\"},\"186\":{\"h\":\"多个query参数平铺\",\"t\":[\"// GET /webapi/user?account=laojiu&password=123456 [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync(string account, string password);\"]},\"187\":{\"h\":\"多个query参数合并到模型\",\"t\":[\"public class LoginInfo { public string Account { get; set; } public string Password { get; set; } } // GET /webapi/user?account=laojiu&password=123456 [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync(LoginInfo loginInfo);\"]},\"188\":{\"h\":\"多个query参数平铺+部分合并到模型\",\"t\":[\"public class LoginInfo { public string Account { get; set; } public string Password { get; set; } } // GET /webapi/user?account=laojiu&password=123456&role=admin [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync(LoginInfo loginInfo, string role);\"]},\"189\":{\"h\":\"显式声明 特性\",\"t\":[\"// GET /webapi/user?account=laojiu&password=123456&role=admin [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync( [PathQuery]LoginInfo loginInfo, [PathQuery]string role);\",\"对于没有任何特性修饰的每个参数，都默认被[PathQuery]修饰，表示做为请求路径或请求参数处理，[PathQuery]特性可以设置Encoding、IgnoreWhenNull和DateTimeFormat多个属性。\"]},\"190\":{\"h\":\"使用 特性\",\"t\":[\"// GET /webapi/user?account=laojiu&password=123456&role=admin [HttpGet(\\\"webapi/user\\\")] ITask<UserInfo> GetUserAsync( [Parameter(Kind.Query)]LoginInfo loginInfo, [Parameter(Kind.Query)]string role);\"]},\"191\":{\"h\":\"3、自定义特性\",\"t\":[\"WebApiClient内置很多特性，包含接口级、方法级、参数级的，他们分别是实现了IApiActionAttribute接口、IApiActionFilterAttribute接口、IApiParameterAttribute接口、IApiParameterable接口和IApiReturnAttribute接口的一个或多个接口。\"]},\"192\":{\"h\":\"3.1 自定义IApiParameterAttribute\",\"t\":[\"例如服务端要求使用x-www-form-urlencoded提交，由于接口设计不合理，目前要求是提交：fieldX= {X}的json文本&fieldY={Y}的json文本 这里{X}和{Y}都是一个多字段的Model，我们对应的接口是这样设计的：\",\"[HttpHost(\\\"/upload\\\")] ITask<bool> UploadAsync( [FormField][AliasAs(\\\"fieldX\\\")] string xJson, [FormField][AliasAs(\\\"fieldY\\\")] string yJson);\",\"显然，我们接口参数为string类型的范围太广，没有约束性，我们希望是这样子\",\"[HttpHost(\\\"/upload\\\")] ITask<bool> UploadAsync([FormFieldJson] X fieldX, [FormFieldJson] Y fieldY);\",\"[FormFieldJson]将参数值序列化为Json并做为表单的一个字段内容\",\"[AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)] class FormFieldJson: Attribute, IApiParameterAttribute { public async Task BeforeRequestAsync(ApiActionContext context, ApiParameterDescriptor parameter) { var options = context.HttpApiConfig.FormatOptions; var json = context.HttpApiConfig.JsonFormatter.Serialize(parameter.Value, options); var fieldName = parameter.Name; await context.RequestMessage.AddFormFieldAsync(fieldName, json); } }\"]},\"193\":{\"h\":\"4、异常处理和重试策略\"},\"194\":{\"h\":\"4.1 try catch异常处理\",\"t\":[\"try { var user = await userApi.GetByIdAsync(\\\"id001\\\"); ... } catch (HttpStatusFailureException ex) { var error = ex.ReadAsAsync<ErrorModel>(); ... } catch (HttpApiException ex) { ... }\"]},\"195\":{\"h\":\"4.2 Retry重试策略\",\"t\":[\"try { var user1 = await userApi .GetByIdAsync(\\\"id001\\\") .Retry(3, i => TimeSpan.FromSeconds(i)) .WhenCatch<HttpStatusFailureException>(); ... } catch (HttpStatusFailureException ex) { var error = ex.ReadAsAsync<ErrorModel>(); ... } catch (HttpApiException ex) { ... } catch(Exception ex) { ... }\"]},\"196\":{\"h\":\"4.3 RX扩展\",\"t\":[\"在一些场景中，你可能不需要使用async/await异步编程方式，WebApiClient提供了Task对象转换为IObservable对象的扩展，使用方式如下：\",\"var unSubscriber = userApi.GetByIdAsync(\\\"id001\\\") .Retry(3, i => TimeSpan.FromSeconds(i)) .WhenCatch<HttpStatusFailureException>(); .ToObservable().Subscribe(result => { ... }, ex => { ... });\"]},\"197\":{\"h\":\"1、过滤器\",\"t\":[\"过滤器的接口是IApiActionFilterAttribute，WebApiClient提供默认ApiActionFilterAttribute抽象基类，比从IApiActionFilterAttribute实现一个过滤器要简单得多。\"]},\"198\":{\"h\":\"1.1 TraceFilterAttribute\",\"t\":[\"这是一个用于调试追踪的过滤器，可以将请求与响应内容写入指定输出目标。如果输出目标是LoggerFactory，需要在HttpApiConfig配置LoggerFactory实例或ServiceProvider实例。\",\"接口或方法使用[TraceFilter]\",\"[TraceFilter(OutputTarget = OutputTarget.Console)] // 输出到控制台窗口 public interface IUserApi : IHttpApi { // GET {url}?account={account}&password={password}&something={something} [HttpGet] [Timeout(10 * 1000)] // 10s超时 Task<string> GetAboutAsync( [Url] string url, UserInfo user, string something); }\",\"请求之后输出请求信息\",\"var userApi = HttpApi.Resolve<IUserApi>(); var about = await userApi.GetAboutAsync(\\\"webapi/user/about\\\", user, \\\"somevalue\\\");\",\"IUserApi.GetAboutAsync [REQUEST] 2018-10-08 23:55:25.775 GET /webapi/user/about?Account=laojiu&password=123456&BirthDay=2018-01-01&Gender=1&something=somevalue HTTP/1.1 Host: localhost:9999 [RESPONSE] 2018-10-08 23:55:27.047 This is from NetworkSocket.Http [TIMESPAN] 00:00:01.2722715\"]},\"199\":{\"h\":\"1.2 自定义过滤器\",\"t\":[\"[SignFilter] public interface IUserApi : IHttpApi { ... } class SignFilter : ApiActionFilterAttribute { public override Task OnBeginRequestAsync(ApiActionContext context) { var sign = DateTime.Now.Ticks.ToString(); context.RequestMessage.AddUrlQuery(\\\"sign\\\", sign); return base.OnBeginRequestAsync(context); } }\",\"当我们需要为每个请求的url额外的动态添加一个叫sign的参数，这个sign可能和配置文件等有关系，而且每次都需要计算，就可以如上设计与应用一个SignFilter。\"]},\"200\":{\"h\":\"2、全局过滤器\",\"t\":[\"全局过滤器的执行优先级比非全局过滤器的要高，且影响全部的请求方法，其要求实现IApiActionFilter接口，并实例化添加到HttpApiConfig的GlobalFilters。像[TraceFilter]等一般过滤器，也是实现了IApiActionFilter接口，也可以添加到GlobalFilters作为全局过滤器。\"]},\"201\":{\"h\":\"2.1 自定义全局过滤器\",\"t\":[\"class MyGlobalFilter : IApiActionFilter { public Task OnBeginRequestAsync(ApiActionContext context) { // do something return Task.CompletedTask; } public Task OnEndRequestAsync(ApiActionContext context) { // do something return Task.CompletedTask; } }\",\"添加到GlobalFilters\",\"var myFilter = new MyGlobalFilter(); HttpApi.Register<IUserApi>().ConfigureHttpApiConfig(c => { c.GlobalFilters.Add(myFilter); });\"]},\"202\":{\"h\":\"2.2 自定义OAuth2全局过滤器\",\"t\":[\"/// <summary> /// 表示提供client_credentials方式的token过滤器 /// </summary> public class TokenFilter : AuthTokenFilter { /// <summary> /// 获取提供Token获取的Url节点 /// </summary> public string TokenEndpoint { get; private set; } /// <summary> /// 获取client_id /// </summary> public string ClientId { get; private set; } /// <summary> /// 获取client_secret /// </summary> public string ClientSecret { get; private set; } /// <summary> /// OAuth授权的token过滤器 /// </summary> /// <param name=\\\"tokenEndPoint\\\">提供Token获取的Url节点</param> /// <param name=\\\"client_id\\\">客户端id</param> /// <param name=\\\"client_secret\\\">客户端密码</param> public TokenFilter(string tokenEndPoint, string client_id, string client_secret) { this.TokenEndpoint = tokenEndPoint ?? throw new ArgumentNullException(nameof(tokenEndPoint)); this.ClientId = client_id ?? throw new ArgumentNullException(nameof(client_id)); this.ClientSecret = client_secret ?? throw new ArgumentNullException(nameof(client_secret)); } /// <summary> /// 请求获取token /// 可以使用TokenClient来请求 /// </summary> /// <returns></returns> protected override async Task<TokenResult> RequestTokenResultAsync() { var tokenClient = new TokenClient(this.TokenEndpoint); return await tokenClient.RequestClientCredentialsAsync(this.ClientId, this.ClientSecret); } /// <summary> /// 请求刷新token /// 可以使用TokenClient来刷新 /// </summary> /// <param name=\\\"refresh_token\\\">获取token时返回的refresh_token</param> /// <returns></returns> protected override async Task<TokenResult> RequestRefreshTokenAsync(string refresh_token) { var tokenClient = new TokenClient(this.TokenEndpoint); return await tokenClient.RequestRefreshTokenAsync(this.ClientId, this.ClientSecret, refresh_token); } }\",\"添加到GlobalFilters\",\"var tokenFilter = new TokenFilter (\\\"http://localhost/tokenEndpoint\\\",\\\"client\\\",\\\"secret\\\"); HttpApi.Register<IUserApi>().ConfigureHttpApiConfig(c => { c.GlobalFilters.Add(tokenFilter); });\"]},\"203\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"204\":{\"h\":\"Reference\"},\"205\":{\"h\":\"Results\"},\"206\":{\"h\":\"Reference\"},\"207\":{\"h\":\"Advanced\"},\"208\":{\"h\":\"Basic\"},\"209\":{\"h\":\"Senior\"},\"210\":{\"h\":\"Advanced\"},\"211\":{\"h\":\"Basic\"},\"212\":{\"h\":\"Senior\"}},\"dirtCount\":0,\"index\":[[\"添加到globalfilters\",{\"1\":{\"201\":1,\"202\":1}}],[\"像\",{\"1\":{\"200\":1}}],[\"输出到控制台窗口\",{\"1\":{\"198\":1}}],[\"输出到本地文件\",{\"1\":{\"116\":1}}],[\"比从iapiactionfilterattribute实现一个过滤器要简单得多\",{\"1\":{\"197\":1}}],[\"比如get\",{\"1\":{\"183\":1}}],[\"比如将\",{\"1\":{\"99\":1}}],[\"比如人脸比对的接口\",{\"1\":{\"89\":1}}],[\"比如\",{\"1\":{\"85\":1}}],[\"过滤器的接口是iapiactionfilterattribute\",{\"1\":{\"197\":1}}],[\"过滤器\",{\"0\":{\"197\":1}}],[\"显然\",{\"1\":{\"192\":1}}],[\"显式声明\",{\"0\":{\"189\":1}}],[\"显式转换为强类型模型\",{\"0\":{\"164\":1}}],[\"目前要求是提交\",{\"1\":{\"192\":1}}],[\"他们分别是实现了iapiactionattribute接口\",{\"1\":{\"191\":1}}],[\"他们的\",{\"1\":{\"62\":1}}],[\"取值替换>\",{\"1\":{\"183\":1}}],[\"某些接口方法将路径的一个分段语意化\",{\"1\":{\"183\":1}}],[\"😕\",{\"1\":{\"182\":1}}],[\"👯\",{\"0\":{\"137\":1}}],[\"此处user是从db查询获得\",{\"1\":{\"175\":1}}],[\"此serviceprovider应该为请求时创建的serviceprovider\",{\"1\":{\"152\":1}}],[\"通俗来讲有以下几个要点\",{\"1\":{\"173\":1}}],[\"通过自定义\",{\"1\":{\"86\":1}}],[\"两者同时验证\",{\"0\":{\"172\":1}}],[\"设置为false就禁用验证参数的属性值\",{\"1\":{\"171\":1}}],[\"否则抛出validationexception的异常\",{\"1\":{\"170\":1}}],[\"忽略序列化\",{\"1\":{\"168\":1}}],[\"优先级最高\",{\"1\":{\"168\":1}}],[\"别名\",{\"1\":{\"168\":1}}],[\"指明使用json处理返回值为userinfo类型\",{\"1\":{\"164\":1}}],[\"隐式转换为强类型模型\",{\"0\":{\"163\":1}}],[\"自动被跟踪释放\",{\"1\":{\"152\":1}}],[\"自定义oauth2全局过滤器\",{\"0\":{\"202\":1}}],[\"自定义全局过滤器\",{\"0\":{\"201\":1}}],[\"自定义过滤器\",{\"0\":{\"199\":1}}],[\"自定义iapiparameterattribute\",{\"0\":{\"192\":1}}],[\"自定义特性\",{\"0\":{\"191\":1}}],[\"自定义自解释的参数类型\",{\"0\":{\"89\":1}}],[\"自定义缓存提供者\",{\"0\":{\"88\":1}}],[\"自定义日志输出目标\",{\"0\":{\"87\":1}}],[\"自定义响应内容解析特性\",{\"1\":{\"85\":1}}],[\"自定义请求内容处理特性\",{\"1\":{\"85\":1}}],[\"自定义请求内容与响应内容解析\",{\"0\":{\"85\":1}}],[\"自定义\",{\"0\":{\"74\":1,\"86\":1,\"102\":1,\"105\":1}}],[\"手动dispose也不会释放\",{\"1\":{\"152\":1}}],[\"由netfx或corefx提供\",{\"1\":{\"169\":1}}],[\"由调用者动态传入\",{\"1\":{\"154\":1}}],[\"由httpapifactory自动接理imywebapi的生命周期管理\",{\"1\":{\"152\":1}}],[\"由于接口设计不合理\",{\"1\":{\"192\":1}}],[\"由于代理类和tinterface接口不在同一程序集\",{\"1\":{\"135\":1}}],[\"由于该协议不是很流行\",{\"1\":{\"109\":1}}],[\"日志工厂\",{\"1\":{\"152\":1}}],[\"日志等重新设计过的\",{\"1\":{\"119\":1}}],[\"而且每次都需要计算\",{\"1\":{\"199\":1}}],[\"而不是configureservices\",{\"1\":{\"152\":1}}],[\"而是应用了子接口的接口级特性\",{\"1\":{\"127\":1}}],[\"而是使用\",{\"1\":{\"100\":1}}],[\"而是诸如\",{\"1\":{\"71\":1}}],[\"而是从\",{\"1\":{\"48\":1}}],[\"配合\",{\"1\":{\"152\":1}}],[\"配置\",{\"0\":{\"107\":1},\"1\":{\"86\":1,\"101\":1,\"105\":1,\"119\":1}}],[\"配置关闭数据验证功能\",{\"1\":{\"60\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"1\":1}}],[\"格式相关配置\",{\"1\":{\"152\":1}}],[\"初始化代码\",{\"1\":{\"152\":1}}],[\"没有约束性\",{\"1\":{\"192\":1}}],[\"没有依赖注入的环境\",{\"0\":{\"151\":1}}],[\"没有jit\",{\"1\":{\"136\":1}}],[\"9999\",{\"1\":{\"149\":1,\"150\":1,\"152\":1,\"198\":1}}],[\"98\",{\"1\":{\"147\":1}}],[\"90\",{\"1\":{\"147\":1}}],[\"94\",{\"1\":{\"147\":1}}],[\"948\",{\"1\":{\"146\":1}}],[\"943\",{\"1\":{\"146\":1}}],[\"97\",{\"1\":{\"146\":1}}],[\"μs\",{\"1\":{\"143\":6,\"144\":6,\"145\":6,\"146\":8,\"147\":8}}],[\"775\",{\"1\":{\"198\":1}}],[\"78\",{\"1\":{\"147\":1}}],[\"788\",{\"1\":{\"144\":1}}],[\"79\",{\"1\":{\"147\":1}}],[\"740\",{\"1\":{\"146\":1}}],[\"7\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":2}}],[\"感谢文档维护\",{\"1\":{\"141\":1}}],[\"感谢以下贡献者锦上添花\",{\"0\":{\"139\":1}}],[\"感谢以下贡献者添砖加瓦\",{\"0\":{\"138\":1}}],[\"☕为我们加油\",{\"0\":{\"140\":1}}],[\"贡献文档\",{\"0\":{\"139\":1}}],[\"贡献者\",{\"0\":{\"137\":1}}],[\"贡献代码\",{\"1\":{\"119\":1}}],[\"项目必须使用nuget安装webapiclient\",{\"1\":{\"136\":1}}],[\"项目主页配置\",{\"1\":{\"1\":1}}],[\"项目主页\",{\"0\":{\"1\":1}}],[\"向其插入http请求接口的代理类il指令\",{\"1\":{\"136\":1}}],[\"命名空间为system\",{\"1\":{\"169\":1}}],[\"命名空间与接口类型的一样\",{\"1\":{\"136\":1}}],[\"命名空间也相同\",{\"1\":{\"135\":1}}],[\"命令介绍\",{\"0\":{\"115\":1}}],[\"类名与tinterface相同\",{\"1\":{\"135\":1}}],[\"类型执行\",{\"1\":{\"84\":1}}],[\"类型的过滤器\",{\"1\":{\"84\":1}}],[\"类型的\",{\"1\":{\"69\":1}}],[\"类型的参数\",{\"1\":{\"51\":1}}],[\"类型\",{\"0\":{\"51\":1,\"52\":1,\"55\":1,\"56\":1},\"1\":{\"55\":1}}],[\"更现代的webapiclientcore\",{\"1\":{\"134\":1}}],[\"建议严格按照服务器的具体类型来声明参数\",{\"1\":{\"132\":1}}],[\"还可以声明为itask<string>\",{\"1\":{\"131\":1}}],[\"还可以声明哪些抽象的返回类型\",{\"0\":{\"131\":1}}],[\"还可以在接口注册时的配置添加\",{\"1\":{\"84\":1}}],[\"因为不管开发者关不关注返回值\",{\"1\":{\"129\":1}}],[\"怎么验证代理的有效性\",{\"0\":{\"128\":1}}],[\"父接口的方法的接口级特性将失效\",{\"1\":{\"127\":1}}],[\"父接口的相关方法也都当作api方法\",{\"1\":{\"127\":1}}],[\"需要在httpapiconfig配置loggerfactory实例或serviceprovider实例\",{\"1\":{\"198\":1}}],[\"需要注意的是\",{\"1\":{\"127\":1}}],[\"需要重写\",{\"1\":{\"99\":1,\"100\":1}}],[\"二是继承了ihttpapi接口\",{\"1\":{\"126\":1}}],[\"二进制内容\",{\"1\":{\"85\":1}}],[\"相当用于标记作用\",{\"1\":{\"126\":1}}],[\"复杂依赖项目可能编译不通过\",{\"1\":{\"123\":1}}],[\"包含接口级\",{\"1\":{\"191\":1}}],[\"包括ios和uwp\",{\"1\":{\"123\":1}}],[\"包名\",{\"1\":{\"6\":1,\"123\":1,\"142\":1}}],[\"稳定性好\",{\"1\":{\"123\":1}}],[\"适用于所有平台\",{\"1\":{\"123\":1}}],[\"适用于非aot编译的所有平台\",{\"1\":{\"123\":1}}],[\"适配畸形接口\",{\"0\":{\"67\":1}}],[\"快速开始\",{\"0\":{\"122\":1}}],[\"快速上手\",{\"0\":{\"4\":1}}],[\"进群时请注明\",{\"1\":{\"121\":1}}],[\"进阶功能\",{\"0\":{\"61\":1}}],[\"87\",{\"1\":{\"146\":1}}],[\"8\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"825135345\",{\"1\":{\"121\":1}}],[\"8000\",{\"1\":{\"20\":1}}],[\"群\",{\"1\":{\"121\":1}}],[\"服务端例子\",{\"0\":{\"175\":1}}],[\"服务端要求的\",{\"1\":{\"89\":1}}],[\"服务提供者\",{\"1\":{\"152\":1}}],[\"服务渠道\",{\"0\":{\"121\":1}}],[\"上亦能独当一面\",{\"1\":{\"120\":1}}],[\"404\",{\"1\":{\"203\":1}}],[\"401\",{\"1\":{\"86\":1,\"95\":1,\"100\":2}}],[\"48\",{\"1\":{\"146\":1}}],[\"4883\",{\"1\":{\"143\":1}}],[\"4180\",{\"1\":{\"146\":1}}],[\"4120\",{\"1\":{\"144\":1,\"145\":1}}],[\"47\",{\"1\":{\"146\":2}}],[\"44\",{\"1\":{\"145\":1}}],[\"494\",{\"1\":{\"143\":1}}],[\"45\",{\"1\":{\"143\":1}}],[\"4\",{\"0\":{\"193\":1,\"194\":1,\"195\":1,\"196\":1},\"1\":{\"120\":1,\"143\":1,\"144\":2,\"145\":2,\"146\":2,\"147\":1}}],[\"额外支持\",{\"1\":{\"120\":1}}],[\"额外的动态添加一个叫\",{\"1\":{\"76\":1}}],[\"欢迎您使用\",{\"1\":{\"119\":1}}],[\"完整接口声明示例\",{\"0\":{\"156\":1}}],[\"完整实现的\",{\"0\":{\"104\":1}}],[\"完善项目\",{\"0\":{\"138\":1}}],[\"完美契合\",{\"1\":{\"119\":1}}],[\"抽象\",{\"1\":{\"119\":1}}],[\"抽象的api异常\",{\"1\":{\"63\":1}}],[\"选项\",{\"1\":{\"119\":1}}],[\"基于\",{\"1\":{\"119\":1,\"120\":1}}],[\"基础包\",{\"1\":{\"6\":1,\"142\":1}}],[\"有些特性比如\",{\"1\":{\"154\":1}}],[\"有些服务器为了限制客户端的连接\",{\"1\":{\"82\":1}}],[\"有依赖注入的环境\",{\"0\":{\"148\":1}}],[\"有两个版本\",{\"1\":{\"118\":1}}],[\"简介\",{\"0\":{\"118\":1}}],[\"概览\",{\"0\":{\"117\":1,\"134\":1}}],[\"传入\",{\"1\":{\"116\":1}}],[\"传绝对\",{\"0\":{\"73\":1}}],[\"得到\",{\"1\":{\"116\":2}}],[\"解析\",{\"1\":{\"116\":1}}],[\"解决办法是在\",{\"1\":{\"71\":1}}],[\"工具原理\",{\"0\":{\"116\":1}}],[\"如stringcontent\",{\"1\":{\"180\":1}}],[\"如webapiclientcore\",{\"1\":{\"115\":1}}],[\"如果输出目标是loggerfactory\",{\"1\":{\"198\":1}}],[\"如果请求uri在运行时才确定\",{\"1\":{\"184\":1}}],[\"如果请求的接口不幸使用了\",{\"1\":{\"83\":1}}],[\"如果参数是类型是httpcontent类型的子类\",{\"1\":{\"180\":1}}],[\"如果我们希望user参数值也不能为null\",{\"1\":{\"172\":1}}],[\"如果接口imywebapi有多个方法且都指向同一服务器\",{\"1\":{\"161\":1}}],[\"如果保留为null\",{\"1\":{\"152\":1}}],[\"如果您觉得webapiclient对你有所帮助\",{\"0\":{\"141\":1}}],[\"如果你不关注结果的解析\",{\"1\":{\"129\":1}}],[\"如果你的接口需要请\",{\"1\":{\"99\":1,\"100\":1}}],[\"如果不是根据\",{\"1\":{\"100\":1}}],[\"如果需要将\",{\"1\":{\"100\":1}}],[\"如果服务器的\",{\"1\":{\"99\":1,\"100\":1}}],[\"如果因为意外的原因导致服务器仍然返回未授权\",{\"1\":{\"95\":1}}],[\"如果希望将缓存保存到其它存储位置\",{\"1\":{\"88\":1}}],[\"如果想全局性实现重试\",{\"1\":{\"64\":1}}],[\"代表不同账号下的个人信息\",{\"1\":{\"183\":1}}],[\"代理类型所在的程序集\",{\"1\":{\"136\":1}}],[\"代理特性前\",{\"0\":{\"128\":1}}],[\"代理配置\",{\"0\":{\"81\":1}}],[\"代码美化\",{\"1\":{\"116\":1}}],[\"代码的命名空间\",{\"1\":{\"115\":1}}],[\"举例\",{\"1\":{\"114\":1}}],[\"运行以下命令\",{\"1\":{\"114\":1}}],[\"生成代码\",{\"0\":{\"112\":1}}],[\"62\",{\"1\":{\"147\":2}}],[\"663\",{\"1\":{\"145\":1}}],[\"679\",{\"1\":{\"147\":1}}],[\"67\",{\"1\":{\"144\":1}}],[\"61\",{\"1\":{\"143\":1}}],[\"6\",{\"1\":{\"111\":1,\"145\":1,\"171\":1}}],[\"60ghz\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"6000\",{\"1\":{\"97\":1}}],[\"60\",{\"1\":{\"49\":1}}],[\"修饰简单类型参数\",{\"1\":{\"178\":1,\"179\":1}}],[\"修饰强类型模型参数\",{\"1\":{\"177\":2,\"178\":1,\"179\":1}}],[\"修饰参数时\",{\"1\":{\"154\":1}}],[\"修饰方法时\",{\"1\":{\"154\":1}}],[\"修饰接口时\",{\"1\":{\"154\":1}}],[\"修饰\",{\"1\":{\"109\":2,\"189\":1}}],[\"将参数值序列化为json并做为表单的一个字段内容\",{\"1\":{\"192\":1}}],[\"将\",{\"1\":{\"116\":2}}],[\"将openapi\",{\"0\":{\"112\":1}}],[\"将该功能的支持作为\",{\"1\":{\"109\":1}}],[\"将本地或远程\",{\"1\":{\"6\":1,\"142\":1}}],[\"替换内置\",{\"1\":{\"108\":1}}],[\"替换内置的\",{\"1\":{\"108\":1}}],[\"则可以直接做为参数\",{\"1\":{\"180\":1}}],[\"则通过\",{\"1\":{\"105\":1}}],[\"则需要自定义\",{\"1\":{\"88\":1}}],[\"读取\",{\"1\":{\"105\":1}}],[\"返回的\",{\"1\":{\"105\":1}}],[\"返回值验证\",{\"1\":{\"11\":1}}],[\"它将不会有新的功能更新\",{\"1\":{\"134\":1}}],[\"它将请求\",{\"1\":{\"103\":1}}],[\"它可以弥补特性\",{\"1\":{\"54\":1}}],[\"委托\",{\"0\":{\"103\":1},\"1\":{\"103\":1}}],[\"kb\",{\"1\":{\"143\":2,\"144\":2,\"145\":2,\"146\":2,\"147\":2}}],[\"kind\",{\"1\":{\"102\":2,\"177\":2,\"178\":4,\"179\":4,\"190\":2}}],[\"keyvalueformatter\",{\"1\":{\"152\":1}}],[\"keyvalueserializeoptions\",{\"1\":{\"8\":1,\"9\":1,\"70\":2}}],[\"keynamingstyle\",{\"1\":{\"70\":2}}],[\"key\",{\"1\":{\"49\":1,\"77\":1,\"88\":2,\"157\":3}}],[\"假设接口提供方的获取\",{\"1\":{\"102\":1}}],[\"都默认被\",{\"1\":{\"189\":1}}],[\"都遵循如下的uri格式\",{\"1\":{\"182\":1}}],[\"都有一个\",{\"1\":{\"105\":1}}],[\"都属于\",{\"1\":{\"101\":1}}],[\"都是一个多字段的model\",{\"1\":{\"192\":1}}],[\"都是\",{\"1\":{\"62\":1}}],[\"yjson\",{\"1\":{\"192\":1}}],[\"y\",{\"1\":{\"192\":3}}],[\"yyyy\",{\"1\":{\"168\":2}}],[\"yyyasync\",{\"1\":{\"101\":1}}],[\"yyy\",{\"1\":{\"101\":2}}],[\"your\",{\"1\":{\"157\":1}}],[\"yourcert\",{\"1\":{\"82\":1}}],[\"yourmodel\",{\"1\":{\"78\":1}}],[\"yourservice\",{\"1\":{\"10\":4}}],[\"也可以添加到globalfilters作为全局过滤器\",{\"1\":{\"200\":1}}],[\"也是实现了iapiactionfilter接口\",{\"1\":{\"200\":1}}],[\"也是非常棘手的活\",{\"1\":{\"100\":1}}],[\"也就是很多情况下抛出的异常都是内部异常为某个\",{\"1\":{\"63\":1}}],[\"无论是get还是post等哪种http请求方法\",{\"1\":{\"182\":1}}],[\"无效的依据\",{\"1\":{\"100\":1}}],[\"无依赖注入的环境需要自行创建\",{\"1\":{\"8\":1}}],[\"同理\",{\"1\":{\"100\":1}}],[\"同一种\",{\"1\":{\"13\":1}}],[\"里\",{\"1\":{\"100\":1}}],[\"追加到\",{\"1\":{\"100\":1}}],[\"重试请求\",{\"1\":{\"100\":1}}],[\"放到其它地方比如\",{\"1\":{\"99\":1,\"100\":1}}],[\"放到\",{\"1\":{\"99\":1,\"100\":1}}],[\"用户操作接口\",{\"1\":{\"99\":1,\"108\":1}}],[\"用于影响参数的序列化行为\",{\"1\":{\"166\":1}}],[\"用于获取\",{\"1\":{\"93\":1}}],[\"用于观察调用\",{\"1\":{\"66\":1}}],[\"用于取消请求操作\",{\"1\":{\"51\":1}}],[\"本示例的接口为swagger官方的v2\",{\"1\":{\"156\":1}}],[\"本次失败的请求无法避免\",{\"1\":{\"99\":1}}],[\"本方法禁用日志\",{\"1\":{\"47\":1}}],[\"丢失了\",{\"1\":{\"99\":1,\"100\":1}}],[\"很容易操控请求内容和响应模型\",{\"1\":{\"99\":1}}],[\"框架层的对象\",{\"1\":{\"100\":1}}],[\"框架层\",{\"1\":{\"99\":1}}],[\"模块\",{\"1\":{\"136\":1}}],[\"模板编译得到\",{\"1\":{\"116\":1}}],[\"模式两种标准\",{\"1\":{\"102\":1}}],[\"模式\",{\"0\":{\"96\":1}}],[\"模型\",{\"1\":{\"89\":1}}],[\"模型类型\",{\"1\":{\"78\":1}}],[\"模型为\",{\"1\":{\"69\":1,\"70\":1}}],[\"申请新\",{\"1\":{\"95\":1}}],[\"状态码之后\",{\"1\":{\"100\":1}}],[\"状态码\",{\"1\":{\"95\":1,\"100\":1}}],[\"除此之外\",{\"1\":{\"95\":1}}],[\"除了常见的\",{\"1\":{\"85\":1}}],[\"除了能在接口声明中使用\",{\"1\":{\"84\":1}}],[\"消息处理器\",{\"1\":{\"95\":1}}],[\"属于\",{\"1\":{\"95\":1,\"99\":1}}],[\"属性\",{\"1\":{\"39\":1,\"69\":1,\"105\":1}}],[\"属性值最大的特性生效\",{\"1\":{\"13\":1}}],[\"属性值的多个\",{\"1\":{\"13\":1}}],[\"属性值都不匹配响应的\",{\"1\":{\"13\":1}}],[\"属性值与响应的\",{\"1\":{\"13\":1}}],[\"属性为\",{\"1\":{\"13\":2,\"71\":1}}],[\"获取client\",{\"1\":{\"202\":2}}],[\"获取提供token获取的url节点\",{\"1\":{\"202\":1}}],[\"获取其实例时则从serviceprovider获取\",{\"1\":{\"152\":1}}],[\"获取\",{\"1\":{\"94\":1}}],[\"获取缓存内容\",{\"1\":{\"48\":1}}],[\"创建一个cancellationtokensource\",{\"1\":{\"165\":1}}],[\"创建的根serviceprovider\",{\"1\":{\"152\":1}}],[\"创建\",{\"1\":{\"94\":1}}],[\"提问\",{\"1\":{\"119\":1}}],[\"提供创意\",{\"1\":{\"119\":1}}],[\"提供者\",{\"1\":{\"93\":1}}],[\"提供通过\",{\"1\":{\"92\":1}}],[\"提交\",{\"1\":{\"70\":1}}],[\"刷新与应用\",{\"1\":{\"90\":1}}],[\"轻松支持\",{\"1\":{\"90\":1,\"106\":1}}],[\"扩展\",{\"0\":{\"90\":1,\"106\":1,\"109\":1},\"1\":{\"90\":1,\"106\":1}}],[\"扩展包提供\",{\"1\":{\"109\":1}}],[\"扩展包已经内置了\",{\"1\":{\"102\":1}}],[\"扩展包\",{\"1\":{\"6\":1,\"142\":1}}],[\"job=inprocess\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"jit\",{\"0\":{\"135\":1},\"1\":{\"120\":1,\"123\":1,\"134\":1,\"135\":1}}],[\"jpeg\",{\"1\":{\"89\":1}}],[\"jsonbody\",{\"1\":{\"177\":1}}],[\"jsonformatter\",{\"1\":{\"152\":1,\"192\":1}}],[\"jsonformfield\",{\"1\":{\"69\":2}}],[\"jsonnetcontent\",{\"1\":{\"108\":2}}],[\"jsonnetreturn\",{\"1\":{\"108\":2}}],[\"jsonnamingpolicy\",{\"1\":{\"9\":3}}],[\"jsonserializercontext\",{\"1\":{\"78\":1}}],[\"jsonserializeoptions\",{\"1\":{\"8\":1,\"9\":1,\"89\":1,\"107\":1}}],[\"jsonserializable\",{\"1\":{\"78\":2}}],[\"json或application\",{\"1\":{\"163\":1,\"164\":1}}],[\"json或xml内容\",{\"1\":{\"124\":2}}],[\"json或\",{\"1\":{\"71\":1}}],[\"jsonpatch\",{\"1\":{\"56\":1}}],[\"jsonpatchdocument<userinfo>\",{\"1\":{\"174\":2,\"175\":1}}],[\"jsonpatchdocument<user>\",{\"1\":{\"25\":2,\"56\":2}}],[\"jsonpatchdocument\",{\"0\":{\"56\":1}}],[\"jsonpropertyname\",{\"1\":{\"7\":1}}],[\"json进行序列化和反序列化\",{\"1\":{\"16\":1}}],[\"jsonreturnattribute\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"jsonreturn\",{\"1\":{\"14\":2,\"71\":2,\"108\":1,\"164\":2}}],[\"jsonrpcparam\",{\"1\":{\"109\":1,\"110\":2}}],[\"jsonrpcmethod\",{\"1\":{\"109\":1,\"110\":1}}],[\"jsonrpc\",{\"0\":{\"109\":1,\"110\":1,\"111\":1},\"1\":{\"6\":2,\"109\":2,\"110\":1,\"111\":2,\"142\":2}}],[\"jsondeserializeoptions\",{\"1\":{\"8\":1,\"9\":1}}],[\"jsoncontentattribute\",{\"0\":{\"36\":1},\"1\":{\"66\":2}}],[\"jsoncontent\",{\"1\":{\"7\":1,\"22\":1,\"23\":1,\"24\":1,\"36\":1,\"47\":1,\"59\":1,\"66\":1,\"74\":1,\"86\":1,\"89\":1,\"108\":1,\"157\":2,\"158\":4,\"171\":1,\"172\":1,\"177\":2}}],[\"json\",{\"0\":{\"69\":1,\"106\":1},\"1\":{\"6\":1,\"7\":1,\"8\":2,\"14\":1,\"36\":1,\"43\":2,\"66\":2,\"69\":3,\"70\":1,\"71\":2,\"78\":5,\"85\":1,\"89\":1,\"106\":2,\"111\":2,\"112\":1,\"114\":1,\"116\":1,\"142\":1,\"156\":1,\"173\":2,\"192\":2}}],[\"让它实现\",{\"1\":{\"89\":1}}],[\"让服务端无法处理\",{\"1\":{\"71\":1}}],[\"客户端期望的业务模型\",{\"1\":{\"89\":1}}],[\"客户端证书配置\",{\"0\":{\"82\":1}}],[\"图片2的base64\",{\"1\":{\"89\":1}}],[\"图片1的base64\",{\"1\":{\"89\":1}}],[\"把缓存内容写入redis\",{\"1\":{\"88\":1}}],[\"把本次的响应内容缓存起来\",{\"1\":{\"48\":1}}],[\"缓存提者\",{\"1\":{\"88\":1}}],[\"缓存一分钟\",{\"1\":{\"49\":1}}],[\"登录\",{\"1\":{\"86\":1}}],[\"登录并刷新cookie\",{\"1\":{\"86\":1}}],[\"现在\",{\"1\":{\"86\":1}}],[\"现代\",{\"1\":{\"66\":1}}],[\"首先\",{\"1\":{\"86\":1}}],[\"再重试请求接口\",{\"1\":{\"86\":1}}],[\"失效时自动刷新\",{\"1\":{\"86\":1}}],[\"遇到\",{\"1\":{\"86\":1}}],[\"才知道\",{\"1\":{\"86\":1}}],[\"才能使用\",{\"1\":{\"20\":1}}],[\"机制的接口\",{\"1\":{\"86\":1}}],[\"且影响全部的请求方法\",{\"1\":{\"200\":1}}],[\"且响应的content\",{\"1\":{\"163\":1}}],[\"且响应的状态码不在\",{\"1\":{\"13\":1}}],[\"且优先于通过特性标注的\",{\"1\":{\"84\":1}}],[\"分钟的生命周期\",{\"1\":{\"83\":1}}],[\"分别是\",{\"1\":{\"65\":1}}],[\"最好不要这样继承\",{\"1\":{\"127\":1}}],[\"最后将\",{\"1\":{\"94\":1}}],[\"最后\",{\"1\":{\"86\":1,\"89\":1}}],[\"最短只有\",{\"1\":{\"83\":1}}],[\"最终响应为正确的结果\",{\"1\":{\"86\":1}}],[\"最终目的是设置请求消息的requesturi的属性\",{\"1\":{\"74\":1}}],[\"最终都抛出\",{\"1\":{\"63\":1}}],[\"实例一般由di创建得到\",{\"1\":{\"152\":1}}],[\"实例不要跟随\",{\"1\":{\"83\":1}}],[\"实现\",{\"0\":{\"74\":1},\"1\":{\"54\":1}}],[\"实现文件上传功能\",{\"1\":{\"52\":1,\"55\":1}}],[\"那么就要考虑维持\",{\"1\":{\"83\":1}}],[\"保存身份信息机制\",{\"1\":{\"83\":1}}],[\"维持\",{\"0\":{\"83\":1}}],[\"双向验证\",{\"1\":{\"82\":1}}],[\"开启了\",{\"1\":{\"82\":1}}],[\"开发者可能遇到\",{\"1\":{\"109\":1}}],[\"开发者可以自己实现\",{\"1\":{\"48\":1}}],[\"开发者也可以在实际应用中\",{\"1\":{\"11\":1}}],[\"主\",{\"0\":{\"80\":1}}],[\"源生成的上下文\",{\"1\":{\"78\":1}}],[\"使项目aot发布成为可能\",{\"1\":{\"78\":1}}],[\"使用方式如下\",{\"1\":{\"196\":1}}],[\"使用具体的httpcontent类型提交\",{\"0\":{\"180\":1}}],[\"使用mulitpartfile类型作为提交的文件\",{\"1\":{\"179\":1}}],[\"使用multipart\",{\"0\":{\"179\":1}}],[\"使用x\",{\"0\":{\"178\":1}}],[\"使用json或xml提交\",{\"0\":{\"177\":1}}],[\"使用http\",{\"1\":{\"173\":1}}],[\"使用httpapi\",{\"0\":{\"152\":1}}],[\"使用不同的构造器和修饰于不同的地方产生的含义和结果是有点差别的\",{\"1\":{\"154\":1}}],[\"使用register\",{\"1\":{\"152\":1}}],[\"使用反编译工具查看项目编译后的程序集可以看到这些代理类\",{\"1\":{\"136\":1}}],[\"使用webapiclient怎么下载文件\",{\"0\":{\"130\":1}}],[\"使用工具\",{\"0\":{\"114\":1}}],[\"使用这个工具可以将\",{\"1\":{\"112\":1}}],[\"使用自定义的servicenamehostattribute\",{\"1\":{\"74\":1}}],[\"使用itask<>异步声明\",{\"1\":{\"64\":1}}],[\"使用\",{\"0\":{\"73\":1,\"99\":1,\"100\":1,\"128\":1,\"161\":1,\"190\":1},\"1\":{\"57\":1,\"69\":1,\"90\":1,\"94\":1,\"99\":1,\"106\":1,\"108\":1,\"109\":2,\"116\":3,\"177\":2,\"178\":2,\"179\":2,\"183\":1,\"184\":1}}],[\"使用请求的完整\",{\"1\":{\"49\":1}}],[\"使用system\",{\"1\":{\"16\":1,\"17\":1,\"152\":1}}],[\"中使用源生成功能之后\",{\"1\":{\"78\":1}}],[\"中设置\",{\"1\":{\"1\":1}}],[\"发布\",{\"0\":{\"78\":1}}],[\"加上其它衍生字段等\",{\"1\":{\"77\":1}}],[\"往往要表单的字段排序等\",{\"1\":{\"77\":1}}],[\"签名算法\",{\"1\":{\"77\":1}}],[\"即可\",{\"1\":{\"76\":1,\"109\":1}}],[\"即使有bug我们也不能保证快速修复\",{\"1\":{\"134\":1}}],[\"即使用\",{\"1\":{\"62\":1}}],[\"即使打了验证特性也不验证\",{\"1\":{\"60\":1}}],[\"功能与\",{\"1\":{\"95\":1}}],[\"功能\",{\"1\":{\"76\":1}}],[\"每个\",{\"1\":{\"105\":1}}],[\"每个接口都支持声明一个或多个\",{\"1\":{\"51\":1}}],[\"每个接口的都已经隐性存在了多个\",{\"1\":{\"14\":1}}],[\"每次都需要计算\",{\"1\":{\"76\":1}}],[\"可选\",{\"0\":{\"107\":1}}],[\"可能和请求参数值有关联\",{\"1\":{\"76\":1}}],[\"可以将请求与响应内容写入指定输出目标\",{\"1\":{\"198\":1}}],[\"可以将请求uri作为一个参数\",{\"1\":{\"184\":1}}],[\"可以将请求的域名抽出来放到httphost特性\",{\"1\":{\"161\":1}}],[\"可以如下声明方法\",{\"1\":{\"172\":1}}],[\"可以提供一个cancellationtoken\",{\"1\":{\"165\":1}}],[\"可以使用tokenclient来刷新\",{\"1\":{\"202\":1}}],[\"可以使用tokenclient来请求\",{\"1\":{\"202\":1}}],[\"可以使用webapiclient\",{\"1\":{\"156\":1}}],[\"可以使用proxyvalidator对象的validate方法来验证代理的有效性\",{\"1\":{\"128\":1}}],[\"可以修饰于接口\",{\"1\":{\"154\":1}}],[\"可以自主创建并赋值\",{\"1\":{\"152\":1}}],[\"可以自定义\",{\"1\":{\"66\":1}}],[\"可以替换的序列化工具\",{\"1\":{\"152\":1}}],[\"可以嵌套在类里面\",{\"1\":{\"136\":1}}],[\"可以在项目中直接引用webapiclient\",{\"1\":{\"135\":1}}],[\"可以在接口的\",{\"1\":{\"60\":1}}],[\"可以这样声明\",{\"1\":{\"132\":1}}],[\"可以声明为task<httpresponsemessage>而不去解析httpresponsemessage就可以\",{\"1\":{\"129\":1}}],[\"可以继承\",{\"1\":{\"127\":1}}],[\"可以给\",{\"1\":{\"101\":1}}],[\"可以做在请求某个接口过程中\",{\"1\":{\"86\":1}}],[\"可以是相对\",{\"1\":{\"38\":1}}],[\"例如服务端要求使用x\",{\"1\":{\"192\":1}}],[\"例如服务器要求一个\",{\"1\":{\"68\":1}}],[\"例如下面的\",{\"1\":{\"101\":1}}],[\"例如\",{\"1\":{\"86\":1,\"89\":1,\"182\":1}}],[\"例如每个请求的\",{\"1\":{\"76\":1}}],[\"要求此服务已经注入了di\",{\"1\":{\"74\":1}}],[\"以服务名来确定主机的特性\",{\"1\":{\"74\":1}}],[\"以下\",{\"1\":{\"66\":1}}],[\"以下特性是隐性存在的\",{\"1\":{\"14\":1}}],[\"参见swagger官网接口\",{\"1\":{\"156\":1}}],[\"参\",{\"0\":{\"73\":1}}],[\"参数级的\",{\"1\":{\"191\":1}}],[\"参数名\",{\"1\":{\"183\":1}}],[\"参数及参数属性输入验证\",{\"0\":{\"169\":1}}],[\"参数及属性注解\",{\"0\":{\"166\":1}}],[\"参数模型属性注解\",{\"0\":{\"168\":1}}],[\"参数别名\",{\"0\":{\"167\":1}}],[\"参数验证和返回值验证\",{\"1\":{\"152\":1}}],[\"参数\",{\"1\":{\"76\":1,\"109\":1}}],[\"参数的属性值验证\",{\"0\":{\"171\":1}}],[\"参数的名字为field\",{\"1\":{\"68\":1}}],[\"参数的特性\",{\"1\":{\"31\":1}}],[\"参数值的验证\",{\"0\":{\"170\":1}}],[\"参数值的键值对作为请求头\",{\"1\":{\"41\":1}}],[\"参数值的键值对作为请示\",{\"1\":{\"31\":1}}],[\"参数值的键值对作为\",{\"1\":{\"32\":1,\"34\":1}}],[\"参数值序列化为请求的\",{\"1\":{\"36\":1,\"37\":1}}],[\"参数值作为请求头\",{\"1\":{\"40\":1}}],[\"参数值作为请求uri\",{\"1\":{\"38\":1}}],[\"参数值作为超时时间的毫秒数\",{\"1\":{\"39\":1}}],[\"参数值作为\",{\"1\":{\"33\":1,\"35\":1}}],[\"参数值验证\",{\"0\":{\"58\":1},\"1\":{\"11\":1}}],[\"动态uri\",{\"0\":{\"184\":1}}],[\"动态path\",{\"0\":{\"183\":1}}],[\"动态追加请求签名\",{\"0\":{\"76\":1}}],[\"动态\",{\"0\":{\"72\":1}}],[\"并实例化添加到httpapiconfig的globalfilters\",{\"1\":{\"200\":1}}],[\"并提供返回下一个一样配置的mywebapi实例\",{\"1\":{\"152\":1}}],[\"并使用新\",{\"1\":{\"100\":1}}],[\"并注册替换默认的缓存提供者\",{\"1\":{\"88\":1}}],[\"并为\",{\"1\":{\"86\":1}}],[\"并设置其\",{\"1\":{\"71\":1}}],[\"并且具备依赖注入的环境\",{\"1\":{\"5\":1}}],[\"声明路径\",{\"1\":{\"183\":1}}],[\"声明的http接口为什么要继承ihttpapi接口\",{\"0\":{\"126\":1}}],[\"声明特性\",{\"0\":{\"108\":1}}],[\"声明到\",{\"1\":{\"76\":1}}],[\"声明\",{\"0\":{\"110\":1},\"1\":{\"71\":1}}],[\"声明接口\",{\"0\":{\"7\":1}}],[\"等一般过滤器\",{\"1\":{\"200\":1}}],[\"等\",{\"1\":{\"71\":1,\"100\":1}}],[\"等效于\",{\"1\":{\"55\":1}}],[\"但是必须放在其它参数的前面\",{\"1\":{\"180\":1}}],[\"但是仍然还有很多接口提供方在实现上仅仅体现了它的精神\",{\"1\":{\"102\":1}}],[\"但响应的content\",{\"1\":{\"164\":1}}],[\"但响应头里的\",{\"1\":{\"71\":1}}],[\"但xml序列化会有问题\",{\"1\":{\"132\":1}}],[\"但我们不会继续更新它\",{\"1\":{\"120\":1}}],[\"但\",{\"1\":{\"100\":1}}],[\"但它不能在请求内部实现重试请求的效果\",{\"1\":{\"99\":1}}],[\"但传输的时候变成\",{\"1\":{\"89\":1}}],[\"但服务提供方设计为使用\",{\"1\":{\"70\":1}}],[\"响应缓存提供者配置\",{\"1\":{\"152\":1}}],[\"响应内容要反序列化为强类型结果模型\",{\"1\":{\"85\":1}}],[\"响应的json\",{\"0\":{\"162\":1}}],[\"响应的内容通过肉眼看上是\",{\"1\":{\"71\":1}}],[\"响应的\",{\"0\":{\"71\":1}}],[\"响应状态码异常\",{\"1\":{\"63\":1}}],[\"我们希望是这样子\",{\"1\":{\"192\":1}}],[\"我们希望构造模型实例时传入\",{\"1\":{\"89\":1}}],[\"我们接口参数为string类型的范围太广\",{\"1\":{\"192\":1}}],[\"我们对应的接口是这样设计的\",{\"1\":{\"192\":1}}],[\"我们建议您尽快迁移到新的版本\",{\"1\":{\"134\":1}}],[\"我们在使用改进后的\",{\"1\":{\"89\":1}}],[\"我们输入模型与传输模型未必是对等的\",{\"1\":{\"89\":1}}],[\"我们需要把登录接口与某它业务接口拆分在不同的接口定义\",{\"1\":{\"86\":1}}],[\"我们可以自定义\",{\"1\":{\"76\":1}}],[\"我们可以使用\",{\"1\":{\"68\":1}}],[\"我可以配置\",{\"1\":{\"70\":1}}],[\"应用token\",{\"1\":{\"100\":1}}],[\"应用到请求消息中\",{\"1\":{\"94\":1}}],[\"应用相关自定义特性\",{\"1\":{\"85\":1}}],[\"应用缓存\",{\"1\":{\"49\":1}}],[\"应当设计为使用\",{\"1\":{\"70\":1}}],[\"合理情况下\",{\"1\":{\"70\":1}}],[\"序列化源生成示例\",{\"1\":{\"78\":1}}],[\"序列化并将结果字符串作为表单的一个字段\",{\"1\":{\"69\":1}}],[\"序列化得到\",{\"1\":{\"69\":1}}],[\"序列化选项\",{\"1\":{\"8\":2}}],[\"常见问题\",{\"0\":{\"125\":1}}],[\"常规下我们得把\",{\"1\":{\"69\":1}}],[\"常量值\",{\"1\":{\"28\":1,\"29\":1}}],[\"常量值请求超时时长\",{\"1\":{\"27\":1}}],[\"常量值请求头\",{\"1\":{\"26\":1}}],[\"字段\",{\"1\":{\"69\":1,\"70\":1}}],[\"文件夹下\",{\"1\":{\"114\":1}}],[\"文件也适用\",{\"1\":{\"112\":1}}],[\"文本\",{\"0\":{\"69\":1},\"1\":{\"69\":1}}],[\"文档解析生成\",{\"1\":{\"6\":1,\"142\":1}}],[\"变为\",{\"1\":{\"68\":1}}],[\"然后为基础接口配置\",{\"1\":{\"101\":1}}],[\"然后使用\",{\"1\":{\"94\":1}}],[\"然后将登录得到的\",{\"1\":{\"86\":1}}],[\"然后将自定义特性修饰到接口\",{\"1\":{\"11\":1}}],[\"然后实现自动登录的\",{\"1\":{\"86\":1}}],[\"然后把自定义\",{\"1\":{\"76\":1}}],[\"然后赋值给\",{\"1\":{\"69\":1}}],[\"然后最终请求\",{\"1\":{\"68\":1}}],[\"来使用\",{\"1\":{\"152\":1}}],[\"来序列化和反序列化\",{\"1\":{\"106\":1}}],[\"来配置\",{\"1\":{\"105\":1}}],[\"来重试一次请求\",{\"1\":{\"95\":1}}],[\"来重试请求接口\",{\"1\":{\"86\":1}}],[\"来请求\",{\"1\":{\"89\":1}}],[\"来达到这个格式要求\",{\"1\":{\"70\":1}}],[\"来达到这个要求\",{\"1\":{\"68\":1}}],[\"来提交\",{\"1\":{\"70\":1}}],[\"来实现\",{\"1\":{\"64\":1}}],[\"关键字或变量命名不允许的\",{\"1\":{\"68\":1}}],[\"关闭数据验证功能\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"子类的特性标注之外\",{\"1\":{\"84\":1}}],[\"子类\",{\"1\":{\"66\":1}}],[\"标注上你的一个自定义\",{\"1\":{\"66\":1}}],[\"行为在非get或head请求的缺省参数特性声明时\",{\"1\":{\"66\":1}}],[\"接口或方法使用\",{\"1\":{\"198\":1}}],[\"接口级的无效\",{\"1\":{\"155\":1}}],[\"接口声明\",{\"1\":{\"149\":1,\"150\":1,\"152\":1}}],[\"接口声明的参数可以为object或某些类型的基类吗\",{\"0\":{\"132\":1}}],[\"接口不要求为public\",{\"1\":{\"136\":1}}],[\"接口要求为public\",{\"1\":{\"135\":1}}],[\"接口返回类型除了声明为\",{\"0\":{\"131\":1}}],[\"接口的调用\",{\"1\":{\"124\":1}}],[\"接口的配置\",{\"1\":{\"124\":1}}],[\"接口的声明\",{\"1\":{\"124\":1}}],[\"接口设置基础接口\",{\"1\":{\"101\":1}}],[\"接口类型获取或创建\",{\"1\":{\"92\":1}}],[\"接口\",{\"1\":{\"89\":1,\"101\":1}}],[\"接口中\",{\"1\":{\"66\":1}}],[\"接口代码的\",{\"1\":{\"6\":1,\"142\":1}}],[\"填充上想要的特性即可\",{\"1\":{\"66\":1}}],[\"方法的原有返回类型itask\",{\"1\":{\"163\":1}}],[\"方法的描述\",{\"1\":{\"66\":1}}],[\"方法级\",{\"1\":{\"191\":1}}],[\"方法级的生效\",{\"1\":{\"155\":1}}],[\"方法级和接口级都生效\",{\"1\":{\"155\":1}}],[\"方法级比接口级优先级高\",{\"1\":{\"155\":1}}],[\"方法和参数\",{\"1\":{\"154\":1}}],[\"方法\",{\"1\":{\"105\":1,\"109\":1}}],[\"方法来指示响应是未授权状态\",{\"1\":{\"86\":1}}],[\"方法或参数即可\",{\"1\":{\"11\":1}}],[\"调整缺省参数特性\",{\"0\":{\"66\":1}}],[\"调用http请求代码\",{\"1\":{\"152\":1}}],[\"调用的接口\",{\"1\":{\"109\":1}}],[\"调用\",{\"1\":{\"86\":1}}],[\"调用接口\",{\"1\":{\"10\":1}}],[\"调用扩展包\",{\"1\":{\"6\":1,\"142\":1}}],[\"处理后分别是\",{\"1\":{\"65\":1}}],[\"对象而必须为\",{\"0\":{\"129\":1}}],[\"对象与概念\",{\"0\":{\"91\":1}}],[\"对象\",{\"1\":{\"89\":1,\"116\":1}}],[\"对应的业务模型的某个标记字段\",{\"1\":{\"100\":1}}],[\"对应的\",{\"1\":{\"69\":1,\"70\":1}}],[\"对于没有任何特性修饰的每个参数\",{\"1\":{\"189\":1}}],[\"对于上节的例子\",{\"1\":{\"172\":1}}],[\"对于swagger文档\",{\"1\":{\"156\":1}}],[\"对于asp\",{\"1\":{\"152\":1}}],[\"对于使用\",{\"1\":{\"86\":1}}],[\"对于复杂嵌套结构的数据模型\",{\"1\":{\"70\":1}}],[\"对于\",{\"1\":{\"65\":1}}],[\"对接口下所有方法适用\",{\"1\":{\"20\":1}}],[\"多个query参数合并到模型\",{\"0\":{\"187\":1}}],[\"多个query参数平铺+部分合并到模型\",{\"0\":{\"188\":1}}],[\"多个query参数平铺\",{\"0\":{\"186\":1}}],[\"多个同名键的键值对\",{\"1\":{\"65\":1}}],[\"多接口共享的\",{\"0\":{\"101\":1}}],[\"多种响应内容\",{\"1\":{\"14\":1}}],[\"竖线分隔\",{\"1\":{\"65\":1}}],[\"反馈问题请前往\",{\"1\":{\"121\":1}}],[\"反斜杠分隔\",{\"1\":{\"65\":1}}],[\"反序列化选项\",{\"1\":{\"8\":2}}],[\"空格分隔\",{\"1\":{\"65\":1}}],[\"逗号分隔\",{\"1\":{\"65\":1}}],[\"种表述方式\",{\"1\":{\"65\":1}}],[\"一般情况下\",{\"1\":{\"132\":1}}],[\"一般类型的参数\",{\"1\":{\"31\":1}}],[\"一是为了方便webapiclient库自动生成接口的代理类\",{\"1\":{\"126\":1}}],[\"一样\",{\"1\":{\"71\":1,\"95\":1}}],[\"一个集合在\",{\"1\":{\"65\":1}}],[\"按照\",{\"1\":{\"65\":1}}],[\"<http\",{\"1\":{\"160\":1,\"167\":1,\"182\":1,\"183\":2}}],[\"<returns><\",{\"1\":{\"202\":2}}],[\"<returns>successful\",{\"1\":{\"157\":4,\"158\":6}}],[\"<returns>返回登录响应消息<\",{\"1\":{\"86\":1}}],[\"<param\",{\"1\":{\"100\":3,\"157\":13,\"158\":9,\"202\":4}}],[\"<packagereference\",{\"1\":{\"8\":1}}],[\"<\",{\"1\":{\"74\":1,\"86\":1,\"99\":1,\"100\":2,\"108\":1,\"157\":9,\"158\":10,\"202\":7}}],[\"<summary>\",{\"1\":{\"74\":1,\"86\":1,\"99\":1,\"100\":2,\"108\":1,\"157\":9,\"158\":9,\"202\":7}}],[\"<=\",{\"1\":{\"64\":1}}],[\"394\",{\"1\":{\"147\":1}}],[\"38\",{\"1\":{\"146\":1}}],[\"35\",{\"1\":{\"146\":1}}],[\"3193\",{\"1\":{\"146\":1}}],[\"31\",{\"1\":{\"144\":1}}],[\"331\",{\"1\":{\"145\":1}}],[\"3394\",{\"1\":{\"143\":1}}],[\"3357\",{\"1\":{\"143\":1}}],[\"321\",{\"1\":{\"147\":1}}],[\"322\",{\"1\":{\"144\":1}}],[\"32\",{\"1\":{\"143\":1,\"144\":2,\"145\":2,\"146\":1,\"147\":1}}],[\"3\",{\"0\":{\"191\":1,\"192\":1,\"196\":1},\"1\":{\"64\":1,\"143\":1,\"144\":1,\"146\":1,\"147\":1,\"195\":1,\"196\":1}}],[\"就可以如上设计与应用一个signfilter\",{\"1\":{\"199\":1}}],[\"就可以声明为itask\",{\"1\":{\"163\":1}}],[\"就会验证它的account和password两个属性\",{\"1\":{\"171\":1}}],[\"就需要显式声明\",{\"1\":{\"164\":1}}],[\"就请支持一下我们吧\",{\"0\":{\"141\":1}}],[\"就触发\",{\"1\":{\"86\":1}}],[\"就有\",{\"1\":{\"64\":1}}],[\"就不会再请求到远程服务器\",{\"1\":{\"48\":1}}],[\"异常处理和重试策略\",{\"0\":{\"193\":1}}],[\"异常\",{\"1\":{\"63\":1}}],[\"是同一个值\",{\"1\":{\"105\":1}}],[\"是一种最简单的实现方式\",{\"1\":{\"103\":1}}],[\"是否已失效\",{\"1\":{\"86\":1}}],[\"是基于元数据来执行请求和处理响应\",{\"1\":{\"66\":1}}],[\"是为了完好的保存内部异常的堆栈信息\",{\"1\":{\"63\":1}}],[\"是完全一样的\",{\"1\":{\"62\":1}}],[\"之后\",{\"1\":{\"99\":1,\"100\":1}}],[\"之所以设计为内部异常\",{\"1\":{\"63\":1}}],[\"之间时\",{\"1\":{\"13\":1}}],[\"作为表单字段添加到既有请求表单中\",{\"1\":{\"99\":1}}],[\"作为\",{\"1\":{\"62\":1,\"100\":1}}],[\"作用于本方法的returnattribute\",{\"1\":{\"12\":1}}],[\"作用于本方法的filter\",{\"1\":{\"12\":1}}],[\"作用于接口内所有方法的returnattribute\",{\"1\":{\"12\":1}}],[\"作用于接口内所有方法的filter\",{\"1\":{\"12\":1}}],[\"书写方式\",{\"1\":{\"62\":1}}],[\"请结合使用\",{\"1\":{\"64\":1}}],[\"请使用的标准\",{\"1\":{\"62\":1}}],[\"请求刷新token\",{\"1\":{\"202\":1}}],[\"请求获取token\",{\"1\":{\"202\":1}}],[\"请求之后输出请求信息\",{\"1\":{\"198\":1}}],[\"请求uri\",{\"0\":{\"181\":1}}],[\"请求的content\",{\"1\":{\"173\":1}}],[\"请求body为描述多个opration的数据json内容\",{\"1\":{\"173\":1}}],[\"请求取消令牌参数cancellationtoken\",{\"0\":{\"165\":1}}],[\"请求主机和httpclient相关配置\",{\"1\":{\"152\":1}}],[\"请求\",{\"1\":{\"102\":1}}],[\"请求头\",{\"1\":{\"99\":1,\"100\":1}}],[\"请求表单的字段排序\",{\"0\":{\"77\":1}}],[\"请求签名\",{\"0\":{\"75\":1}}],[\"请求几乎占据了大部分的场景\",{\"1\":{\"66\":1}}],[\"请求条件性重试\",{\"0\":{\"64\":1}}],[\"请求异常\",{\"1\":{\"63\":1}}],[\"请求异常处理\",{\"0\":{\"63\":1}}],[\"请求配置异常\",{\"1\":{\"63\":1}}],[\"请求一个接口\",{\"1\":{\"63\":1}}],[\"请求和相应用到的\",{\"1\":{\"59\":1}}],[\"请求和响应内容的输出为日志到\",{\"1\":{\"47\":1}}],[\"请求或响应模型验证\",{\"0\":{\"59\":1}}],[\"请求文档\",{\"1\":{\"56\":1}}],[\"所以要求tinterface为public\",{\"1\":{\"135\":1}}],[\"所以webapiclient也没有同步请求\",{\"1\":{\"133\":1}}],[\"所以为了方便理解\",{\"1\":{\"127\":1}}],[\"所以我们要改造\",{\"1\":{\"89\":1}}],[\"所以你的客户端接口提交的内容往往也是\",{\"1\":{\"66\":1}}],[\"所以才会表现一样\",{\"1\":{\"62\":1}}],[\"所有的\",{\"1\":{\"62\":1}}],[\"所有方法都记录请求日志\",{\"1\":{\"47\":1}}],[\"事实上http\",{\"1\":{\"62\":1}}],[\"不用处理mywebapi实例的释放\",{\"1\":{\"152\":1}}],[\"不适用于不支持jit技术的平台\",{\"1\":{\"135\":1}}],[\"不正确的阻塞itask和task返回值\",{\"1\":{\"133\":1}}],[\"不再更新\",{\"0\":{\"120\":1}}],[\"不属于\",{\"1\":{\"100\":1}}],[\"不变\",{\"0\":{\"83\":1}}],[\"不知道是哪门公司起的所谓的\",{\"1\":{\"77\":1}}],[\"不是期望值匹配也要处理\",{\"1\":{\"71\":1}}],[\"不是预期值\",{\"0\":{\"71\":1}}],[\"不友好的参数名别名\",{\"0\":{\"68\":1}}],[\"不管出现何种异常\",{\"1\":{\"63\":1}}],[\"不带\",{\"1\":{\"62\":1}}],[\"不能解决的一些复杂参数\",{\"1\":{\"54\":1}}],[\"+=\",{\"1\":{\"100\":1}}],[\"+\",{\"0\":{\"150\":1},\"1\":{\"62\":6,\"100\":1}}],[\"结尾的\",{\"1\":{\"62\":2}}],[\"带\",{\"1\":{\"62\":1}}],[\"拼接都是通过\",{\"1\":{\"62\":1}}],[\"拼接规则\",{\"0\":{\"62\":1}}],[\"数据还是子类的\",{\"1\":{\"132\":1}}],[\"数据包\",{\"0\":{\"111\":1}}],[\"数据来源可以是db或其它等等\",{\"1\":{\"74\":1}}],[\"数据验证功能默认是开启的\",{\"1\":{\"60\":1}}],[\"数据验证\",{\"0\":{\"57\":1}}],[\"数据模型\",{\"1\":{\"13\":1}}],[\"称为自解释参数类型\",{\"1\":{\"54\":1}}],[\"做为\",{\"1\":{\"52\":1,\"55\":1}}],[\"做为缓存的\",{\"1\":{\"49\":1}}],[\"特殊参数是指不需要任何特性来修饰就能工作的一些参数类型\",{\"1\":{\"50\":1}}],[\"特殊参数\",{\"0\":{\"50\":1}}],[\"特性可以设置encoding\",{\"1\":{\"189\":1}}],[\"特性可以轻松帮我们自动完成\",{\"1\":{\"69\":1}}],[\"特性修饰这个参数并作为第一个参数\",{\"1\":{\"184\":1}}],[\"特性即可\",{\"1\":{\"14\":1}}],[\"特性来处理相应内容而不关注相应的\",{\"1\":{\"14\":1}}],[\"特性的优先级\",{\"0\":{\"155\":1}}],[\"特性的范围\",{\"0\":{\"154\":1}}],[\"特性的范围和优先级\",{\"0\":{\"153\":1}}],[\"特性的\",{\"1\":{\"13\":1}}],[\"特性用于处理响应内容为对应的\",{\"1\":{\"13\":1}}],[\"特性\",{\"0\":{\"13\":1,\"19\":1,\"30\":1,\"46\":1,\"48\":1,\"99\":1,\"161\":1,\"189\":1,\"190\":1},\"1\":{\"13\":1,\"14\":1,\"20\":1,\"71\":1,\"164\":1}}],[\"下一次如果符合预期条件的话\",{\"1\":{\"48\":1}}],[\"或参数模型的同名属性\",{\"1\":{\"183\":1}}],[\"或者读取响应消息反序列化之后对应的业务模型都非常方便\",{\"1\":{\"99\":1}}],[\"或者查看响应数据内容\",{\"1\":{\"46\":1}}],[\"或\",{\"0\":{\"129\":1},\"1\":{\"71\":1,\"76\":1,\"85\":1,\"164\":1,\"177\":2,\"178\":2,\"179\":2}}],[\"或表单中支持\",{\"1\":{\"65\":1}}],[\"或响应模型符合某种条件\",{\"1\":{\"64\":1}}],[\"或绝对\",{\"1\":{\"38\":1}}],[\"这一步是在aot编译阶段之前完成\",{\"1\":{\"136\":1}}],[\"这时候就需要自定义\",{\"1\":{\"102\":1}}],[\"这是一个用于调试追踪的过滤器\",{\"1\":{\"198\":1}}],[\"这是非常困难的\",{\"1\":{\"100\":1}}],[\"这是项目主页的案例\",{\"1\":{\"1\":1}}],[\"这部分是\",{\"1\":{\"79\":1}}],[\"这里\",{\"1\":{\"192\":1}}],[\"这里不同的\",{\"1\":{\"183\":1}}],[\"这里不做过多介绍\",{\"1\":{\"79\":1}}],[\"这里把logmessage输出到你的目标\",{\"1\":{\"87\":1}}],[\"这里要挂上所有接口中使用到的\",{\"1\":{\"78\":1}}],[\"这里可以排序\",{\"1\":{\"77\":1}}],[\"这好比客户端提交\",{\"1\":{\"71\":1}}],[\"这样的数组值\",{\"1\":{\"65\":1}}],[\"这个sign可能和配置文件等有关系\",{\"1\":{\"199\":1}}],[\"这个是设计的原则\",{\"1\":{\"129\":1}}],[\"这个是c\",{\"1\":{\"68\":1}}],[\"这个\",{\"1\":{\"69\":1,\"76\":1}}],[\"这个异常抽象类\",{\"1\":{\"63\":1}}],[\"这个构造器生成\",{\"1\":{\"62\":1}}],[\"这些验证特性都有相同的基类validationattribute\",{\"1\":{\"169\":1}}],[\"这些验证特性用于请求前验证此参数\",{\"1\":{\"58\":1}}],[\"这些注解特性的命名空间在webapiclient\",{\"1\":{\"166\":1}}],[\"这些都是抽象的返回类型\",{\"1\":{\"131\":1}}],[\"这些过滤器将对整个接口生效\",{\"1\":{\"84\":1}}],[\"这些内容要求是表单编码过的\",{\"1\":{\"45\":1}}],[\"原始\",{\"1\":{\"43\":1,\"44\":1,\"45\":1}}],[\"原始文本内容\",{\"1\":{\"42\":1}}],[\"只能调用一次\",{\"1\":{\"152\":1}}],[\"只能修饰第一个参数\",{\"1\":{\"38\":1}}],[\"只需要给\",{\"1\":{\"101\":1}}],[\"只要响应的状态码为\",{\"1\":{\"86\":1}}],[\"只允许它执有它颁发的证书的客户端进行连接\",{\"1\":{\"82\":1}}],[\"只有在接口请求之后\",{\"1\":{\"86\":1}}],[\"只有\",{\"1\":{\"13\":1}}],[\"内部的很多异常都基于\",{\"1\":{\"63\":1}}],[\"内容时指示请求头的\",{\"1\":{\"71\":1}}],[\"内容\",{\"1\":{\"36\":1,\"37\":1,\"43\":1,\"44\":1,\"66\":1,\"71\":1}}],[\"内置特性指框架内提供的一些特性\",{\"1\":{\"11\":1}}],[\"内置特性\",{\"0\":{\"11\":1}}],[\"会将对应的\",{\"1\":{\"114\":1}}],[\"会在本请求内部丢弃和重新请求\",{\"1\":{\"100\":1}}],[\"会得到一次失败的请求\",{\"1\":{\"99\":1}}],[\"会发现集合里面默认加上了\",{\"1\":{\"66\":1}}],[\"会隐性生效\",{\"1\":{\"31\":1}}],[\"会覆盖接口声明的httphost\",{\"1\":{\"20\":1}}],[\"缺省特性时\",{\"1\":{\"31\":1}}],[\"缺省的return特性\",{\"0\":{\"14\":1}}],[\"q=0\",{\"1\":{\"111\":2}}],[\"query参数\",{\"0\":{\"185\":1}}],[\"query\",{\"1\":{\"31\":1,\"65\":1,\"68\":1,\"76\":1,\"99\":1,\"100\":2,\"182\":1,\"190\":2}}],[\"qq\",{\"1\":{\"25\":1,\"56\":1,\"121\":1,\"174\":1}}],[\"路径参数或\",{\"1\":{\"31\":1}}],[\"表单集合处理\",{\"0\":{\"65\":1}}],[\"表单的一个文件项\",{\"1\":{\"52\":1,\"55\":1}}],[\"表单内容\",{\"1\":{\"45\":1}}],[\"表单文件\",{\"1\":{\"34\":1,\"35\":1}}],[\"表单\",{\"1\":{\"32\":1,\"34\":1}}],[\"表单字段与值\",{\"1\":{\"33\":1,\"35\":1}}],[\"表单字段\",{\"1\":{\"28\":1,\"29\":1}}],[\"表示提供client\",{\"1\":{\"202\":1}}],[\"表示提交json\",{\"1\":{\"177\":1}}],[\"表示提交xml\",{\"1\":{\"177\":1}}],[\"表示做为请求路径或请求参数处理\",{\"1\":{\"189\":1}}],[\"表示参数的值将做为请求头的值\",{\"1\":{\"154\":1}}],[\"表示此方法在请求前添加这个请求头\",{\"1\":{\"154\":1}}],[\"表示接口下的所有方法在请求前都会添加这个请求头\",{\"1\":{\"154\":1}}],[\"表示\",{\"1\":{\"56\":1,\"71\":1}}],[\"表示响应状态为204时将结果设置为返回类型的默认值特性\",{\"1\":{\"18\":1}}],[\"表示xml内容的结果特性\",{\"1\":{\"17\":1}}],[\"表示json内容的结果特性\",{\"1\":{\"16\":1}}],[\"表示原始类型的结果特性\",{\"1\":{\"15\":1}}],[\"超时时长为10秒\",{\"1\":{\"27\":1}}],[\"list\",{\"1\":{\"158\":2}}],[\"linux\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"laojiu>\",{\"1\":{\"183\":1}}],[\"laojiu\",{\"1\":{\"25\":2,\"56\":2,\"111\":1,\"124\":2,\"160\":1,\"174\":2}}],[\"long\",{\"1\":{\"157\":4}}],[\"logoutuserasync\",{\"1\":{\"158\":1}}],[\"logout\",{\"1\":{\"158\":1}}],[\"logs\",{\"1\":{\"158\":2}}],[\"logged\",{\"1\":{\"158\":1}}],[\"loggerfactory\",{\"1\":{\"152\":1}}],[\"loggingfactory\",{\"1\":{\"47\":1}}],[\"loggingfilterattribute\",{\"0\":{\"47\":1},\"1\":{\"87\":1}}],[\"loggingfilter\",{\"1\":{\"7\":1,\"47\":2,\"73\":1}}],[\"logininfo\",{\"1\":{\"187\":3,\"188\":3,\"189\":2,\"190\":2}}],[\"loginuserasync\",{\"1\":{\"158\":1}}],[\"login\",{\"1\":{\"158\":2}}],[\"login<\",{\"1\":{\"158\":1}}],[\"loginasync\",{\"1\":{\"86\":2}}],[\"logical\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"logmessage\",{\"1\":{\"87\":2}}],[\"localhost\",{\"1\":{\"7\":1,\"8\":3,\"20\":2,\"81\":1,\"82\":1,\"83\":1,\"86\":1,\"97\":1,\"101\":1,\"110\":1,\"111\":1,\"149\":1,\"150\":1,\"152\":1,\"198\":1,\"202\":1}}],[\"绝对或相对路径\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"24\":1}}],[\"支持作者再出精品\",{\"1\":{\"141\":1}}],[\"支持的平台广泛\",{\"1\":{\"136\":1}}],[\"支持\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"120\":1}}],[\"支持结果类型为string\",{\"1\":{\"15\":1}}],[\"rx扩展\",{\"0\":{\"196\":1}}],[\"role\",{\"1\":{\"188\":1,\"189\":1,\"190\":1}}],[\"role=admin\",{\"1\":{\"188\":1,\"189\":1,\"190\":1}}],[\"ratiosd\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"ratio\",{\"1\":{\"143\":2,\"144\":2,\"145\":2,\"146\":2,\"147\":2}}],[\"razorengine\",{\"1\":{\"116\":1}}],[\"rawformcontent\",{\"1\":{\"45\":1}}],[\"rawformcontentattribute\",{\"0\":{\"45\":1}}],[\"rawxmlcontent\",{\"1\":{\"44\":1}}],[\"rawxmlcontentattribute\",{\"0\":{\"44\":1}}],[\"rawjsoncontent\",{\"1\":{\"43\":1}}],[\"rawjsoncontentattribute\",{\"0\":{\"43\":1}}],[\"rawstringcontent\",{\"1\":{\"42\":1}}],[\"rawstringcontentattribute\",{\"0\":{\"42\":1}}],[\"rawreturnattribute\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"rawreturn\",{\"1\":{\"14\":1}}],[\"rpc\",{\"1\":{\"109\":2,\"111\":1}}],[\"r\",{\"1\":{\"64\":2}}],[\"reference\",{\"0\":{\"204\":1,\"206\":1}}],[\"refit\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"refresh\",{\"1\":{\"104\":1,\"202\":3}}],[\"refreshtokenasync\",{\"1\":{\"104\":1}}],[\"refreshcookieasync\",{\"1\":{\"86\":1}}],[\"register<imywebapi>\",{\"1\":{\"152\":1}}],[\"register<iuserapi>\",{\"1\":{\"124\":1,\"201\":1,\"202\":1}}],[\"register\",{\"0\":{\"152\":1},\"1\":{\"150\":2}}],[\"registercontrollers\",{\"1\":{\"150\":1}}],[\"registertypes\",{\"1\":{\"8\":1}}],[\"redisresponsecacheprovider\",{\"1\":{\"88\":2}}],[\"redisresponsecacheprovider>\",{\"1\":{\"88\":1}}],[\"readasasync<errormodel>\",{\"1\":{\"194\":1,\"195\":1}}],[\"readasstreamasync\",{\"1\":{\"85\":1}}],[\"readonly\",{\"1\":{\"10\":2,\"86\":1}}],[\"requestrefreshtokenasync\",{\"1\":{\"202\":2}}],[\"requestclientcredentialsasync\",{\"1\":{\"202\":1}}],[\"requesttokenresultasync\",{\"1\":{\"202\":1}}],[\"requesttokenasync\",{\"1\":{\"102\":1,\"103\":1,\"104\":3}}],[\"request\",{\"1\":{\"100\":6,\"198\":1}}],[\"requestversionorlower\",{\"1\":{\"79\":1}}],[\"requesturi\",{\"1\":{\"74\":1,\"100\":4}}],[\"requestmessage\",{\"1\":{\"74\":1,\"76\":1,\"85\":1,\"89\":1,\"99\":1,\"192\":1,\"199\":1}}],[\"required\",{\"1\":{\"58\":1,\"59\":3,\"85\":1,\"115\":1,\"157\":8,\"158\":9,\"170\":1,\"171\":2,\"172\":1}}],[\"resolve的好处是在入口处只register一次imywebapi\",{\"1\":{\"152\":1}}],[\"resolve\",{\"0\":{\"152\":1}}],[\"resolve<imywebapi>\",{\"1\":{\"152\":1}}],[\"resolve<ihttpapifactory<imywebapi>>\",{\"1\":{\"150\":1}}],[\"resolve<iuserapi>\",{\"1\":{\"124\":1,\"198\":1}}],[\"resolvehost\",{\"1\":{\"74\":1}}],[\"results\",{\"0\":{\"205\":1}}],[\"result\",{\"1\":{\"64\":1,\"85\":1,\"196\":1}}],[\"responsecacheentry\",{\"1\":{\"88\":1}}],[\"responsecacheprovider\",{\"1\":{\"48\":1,\"152\":1}}],[\"responsemessage\",{\"1\":{\"85\":1}}],[\"response\",{\"1\":{\"18\":1,\"160\":1,\"198\":1}}],[\"retry重试策略\",{\"0\":{\"195\":1}}],[\"retry\",{\"1\":{\"64\":3,\"195\":1,\"196\":1}}],[\"return<\",{\"1\":{\"157\":1}}],[\"returns>\",{\"1\":{\"86\":1,\"157\":4,\"158\":6,\"202\":2}}],[\"return\",{\"0\":{\"13\":1},\"1\":{\"8\":1,\"13\":3,\"14\":3,\"18\":2,\"76\":1,\"77\":1,\"82\":1,\"83\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"103\":1,\"104\":2,\"124\":2,\"149\":1,\"150\":1,\"175\":1,\"199\":1,\"201\":2,\"202\":2}}],[\"relativeuri\",{\"1\":{\"62\":1}}],[\"replace\",{\"1\":{\"25\":2,\"56\":2,\"174\":2}}],[\"和\",{\"1\":{\"14\":1,\"86\":1,\"101\":1,\"102\":1,\"192\":1}}],[\"能同时处理原始类型\",{\"1\":{\"14\":1}}],[\"047\",{\"1\":{\"198\":1}}],[\"07\",{\"1\":{\"146\":1}}],[\"02\",{\"1\":{\"146\":1}}],[\"06\",{\"1\":{\"146\":1}}],[\"08\",{\"1\":{\"145\":2,\"198\":2}}],[\"0986\",{\"1\":{\"147\":1}}],[\"09\",{\"1\":{\"144\":1}}],[\"0381\",{\"1\":{\"146\":1}}],[\"03\",{\"1\":{\"144\":1,\"147\":1}}],[\"0+\",{\"1\":{\"120\":1}}],[\"0的旧版本\",{\"1\":{\"120\":1}}],[\"01\",{\"1\":{\"111\":2,\"198\":3}}],[\"0l\",{\"1\":{\"85\":1}}],[\"009\",{\"1\":{\"146\":1}}],[\"00\",{\"1\":{\"143\":3,\"144\":3,\"145\":3,\"146\":3,\"147\":3,\"198\":2}}],[\"002\",{\"1\":{\"65\":4}}],[\"001\",{\"1\":{\"65\":1}}],[\"0\",{\"1\":{\"14\":5,\"64\":1,\"66\":1,\"111\":3,\"143\":9,\"144\":9,\"145\":9,\"146\":7,\"147\":6}}],[\"为什么不支持将接口方法的返回类型声明为\",{\"0\":{\"129\":1}}],[\"为接口注册customtokenprovider\",{\"1\":{\"104\":1}}],[\"为接口注册自定义tokenprovider\",{\"1\":{\"103\":1}}],[\"为接口注册与配置client模式的tokenprovider\",{\"1\":{\"97\":1}}],[\"为接口注册\",{\"0\":{\"97\":1}}],[\"为非预期值\",{\"1\":{\"71\":1}}],[\"为复杂参数类型的参数应用\",{\"1\":{\"66\":1}}],[\"为了避免低级错误的出现\",{\"1\":{\"62\":1}}],[\"为\",{\"1\":{\"14\":1}}],[\"为true\",{\"1\":{\"13\":1}}],[\"在请求前会自动从参数\",{\"1\":{\"183\":1}}],[\"在rfc6902里有详细的介绍json\",{\"1\":{\"173\":1}}],[\"在一些场景中\",{\"1\":{\"196\":1}}],[\"在一些环境下很容易死锁\",{\"1\":{\"133\":1}}],[\"在一定的时间内都是获取到同一个mywebapi实例\",{\"1\":{\"152\":1}}],[\"在使用中\",{\"1\":{\"152\":1}}],[\"在编译过程中使用mono\",{\"1\":{\"136\":1}}],[\"在新的程序集创建了tinterface的代理类\",{\"1\":{\"135\":1}}],[\"在运行时使用emit创建http请求接口的代理类\",{\"1\":{\"135\":1}}],[\"在老版本的\",{\"1\":{\"120\":1}}],[\"在极少数场景中\",{\"1\":{\"109\":1}}],[\"在里面只能访问原始的\",{\"1\":{\"100\":1}}],[\"在收到\",{\"1\":{\"100\":1}}],[\"在服务器颁发\",{\"1\":{\"99\":1,\"100\":1}}],[\"在某些极限情况下\",{\"1\":{\"89\":1}}],[\"在接口配置中使用过滤器\",{\"0\":{\"84\":1}}],[\"在\",{\"1\":{\"65\":1,\"78\":1,\"93\":1}}],[\"在缺省情况下\",{\"1\":{\"14\":1}}],[\"在singleton服务中注入\",{\"1\":{\"10\":1}}],[\"在scoped或transient服务中注入\",{\"1\":{\"10\":1}}],[\"引发apiresponsestatusexception\",{\"1\":{\"13\":1}}],[\"引发apireturnnotsupportedexception\",{\"1\":{\"13\":1}}],[\"2722715\",{\"1\":{\"198\":1}}],[\"27\",{\"1\":{\"198\":1}}],[\"2764\",{\"1\":{\"143\":1}}],[\"25\",{\"1\":{\"198\":1}}],[\"2d\",{\"1\":{\"152\":1}}],[\"21\",{\"1\":{\"146\":1}}],[\"23\",{\"1\":{\"145\":1,\"198\":2}}],[\"221\",{\"1\":{\"145\":1}}],[\"225\",{\"1\":{\"144\":1}}],[\"26\",{\"1\":{\"145\":2}}],[\"2650\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"29\",{\"1\":{\"144\":1}}],[\"299\",{\"1\":{\"13\":1}}],[\"2\",{\"0\":{\"149\":1,\"195\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":2},\"1\":{\"83\":1,\"111\":1,\"120\":1,\"143\":3,\"144\":3,\"145\":3,\"146\":4,\"147\":4}}],[\"2018\",{\"1\":{\"198\":2}}],[\"204\",{\"1\":{\"18\":1}}],[\"200\",{\"1\":{\"13\":1}}],[\"到\",{\"1\":{\"13\":1}}],[\"默认实现将\",{\"1\":{\"99\":1,\"100\":1}}],[\"默认的缓存提供者为内存缓存\",{\"1\":{\"88\":1}}],[\"默认的\",{\"1\":{\"83\":1}}],[\"默认值\",{\"1\":{\"13\":1}}],[\"默认为\",{\"1\":{\"13\":1}}],[\"值可以使用\",{\"1\":{\"105\":1}}],[\"值为null则忽略序列化\",{\"1\":{\"168\":1}}],[\"值为\",{\"1\":{\"71\":1}}],[\"值\",{\"1\":{\"69\":1,\"70\":1,\"89\":1}}],[\"值不能大于\",{\"1\":{\"39\":1}}],[\"值时\",{\"1\":{\"13\":1}}],[\"值匹配时才生效\",{\"1\":{\"13\":1}}],[\"其要求实现iapiactionfilter接口\",{\"1\":{\"200\":1}}],[\"其名称为$前缀的接口类型名称\",{\"1\":{\"136\":1}}],[\"其还会丢弃旧\",{\"1\":{\"95\":1}}],[\"其\",{\"1\":{\"13\":1}}],[\"其存在以下规则\",{\"1\":{\"13\":1}}],[\"时间格式\",{\"1\":{\"168\":2}}],[\"时的\",{\"1\":{\"66\":1}}],[\"时\",{\"1\":{\"13\":2,\"135\":1}}],[\"各特性的位置\",{\"0\":{\"12\":1}}],[\"执行后顺序\",{\"1\":{\"11\":1}}],[\"执行前顺序\",{\"1\":{\"11\":1}}],[\"编写满足特定场景需求的特性\",{\"1\":{\"11\":1}}],[\"当我们需要为每个请求的url额外的动态添加一个叫sign的参数\",{\"1\":{\"199\":1}}],[\"当user参数不为null的情况\",{\"1\":{\"171\":1}}],[\"当方法的返回数据是userinfo类型的json或xml文本\",{\"1\":{\"163\":1,\"164\":1}}],[\"当实例生命超过配置的周期时\",{\"1\":{\"152\":1}}],[\"当请求域名是已知的常量时\",{\"1\":{\"20\":1}}],[\"当你想以特定的\",{\"1\":{\"14\":1}}],[\"当所有\",{\"1\":{\"13\":1}}],[\"当特性的\",{\"1\":{\"13\":2}}],[\"当然\",{\"1\":{\"11\":1}}],[\"当项目中有很多接口时就很有用\",{\"1\":{\"9\":1}}],[\"拿来即用就能满足一般情况下的各种应用\",{\"1\":{\"11\":1}}],[\"注意\",{\"1\":{\"134\":1}}],[\"注册与配置password模式的token提者选项\",{\"1\":{\"101\":1}}],[\"注册接口时添加uriqueryoauthtokenhandler\",{\"1\":{\"100\":1}}],[\"注册接口时添加oauthtokenhandler\",{\"1\":{\"100\":1}}],[\"注册\",{\"1\":{\"86\":1}}],[\"注册和配置接口\",{\"0\":{\"8\":1}}],[\"注入和调用接口\",{\"0\":{\"10\":1}}],[\"全局过滤器的执行优先级比非全局过滤器的要高\",{\"1\":{\"200\":1}}],[\"全局过滤器\",{\"0\":{\"200\":1}}],[\"全局过滤器集合\",{\"1\":{\"8\":1}}],[\"全局配置可以做为所有接口的默认初始配置\",{\"1\":{\"9\":1}}],[\"全局配置接口\",{\"0\":{\"9\":1}}],[\"birthday=2018\",{\"1\":{\"198\":1}}],[\"birthday\",{\"1\":{\"168\":1}}],[\"bitmap\",{\"1\":{\"89\":7}}],[\"by<\",{\"1\":{\"157\":1}}],[\"by\",{\"1\":{\"157\":3,\"158\":1}}],[\"bytes\",{\"1\":{\"53\":1}}],[\"bytearraycontent\",{\"1\":{\"53\":1,\"180\":1}}],[\"byte\",{\"1\":{\"15\":1}}],[\"beforerequestasync\",{\"1\":{\"192\":1}}],[\"be\",{\"1\":{\"157\":4,\"158\":3}}],[\"benchmarkdotnet\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"benchmarks\",{\"0\":{\"3\":1}}],[\"body\",{\"1\":{\"124\":1,\"157\":4,\"158\":8,\"177\":2,\"178\":3,\"180\":2}}],[\"build\",{\"1\":{\"150\":1}}],[\"builder\",{\"1\":{\"88\":3,\"100\":3,\"150\":5}}],[\"buildserviceprovider\",{\"1\":{\"8\":1}}],[\"basic\",{\"0\":{\"208\":1,\"211\":1}}],[\"base64\",{\"1\":{\"89\":1}}],[\"base\",{\"1\":{\"77\":1,\"85\":1,\"100\":1,\"104\":1,\"199\":1}}],[\"baseuri\",{\"1\":{\"62\":5}}],[\"baidu\",{\"1\":{\"74\":1,\"182\":1}}],[\"b\",{\"1\":{\"62\":12}}],[\"55\",{\"1\":{\"198\":2}}],[\"551\",{\"1\":{\"147\":1}}],[\"558\",{\"1\":{\"143\":1}}],[\"56\",{\"1\":{\"146\":1}}],[\"510\",{\"1\":{\"145\":1}}],[\"5493\",{\"1\":{\"144\":1,\"147\":1}}],[\"5798\",{\"1\":{\"145\":1}}],[\"57\",{\"1\":{\"144\":1,\"146\":1,\"147\":1}}],[\"575\",{\"1\":{\"144\":1}}],[\"50\",{\"1\":{\"143\":1}}],[\"5000\",{\"1\":{\"7\":1,\"8\":3,\"20\":1,\"81\":1,\"82\":1,\"83\":1,\"86\":1,\"101\":1,\"110\":1,\"111\":1}}],[\"5+\",{\"1\":{\"120\":1}}],[\"5\",{\"1\":{\"8\":2,\"65\":1,\"143\":2,\"144\":1,\"147\":1}}],[\"view\",{\"1\":{\"150\":1}}],[\"v0\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"v2\",{\"1\":{\"114\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"157\":1,\"158\":1}}],[\"version20\",{\"1\":{\"79\":1}}],[\"version=\",{\"1\":{\"8\":1}}],[\"validationattribute\",{\"1\":{\"57\":1}}],[\"values\",{\"1\":{\"157\":1}}],[\"value\",{\"1\":{\"18\":1,\"192\":1}}],[\"var\",{\"1\":{\"8\":3,\"10\":4,\"25\":1,\"56\":1,\"63\":1,\"64\":1,\"76\":2,\"82\":1,\"83\":2,\"85\":3,\"89\":5,\"100\":2,\"124\":4,\"150\":2,\"152\":2,\"160\":2,\"174\":2,\"175\":1,\"192\":3,\"194\":2,\"195\":2,\"196\":1,\"198\":2,\"199\":1,\"201\":1,\"202\":3}}],[\"void\",{\"1\":{\"8\":3,\"9\":1,\"60\":1,\"99\":1,\"100\":1,\"149\":1}}],[\"given\",{\"1\":{\"158\":2}}],[\"github\",{\"1\":{\"121\":1}}],[\"global\",{\"1\":{\"150\":1}}],[\"globalfilters\",{\"1\":{\"8\":1,\"84\":1,\"201\":1,\"202\":1}}],[\"gender=1\",{\"1\":{\"198\":1}}],[\"generic\",{\"1\":{\"157\":1,\"158\":1}}],[\"gen1\",{\"1\":{\"146\":1}}],[\"gen0\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"getaboutasync\",{\"1\":{\"198\":3}}],[\"getasync\",{\"1\":{\"7\":1,\"10\":4,\"20\":1,\"21\":1,\"26\":1,\"27\":1,\"31\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"47\":1,\"49\":1,\"51\":1,\"58\":1,\"63\":1,\"64\":2,\"68\":1,\"73\":1,\"74\":1,\"88\":1,\"124\":2,\"143\":2}}],[\"getbyidasync\",{\"1\":{\"170\":1,\"194\":1,\"195\":1,\"196\":1}}],[\"getbyid\",{\"1\":{\"170\":1}}],[\"getuserinfofromdbasync\",{\"1\":{\"175\":1}}],[\"getuserbyaccountasync\",{\"1\":{\"160\":2,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"183\":1,\"184\":2}}],[\"getuserbynameasync\",{\"1\":{\"158\":1}}],[\"getuserasync\",{\"1\":{\"149\":2,\"150\":2,\"152\":2,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1}}],[\"getpetbyidasync\",{\"1\":{\"157\":1}}],[\"getexecutingassembly\",{\"1\":{\"150\":1}}],[\"getjsonasync\",{\"1\":{\"144\":2}}],[\"getoptionsvalue\",{\"1\":{\"105\":1}}],[\"getimagebase64\",{\"1\":{\"89\":3}}],[\"getrequiredservice<itokenapi>\",{\"1\":{\"103\":1,\"104\":1}}],[\"getrequiredservice<iuserloginapi>\",{\"1\":{\"86\":1}}],[\"getrequiredservice<iuserapi>\",{\"1\":{\"10\":1}}],[\"getrequiredservice<signservice>\",{\"1\":{\"76\":1}}],[\"getrequiredservice<hostprovider>\",{\"1\":{\"74\":1}}],[\"get2async\",{\"1\":{\"41\":1}}],[\"get请求简单例子\",{\"0\":{\"160\":1}}],[\"get请求\",{\"1\":{\"21\":1}}],[\"get\",{\"0\":{\"159\":1},\"1\":{\"7\":2,\"41\":2,\"59\":2,\"69\":2,\"70\":4,\"74\":1,\"85\":1,\"89\":4,\"124\":1,\"150\":1,\"158\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"168\":5,\"171\":2,\"183\":1,\"184\":2,\"186\":1,\"187\":3,\"188\":3,\"189\":1,\"190\":1,\"198\":2,\"202\":3}}],[\"g\",{\"1\":{\"113\":1}}],[\"google\",{\"1\":{\"85\":1}}],[\"键值对序列化选项\",{\"1\":{\"8\":1}}],[\">获取token时返回的refresh\",{\"1\":{\"202\":1}}],[\">客户端密码<\",{\"1\":{\"202\":1}}],[\">客户端id<\",{\"1\":{\"202\":1}}],[\">提供token获取的url节点<\",{\"1\":{\"202\":1}}],[\">name\",{\"1\":{\"158\":1}}],[\">list\",{\"1\":{\"158\":2}}],[\">created\",{\"1\":{\"158\":1}}],[\">file\",{\"1\":{\"157\":1}}],[\">additional\",{\"1\":{\"157\":1}}],[\">updated\",{\"1\":{\"157\":2,\"158\":1}}],[\">id\",{\"1\":{\"157\":3}}],[\">the\",{\"1\":{\"158\":4}}],[\">tags\",{\"1\":{\"157\":1}}],[\">token提供者<\",{\"1\":{\"100\":1}}],[\">status\",{\"1\":{\"157\":1}}],[\">pet\",{\"1\":{\"157\":3}}],[\"><\",{\"1\":{\"100\":2,\"157\":1}}],[\">\",{\"1\":{\"8\":7,\"11\":6,\"131\":1}}],[\"everything\",{\"1\":{\"157\":1}}],[\"error\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"194\":1,\"195\":1}}],[\"e5\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"escapedatastring\",{\"1\":{\"100\":1}}],[\"existing\",{\"1\":{\"157\":1}}],[\"expiration\",{\"1\":{\"88\":1}}],[\"exception\",{\"1\":{\"63\":1,\"64\":1,\"195\":1}}],[\"ex\",{\"1\":{\"63\":10,\"194\":3,\"195\":4,\"196\":1}}],[\"extensions\",{\"1\":{\"6\":3,\"90\":1,\"106\":1,\"109\":1,\"142\":3}}],[\"emailaddress\",{\"1\":{\"58\":1}}],[\"email\",{\"1\":{\"25\":1,\"56\":1,\"58\":2,\"168\":1,\"174\":1}}],[\"empty\",{\"1\":{\"7\":2}}],[\"endpoint\",{\"1\":{\"97\":1,\"101\":1}}],[\"entry\",{\"1\":{\"88\":1}}],[\"enable\",{\"1\":{\"47\":1,\"157\":1}}],[\"ensuresuccessstatuscode\",{\"1\":{\"13\":1,\"14\":5}}],[\"ensurematchacceptcontenttype\",{\"1\":{\"13\":1,\"14\":5,\"71\":2}}],[\"environment\",{\"1\":{\"8\":3}}],[\"argumentnullexception\",{\"1\":{\"202\":3}}],[\"args\",{\"1\":{\"8\":1}}],[\"array\",{\"1\":{\"158\":2}}],[\"an\",{\"1\":{\"157\":2}}],[\"and\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"about\",{\"1\":{\"157\":1,\"158\":1,\"198\":3}}],[\"allowmultiple\",{\"1\":{\"192\":1}}],[\"allowmultiple为false时\",{\"1\":{\"155\":1}}],[\"allowmultiple为true时\",{\"1\":{\"155\":1}}],[\"alloc\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"allocated\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"aliasas\",{\"1\":{\"68\":1,\"167\":1,\"168\":1,\"192\":2}}],[\"aliasasattribute\",{\"1\":{\"68\":1}}],[\"avx\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"avatar\",{\"1\":{\"7\":1}}],[\"authtokenfilter\",{\"1\":{\"202\":1}}],[\"authorization\",{\"1\":{\"99\":1,\"100\":1}}],[\"autofacdependencyresolver\",{\"1\":{\"150\":1}}],[\"autofac\",{\"0\":{\"150\":1}}],[\"autorefreshcookiehandler\",{\"1\":{\"86\":4}}],[\"advanced\",{\"0\":{\"207\":1,\"210\":1}}],[\"admin\",{\"1\":{\"86\":1}}],[\"addformfieldasync\",{\"1\":{\"192\":1}}],[\"adduserwithjsonasync\",{\"1\":{\"177\":1}}],[\"addurlquery\",{\"1\":{\"76\":1,\"99\":1,\"199\":1}}],[\"additionalmetadata\",{\"1\":{\"157\":2}}],[\"addpetasync\",{\"1\":{\"157\":1}}],[\"addpasswordcredentialstokenprovider<ibaidu>\",{\"1\":{\"101\":1}}],[\"added\",{\"1\":{\"157\":2}}],[\"addasync\",{\"1\":{\"110\":1,\"124\":2}}],[\"addtokenprovider\",{\"1\":{\"105\":1}}],[\"addtokenprovider<iuserapi\",{\"1\":{\"104\":1}}],[\"addtokenprovider<iuserapi>\",{\"1\":{\"103\":1}}],[\"addquery\",{\"1\":{\"100\":1}}],[\"addoauthtokenhandler\",{\"1\":{\"100\":2}}],[\"addclientcredentialstokenprovider<iuserapi>\",{\"1\":{\"97\":1}}],[\"addsingleton<iresponsecacheprovider\",{\"1\":{\"88\":1}}],[\"addhttpapi<imywebapi>\",{\"1\":{\"149\":1}}],[\"addhttpapi<iuserloginapi>\",{\"1\":{\"86\":1}}],[\"addhttpapi<iuserapi>\",{\"1\":{\"8\":3,\"60\":1,\"70\":1,\"79\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"100\":2,\"107\":1}}],[\"addhttpmessagehandler\",{\"1\":{\"86\":1}}],[\"add\",{\"1\":{\"82\":1,\"84\":1,\"110\":1,\"111\":1,\"157\":1,\"201\":1,\"202\":1}}],[\"address\",{\"1\":{\"81\":1}}],[\"addwebapiclient\",{\"1\":{\"9\":1,\"66\":1,\"78\":1}}],[\"aot才能正常使用\",{\"1\":{\"136\":1}}],[\"aot的文档\",{\"1\":{\"134\":1}}],[\"aot\",{\"0\":{\"78\":1,\"136\":1},\"1\":{\"120\":1,\"123\":1}}],[\"age=18\",{\"1\":{\"180\":1}}],[\"agent\",{\"1\":{\"111\":1}}],[\"age\",{\"1\":{\"64\":1,\"69\":2,\"70\":2,\"110\":1,\"180\":1}}],[\"a\",{\"1\":{\"62\":14,\"157\":3,\"168\":1}}],[\"attributetargets\",{\"1\":{\"192\":1}}],[\"attributeusage\",{\"1\":{\"192\":1}}],[\"attributes\",{\"1\":{\"66\":1,\"157\":1,\"158\":1}}],[\"attribute\",{\"1\":{\"54\":1,\"192\":1}}],[\"actiondescriptor\",{\"1\":{\"66\":1}}],[\"action\",{\"0\":{\"19\":1}}],[\"access\",{\"1\":{\"99\":1,\"100\":2}}],[\"accept\",{\"1\":{\"111\":1}}],[\"acceptquality\",{\"1\":{\"13\":1,\"14\":2}}],[\"acceptcontenttype\",{\"1\":{\"13\":3,\"85\":2}}],[\"account=\",{\"1\":{\"198\":1}}],[\"account=laojiu>\",{\"1\":{\"160\":1}}],[\"account=laojiu\",{\"1\":{\"124\":2,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"178\":3,\"180\":2,\"184\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"198\":1}}],[\"account\",{\"1\":{\"7\":2,\"25\":1,\"56\":1,\"59\":1,\"86\":4,\"124\":2,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"168\":1,\"171\":1,\"174\":1,\"182\":1,\"183\":4,\"184\":1,\"186\":1,\"187\":1,\"188\":1,\"198\":1}}],[\"await异步编程方式\",{\"1\":{\"196\":1}}],[\"await\",{\"1\":{\"10\":2,\"63\":1,\"64\":1,\"85\":1,\"124\":2,\"149\":1,\"150\":1,\"152\":1,\"160\":1,\"174\":1,\"175\":1,\"192\":1,\"194\":1,\"195\":1,\"198\":1,\"202\":2}}],[\"as<imywebapi>\",{\"1\":{\"150\":1}}],[\"as<ihttpapifactory<imywebapi>>\",{\"1\":{\"150\":1}}],[\"assembly\",{\"1\":{\"150\":1}}],[\"asax\",{\"1\":{\"150\":1}}],[\"asp\",{\"0\":{\"149\":1,\"150\":1,\"175\":1},\"1\":{\"112\":1}}],[\"aspnetcore\",{\"1\":{\"8\":1}}],[\"async\",{\"1\":{\"10\":2,\"85\":1,\"149\":1,\"150\":1,\"175\":1,\"192\":1,\"202\":2}}],[\"applyto\",{\"1\":{\"175\":1}}],[\"applicaiton\",{\"1\":{\"70\":1}}],[\"application\",{\"1\":{\"7\":2,\"71\":2,\"85\":2,\"111\":3,\"150\":1}}],[\"appjsonserializercontext\",{\"1\":{\"78\":2}}],[\"app\",{\"1\":{\"8\":1}}],[\"apiparameterdescriptor\",{\"1\":{\"192\":1}}],[\"apiparametercontext\",{\"1\":{\"77\":1,\"85\":1,\"89\":1}}],[\"apiactionfilterattribute\",{\"1\":{\"199\":1}}],[\"apiactioncontext\",{\"1\":{\"192\":1,\"199\":1,\"201\":2}}],[\"apiaction\",{\"1\":{\"85\":1}}],[\"apireturnattribute\",{\"1\":{\"85\":1}}],[\"apiresponsecontext\",{\"1\":{\"84\":1,\"85\":1,\"87\":1}}],[\"apiresponsestatusexception\",{\"1\":{\"63\":1}}],[\"apirequestcontext\",{\"1\":{\"66\":1,\"74\":1,\"76\":1,\"84\":1,\"99\":1}}],[\"apifilterattribute\",{\"1\":{\"66\":1,\"76\":2}}],[\"apiinvalidconfigexception\",{\"1\":{\"63\":1}}],[\"apiexception\",{\"1\":{\"63\":4}}],[\"api\",{\"1\":{\"7\":5,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"41\":2,\"47\":2,\"49\":1,\"51\":1,\"52\":1,\"53\":3,\"55\":1,\"56\":1,\"58\":1,\"59\":1,\"63\":1,\"64\":1,\"66\":2,\"68\":2,\"74\":2,\"86\":5,\"97\":1,\"101\":3,\"119\":1,\"124\":7,\"157\":3,\"160\":2,\"174\":2}}],[\"mm\",{\"1\":{\"168\":3}}],[\"mulitparttext\",{\"1\":{\"179\":2}}],[\"mulitpartfile\",{\"1\":{\"157\":1,\"179\":2}}],[\"mulitpartcontent\",{\"1\":{\"157\":1,\"179\":3}}],[\"multi\",{\"1\":{\"65\":2}}],[\"multipart\",{\"1\":{\"7\":1,\"29\":1,\"34\":1,\"35\":1,\"52\":1,\"55\":1}}],[\"mvc\",{\"0\":{\"150\":1}}],[\"myfilter\",{\"1\":{\"201\":2}}],[\"myglobalfilter\",{\"1\":{\"201\":2}}],[\"mywebapi\",{\"1\":{\"149\":2,\"150\":2,\"152\":2,\"160\":2,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":2}}],[\"mytoken=\",{\"1\":{\"100\":1}}],[\"mytoken\",{\"1\":{\"99\":1,\"100\":1}}],[\"median\",{\"1\":{\"146\":1,\"147\":1}}],[\"mediatypewithqualityheadervalue\",{\"1\":{\"85\":1}}],[\"mediatypeheadervalue\",{\"1\":{\"85\":1}}],[\"mean\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"memorystream\",{\"1\":{\"85\":1,\"89\":1}}],[\"method\",{\"1\":{\"71\":1,\"76\":1,\"111\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"model\",{\"1\":{\"77\":2,\"89\":2}}],[\"minimumlength\",{\"1\":{\"59\":2,\"171\":2}}],[\"microsoft\",{\"1\":{\"8\":2}}],[\"maxcount\",{\"1\":{\"64\":1}}],[\"max\",{\"1\":{\"14\":1}}],[\"main\",{\"1\":{\"8\":1}}],[\"matter\",{\"1\":{\"1\":1}}],[\"unsubscriber\",{\"1\":{\"196\":1}}],[\"unitycontainerextension\",{\"1\":{\"8\":1}}],[\"unitycontainer\",{\"1\":{\"8\":1}}],[\"unity\",{\"1\":{\"8\":5}}],[\"uploadasync\",{\"1\":{\"192\":2}}],[\"upload\",{\"1\":{\"192\":2}}],[\"uploadfileasync\",{\"1\":{\"157\":1}}],[\"uploadimage\",{\"1\":{\"157\":1}}],[\"upload<\",{\"1\":{\"157\":1}}],[\"uploads\",{\"1\":{\"157\":1}}],[\"updateuserwithmulitpartasync\",{\"1\":{\"179\":3}}],[\"updateuserwithformasync\",{\"1\":{\"178\":2,\"180\":2}}],[\"updateuserwithxmlasync\",{\"1\":{\"177\":1}}],[\"updateuserasync\",{\"1\":{\"158\":1,\"178\":1}}],[\"updatewithjsonasync\",{\"1\":{\"171\":1,\"172\":1}}],[\"updatewithjson\",{\"1\":{\"171\":1,\"172\":1}}],[\"updated\",{\"1\":{\"158\":1}}],[\"updated<\",{\"1\":{\"157\":1,\"158\":1}}],[\"update<\",{\"1\":{\"157\":1}}],[\"updatepetwithformasync\",{\"1\":{\"157\":1}}],[\"updatepetasync\",{\"1\":{\"157\":1}}],[\"updates\",{\"1\":{\"157\":1}}],[\"update\",{\"1\":{\"157\":1}}],[\"updateasync\",{\"1\":{\"85\":1}}],[\"uwp\",{\"1\":{\"135\":1}}],[\"using\",{\"1\":{\"10\":1,\"89\":1,\"157\":10,\"158\":10}}],[\"use\",{\"1\":{\"158\":1}}],[\"usecamelcase\",{\"1\":{\"152\":1}}],[\"usetokenresult\",{\"1\":{\"99\":1,\"100\":1}}],[\"useproxy\",{\"1\":{\"81\":1}}],[\"useparameterpropertyvalidate\",{\"1\":{\"60\":1,\"152\":1}}],[\"usejsonfirstapiactiondescriptor\",{\"1\":{\"66\":2}}],[\"uselogging\",{\"1\":{\"8\":3}}],[\"user的xml文本\",{\"1\":{\"177\":1}}],[\"user的json文本\",{\"1\":{\"177\":1}}],[\"user1\",{\"1\":{\"124\":1,\"158\":1,\"195\":1}}],[\"userinfo\",{\"1\":{\"124\":2,\"163\":1,\"168\":1,\"171\":2,\"172\":1,\"177\":2,\"178\":3,\"179\":3,\"198\":1}}],[\"useredisresponsecacheprovider\",{\"1\":{\"88\":1}}],[\"usereturnvaluepropertyvalidate\",{\"1\":{\"60\":1,\"152\":1}}],[\"userfiler\",{\"1\":{\"84\":2}}],[\"useranme\",{\"1\":{\"81\":1}}],[\"userapi\",{\"1\":{\"10\":7,\"64\":1,\"194\":1,\"195\":1,\"196\":1,\"198\":2}}],[\"username\",{\"1\":{\"81\":1,\"101\":2,\"158\":11,\"182\":1}}],[\"user\",{\"1\":{\"7\":9,\"10\":2,\"20\":2,\"22\":2,\"23\":2,\"24\":2,\"28\":2,\"29\":2,\"32\":2,\"33\":2,\"34\":2,\"35\":2,\"36\":2,\"37\":2,\"47\":2,\"52\":2,\"55\":2,\"59\":4,\"66\":2,\"74\":2,\"78\":1,\"85\":2,\"108\":2,\"111\":1,\"124\":7,\"149\":1,\"150\":3,\"152\":2,\"158\":23,\"160\":2,\"161\":2,\"163\":2,\"164\":2,\"165\":2,\"167\":2,\"170\":1,\"171\":2,\"172\":2,\"174\":1,\"175\":3,\"177\":6,\"178\":9,\"179\":9,\"180\":6,\"186\":2,\"187\":2,\"188\":2,\"189\":2,\"190\":2,\"194\":1,\"198\":4}}],[\"users\",{\"1\":{\"7\":5,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"41\":2,\"47\":2,\"49\":1,\"51\":1,\"52\":1,\"53\":3,\"55\":1,\"56\":1,\"58\":1,\"59\":1,\"64\":1,\"66\":1,\"68\":2,\"74\":2,\"85\":1,\"86\":1,\"108\":1,\"158\":2}}],[\"urlstring\",{\"1\":{\"73\":1}}],[\"url\",{\"1\":{\"31\":1,\"184\":2,\"198\":3}}],[\"urlencoded提交\",{\"0\":{\"178\":1},\"1\":{\"192\":1}}],[\"urlencoded\",{\"1\":{\"7\":1,\"28\":1,\"32\":1,\"33\":1,\"45\":1,\"70\":1}}],[\"uri的格式\",{\"0\":{\"182\":1}}],[\"urivalue\",{\"1\":{\"100\":5}}],[\"uribuilder\",{\"1\":{\"100\":1}}],[\"uriqueryoauthtokenhandler\",{\"1\":{\"100\":3}}],[\"uriquerytoken\",{\"1\":{\"99\":1}}],[\"uriquerytokenattribute\",{\"1\":{\"99\":1}}],[\"uriattribute\",{\"0\":{\"38\":1,\"73\":1}}],[\"uri\",{\"0\":{\"62\":1,\"73\":1},\"1\":{\"8\":3,\"38\":5,\"49\":1,\"62\":4,\"65\":1,\"68\":1,\"73\":1,\"74\":1,\"76\":1,\"81\":2,\"82\":1,\"83\":1,\"97\":1,\"99\":1,\"100\":3,\"101\":1,\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"184\":5}}],[\"found\",{\"1\":{\"203\":1}}],[\"for\",{\"1\":{\"157\":1,\"158\":3}}],[\"formurlencodedcontent等等\",{\"1\":{\"180\":1}}],[\"formurlencodedcontent\",{\"1\":{\"180\":2}}],[\"formatoptions\",{\"1\":{\"124\":1,\"150\":1,\"152\":2,\"192\":1}}],[\"formmodel\",{\"1\":{\"70\":3}}],[\"formfieldjson\",{\"1\":{\"192\":4}}],[\"formfield\",{\"1\":{\"28\":2,\"33\":1,\"69\":1,\"178\":2,\"180\":1,\"192\":2}}],[\"formfieldattribute\",{\"0\":{\"28\":1,\"33\":1}}],[\"formdata\",{\"1\":{\"179\":4}}],[\"formdatatext\",{\"1\":{\"29\":2,\"35\":1}}],[\"formdatatextattribute\",{\"0\":{\"29\":1,\"35\":1}}],[\"formdatafile\",{\"0\":{\"55\":1},\"1\":{\"7\":1,\"34\":1,\"35\":1,\"55\":1}}],[\"formdatacontentattribute\",{\"0\":{\"34\":1}}],[\"formdatacontent\",{\"1\":{\"7\":1,\"29\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"52\":1,\"55\":1}}],[\"formcontentattribute\",{\"0\":{\"32\":1},\"1\":{\"65\":1,\"77\":1}}],[\"formcontent\",{\"1\":{\"7\":1,\"28\":1,\"124\":1,\"157\":2,\"178\":3}}],[\"form\",{\"0\":{\"69\":1,\"70\":1,\"178\":1,\"179\":1},\"1\":{\"7\":2,\"28\":1,\"29\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"45\":2,\"52\":1,\"55\":1,\"70\":2,\"102\":2,\"157\":1,\"178\":4,\"192\":1}}],[\"fetched\",{\"1\":{\"158\":1}}],[\"fragment\",{\"1\":{\"182\":1}}],[\"framework\",{\"1\":{\"120\":1}}],[\"from\",{\"1\":{\"198\":1}}],[\"fromseconds\",{\"1\":{\"195\":1,\"196\":1}}],[\"fromservices\",{\"1\":{\"149\":1}}],[\"frombody\",{\"1\":{\"175\":1}}],[\"fromminutes\",{\"1\":{\"79\":1,\"152\":1}}],[\"front\",{\"1\":{\"1\":1}}],[\"faces\",{\"1\":{\"89\":1}}],[\"facemodel\",{\"1\":{\"89\":5}}],[\"factory\",{\"1\":{\"79\":1}}],[\"false\",{\"1\":{\"13\":1,\"14\":1,\"47\":1,\"60\":2,\"71\":2,\"152\":2,\"157\":1,\"192\":1}}],[\"fullname\",{\"1\":{\"70\":1}}],[\"find\",{\"1\":{\"157\":1}}],[\"findpetsbytagsasync\",{\"1\":{\"157\":1}}],[\"findpetsbystatusasync\",{\"1\":{\"157\":1}}],[\"findbytags\",{\"1\":{\"157\":1}}],[\"findbystatus\",{\"1\":{\"157\":1}}],[\"finds\",{\"1\":{\"157\":2}}],[\"file\",{\"1\":{\"157\":2,\"179\":2}}],[\"fileinfo\",{\"0\":{\"52\":1},\"1\":{\"52\":1,\"55\":1}}],[\"filter<\",{\"1\":{\"157\":1}}],[\"filter特性可用于发送前最后一步的内容修改\",{\"1\":{\"46\":1}}],[\"filter\",{\"0\":{\"46\":1},\"1\":{\"76\":1,\"157\":1}}],[\"fieldy\",{\"1\":{\"192\":2}}],[\"fieldy=\",{\"1\":{\"192\":1}}],[\"fieldx=\",{\"1\":{\"192\":1}}],[\"fieldx=xxx\",{\"1\":{\"178\":2}}],[\"fieldx\",{\"1\":{\"178\":2,\"192\":2}}],[\"field2\",{\"1\":{\"69\":8,\"70\":5}}],[\"field\",{\"1\":{\"68\":2}}],[\"field1\",{\"1\":{\"33\":1,\"35\":1,\"69\":2,\"70\":2}}],[\"fieldvalue2\",{\"1\":{\"28\":1,\"29\":1}}],[\"fieldvalue1\",{\"1\":{\"28\":1,\"29\":1}}],[\"fieldname\",{\"1\":{\"68\":1,\"192\":2}}],[\"fieldname2\",{\"1\":{\"28\":1,\"29\":1}}],[\"fieldname1\",{\"1\":{\"28\":1,\"29\":1}}],[\"with\",{\"1\":{\"157\":1,\"158\":2}}],[\"withmillisecond\",{\"1\":{\"124\":1,\"150\":1,\"152\":1}}],[\"writelogasync\",{\"1\":{\"87\":1}}],[\"webapi\",{\"1\":{\"160\":2,\"161\":2,\"163\":2,\"164\":2,\"165\":2,\"167\":2,\"170\":1,\"171\":1,\"172\":1,\"174\":1,\"177\":4,\"178\":6,\"179\":6,\"180\":4,\"186\":2,\"187\":2,\"188\":2,\"189\":2,\"190\":2,\"198\":2}}],[\"webapiclient提供默认apiactionfilterattribute抽象基类\",{\"1\":{\"197\":1}}],[\"webapiclient提供了task对象转换为iobservable对象的扩展\",{\"1\":{\"196\":1}}],[\"webapiclient内置很多特性\",{\"1\":{\"191\":1}}],[\"webapiclient例子\",{\"0\":{\"174\":1}}],[\"webapiclient是对httpclient的封包\",{\"1\":{\"133\":1}}],[\"webapiclient怎么使用同步请求\",{\"0\":{\"133\":1}}],[\"webapiclient\",{\"0\":{\"120\":1,\"135\":1,\"136\":1},\"1\":{\"118\":1,\"120\":2,\"121\":2,\"123\":2,\"124\":1,\"134\":1,\"157\":4,\"158\":4,\"183\":3}}],[\"webapiclientcore要求项目的\",{\"1\":{\"5\":1}}],[\"webapiclientcore\",{\"0\":{\"3\":1,\"119\":1},\"1\":{\"6\":6,\"63\":1,\"66\":1,\"78\":1,\"90\":1,\"99\":1,\"100\":1,\"106\":1,\"109\":2,\"111\":1,\"112\":1,\"113\":1,\"114\":2,\"116\":1,\"119\":1,\"142\":6,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"webproxy\",{\"1\":{\"81\":1}}],[\"web\",{\"1\":{\"66\":1}}],[\"whencatch<httpstatusfailureexception>\",{\"1\":{\"195\":1,\"196\":1}}],[\"whencatch<httprequestexception>\",{\"1\":{\"64\":1}}],[\"whenresult\",{\"1\":{\"64\":1}}],[\"when\",{\"1\":{\"63\":4}}],[\"www\",{\"0\":{\"178\":1},\"1\":{\"7\":1,\"28\":1,\"32\":1,\"33\":1,\"45\":1,\"70\":1,\"124\":1,\"160\":2,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":2,\"182\":1,\"183\":3,\"192\":1}}],[\"xjson\",{\"1\":{\"192\":1}}],[\"x64\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"xeon\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"xdocument\",{\"1\":{\"116\":1}}],[\"xxxasync\",{\"1\":{\"101\":1}}],[\"xxx\",{\"1\":{\"101\":2,\"102\":1}}],[\"xxyyzz\",{\"1\":{\"97\":1,\"101\":1}}],[\"x\",{\"1\":{\"7\":1,\"28\":1,\"32\":1,\"33\":1,\"45\":1,\"70\":1,\"85\":2,\"192\":3}}],[\"xmlbody\",{\"1\":{\"177\":1}}],[\"xml值时\",{\"1\":{\"163\":1,\"164\":1}}],[\"xml内容转换为强类型模型\",{\"0\":{\"162\":1}}],[\"xmlformatter\",{\"1\":{\"152\":1}}],[\"xmlreturnattribute\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"xmlreturn\",{\"1\":{\"14\":1,\"164\":1}}],[\"xmldeserializeoptions\",{\"1\":{\"8\":1}}],[\"xmlserializeoptions\",{\"1\":{\"8\":1}}],[\"xmlcontentattribute\",{\"0\":{\"37\":1}}],[\"xmlcontent\",{\"1\":{\"7\":1,\"37\":1,\"177\":2}}],[\"xml\",{\"1\":{\"7\":1,\"8\":2,\"14\":1,\"17\":1,\"37\":1,\"44\":2,\"71\":1,\"85\":1,\"111\":1}}],[\"current\",{\"1\":{\"158\":1}}],[\"customtokenprovider\",{\"1\":{\"104\":2}}],[\"customtokenprovider>\",{\"1\":{\"104\":1}}],[\"customloggingattribute\",{\"1\":{\"87\":1}}],[\"customlogging\",{\"1\":{\"87\":1}}],[\"customheaders\",{\"1\":{\"41\":2}}],[\"cpu\",{\"1\":{\"143\":2,\"144\":2,\"145\":2,\"146\":2,\"147\":2}}],[\"centos\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"cecil修改编译得到的程序集\",{\"1\":{\"136\":1}}],[\"cs\",{\"1\":{\"150\":1}}],[\"cs配置依赖注入\",{\"1\":{\"149\":1}}],[\"cshtml\",{\"1\":{\"116\":1}}],[\"csv\",{\"1\":{\"65\":2}}],[\"clear\",{\"1\":{\"158\":1}}],[\"clientsecret\",{\"1\":{\"102\":1,\"202\":4}}],[\"clientid\",{\"1\":{\"97\":1,\"101\":1,\"102\":1,\"202\":4}}],[\"client\",{\"0\":{\"96\":1},\"1\":{\"97\":2,\"101\":2,\"102\":1,\"202\":9}}],[\"clientcertificates\",{\"1\":{\"82\":1}}],[\"class\",{\"1\":{\"7\":1,\"8\":1,\"10\":2,\"41\":1,\"59\":1,\"69\":1,\"70\":2,\"74\":1,\"76\":1,\"77\":1,\"78\":1,\"84\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":1,\"89\":2,\"99\":1,\"100\":1,\"104\":1,\"149\":1,\"150\":1,\"168\":1,\"171\":1,\"187\":1,\"188\":1,\"192\":1,\"199\":1,\"201\":1,\"202\":1}}],[\"credentials方式的token过滤器\",{\"1\":{\"202\":1}}],[\"credentials\",{\"1\":{\"81\":1,\"97\":2,\"101\":4}}],[\"createtime\",{\"1\":{\"168\":1}}],[\"create<imywebapi>\",{\"1\":{\"160\":1,\"174\":1}}],[\"createwithlist\",{\"1\":{\"158\":1}}],[\"createwitharray\",{\"1\":{\"158\":1}}],[\"createuserswithlistinputasync\",{\"1\":{\"158\":1}}],[\"createuserswitharrayinputasync\",{\"1\":{\"158\":1}}],[\"createuserasync\",{\"1\":{\"158\":1}}],[\"creates\",{\"1\":{\"158\":2}}],[\"createscope\",{\"1\":{\"10\":1}}],[\"createhttpapi\",{\"1\":{\"150\":1}}],[\"create\",{\"1\":{\"135\":1,\"158\":1}}],[\"createcontainerextension\",{\"1\":{\"8\":1}}],[\"c\",{\"1\":{\"62\":12,\"124\":3,\"150\":5,\"152\":13,\"201\":2,\"202\":2}}],[\"collections\",{\"1\":{\"157\":1,\"158\":1}}],[\"collectionformat\",{\"1\":{\"65\":11}}],[\"cores\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"core\",{\"0\":{\"149\":1},\"1\":{\"112\":1,\"120\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"152\":1}}],[\"cookieauthorizationhandler\",{\"0\":{\"86\":1},\"1\":{\"86\":4}}],[\"cookie\",{\"1\":{\"83\":1,\"86\":5}}],[\"cookiecontainer\",{\"0\":{\"83\":1},\"1\":{\"83\":5}}],[\"componentmodel\",{\"1\":{\"152\":1,\"157\":1,\"158\":1,\"169\":1}}],[\"completedtask\",{\"1\":{\"76\":1,\"85\":1,\"87\":1,\"201\":2}}],[\"com与http\",{\"1\":{\"62\":1}}],[\"com\",{\"1\":{\"25\":1,\"56\":1,\"62\":13,\"81\":1,\"102\":1,\"121\":1,\"124\":1,\"160\":2,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":2,\"174\":1,\"182\":1,\"183\":3}}],[\"code\",{\"1\":{\"18\":1}}],[\"considered\",{\"1\":{\"157\":1}}],[\"console\",{\"1\":{\"8\":1,\"198\":1}}],[\"convert\",{\"1\":{\"89\":1}}],[\"configexception\",{\"1\":{\"63\":1}}],[\"configurenewtonsoftjson\",{\"1\":{\"107\":2}}],[\"configureprimaryhttpmessagehandler\",{\"1\":{\"81\":1,\"82\":1,\"83\":1}}],[\"configurehttpclient\",{\"1\":{\"79\":1}}],[\"configurehttpapi<imywebapi>\",{\"1\":{\"149\":1}}],[\"configurehttpapiconfig\",{\"1\":{\"124\":1,\"150\":1,\"152\":1,\"201\":1,\"202\":1}}],[\"configurehttpapi\",{\"1\":{\"8\":3,\"9\":1,\"60\":1,\"70\":1,\"78\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1}}],[\"configureservices\",{\"1\":{\"8\":1,\"9\":1,\"60\":1,\"149\":1}}],[\"controller\",{\"1\":{\"149\":1,\"150\":2}}],[\"controller代码\",{\"1\":{\"149\":1}}],[\"contributors\",{\"0\":{\"137\":1}}],[\"context\",{\"1\":{\"74\":3,\"76\":3,\"77\":2,\"84\":2,\"85\":8,\"87\":1,\"89\":3,\"99\":2,\"192\":4,\"199\":3,\"201\":2}}],[\"contenttype\",{\"1\":{\"85\":3}}],[\"content\",{\"0\":{\"71\":1},\"1\":{\"7\":4,\"13\":2,\"14\":1,\"71\":3,\"85\":5,\"89\":1,\"100\":2,\"111\":1}}],[\"containerbuilder\",{\"1\":{\"150\":1}}],[\"containerregistry\",{\"1\":{\"8\":1}}],[\"container\",{\"1\":{\"8\":3}}],[\"catch异常处理\",{\"0\":{\"194\":1}}],[\"catch\",{\"1\":{\"63\":6,\"194\":2,\"195\":3}}],[\"cacheattribute\",{\"0\":{\"49\":1},\"1\":{\"152\":1}}],[\"cache\",{\"0\":{\"48\":1},\"1\":{\"49\":1}}],[\"camelcase\",{\"1\":{\"9\":3}}],[\"cancellationtoken\",{\"0\":{\"51\":1},\"1\":{\"7\":5,\"51\":2,\"110\":1,\"165\":2}}],[\"p1=abc\",{\"1\":{\"182\":1}}],[\"pet<\",{\"1\":{\"157\":2}}],[\"petid\",{\"1\":{\"157\":12}}],[\"pet\",{\"1\":{\"157\":18}}],[\"pets\",{\"1\":{\"157\":3}}],[\"petstore\",{\"1\":{\"114\":1,\"157\":2,\"158\":2}}],[\"physical\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"pipes\",{\"1\":{\"65\":2}}],[\"port\",{\"1\":{\"182\":1}}],[\"position\",{\"1\":{\"85\":1}}],[\"post请求\",{\"1\":{\"22\":1}}],[\"postasync\",{\"1\":{\"20\":1,\"22\":1,\"28\":1,\"29\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"52\":1,\"53\":3,\"55\":1,\"59\":1,\"66\":2,\"69\":1,\"74\":1,\"77\":1,\"89\":1,\"108\":1}}],[\"postformdataasync\",{\"1\":{\"7\":1}}],[\"postformasync\",{\"1\":{\"7\":1}}],[\"postxmlasync\",{\"1\":{\"7\":1,\"146\":2}}],[\"postjsonasync\",{\"1\":{\"7\":1,\"145\":2}}],[\"post\",{\"0\":{\"176\":1},\"1\":{\"7\":4,\"111\":1,\"124\":1,\"177\":1,\"178\":3,\"179\":3,\"180\":2}}],[\"polly\",{\"1\":{\"64\":1}}],[\"plain\",{\"1\":{\"42\":1,\"71\":1}}],[\"put\",{\"0\":{\"176\":1},\"1\":{\"177\":1}}],[\"putformasync\",{\"1\":{\"147\":2}}],[\"putasync\",{\"1\":{\"23\":1}}],[\"put请求\",{\"1\":{\"23\":1}}],[\"public\",{\"1\":{\"7\":4,\"8\":3,\"9\":1,\"10\":6,\"12\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":4,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"58\":1,\"59\":4,\"60\":1,\"64\":1,\"66\":1,\"68\":1,\"69\":4,\"70\":6,\"71\":1,\"73\":1,\"74\":5,\"76\":3,\"77\":2,\"78\":1,\"84\":3,\"85\":6,\"86\":3,\"87\":2,\"88\":5,\"89\":8,\"99\":3,\"100\":2,\"101\":3,\"102\":1,\"104\":2,\"108\":1,\"110\":1,\"124\":1,\"149\":4,\"150\":4,\"152\":1,\"157\":1,\"158\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"168\":6,\"171\":3,\"174\":1,\"175\":1,\"183\":1,\"184\":1,\"187\":3,\"188\":3,\"192\":1,\"198\":1,\"199\":2,\"201\":2,\"202\":5}}],[\"prependjsonserializercontext\",{\"1\":{\"78\":1}}],[\"private\",{\"1\":{\"10\":2,\"86\":1,\"89\":1,\"202\":3}}],[\"prism\",{\"1\":{\"8\":2}}],[\"propertiesautowired\",{\"1\":{\"150\":1}}],[\"propertynamingpolicy\",{\"1\":{\"9\":3}}],[\"protobufcontent\",{\"1\":{\"85\":1}}],[\"protobufcontentattribute\",{\"1\":{\"85\":1}}],[\"protobufreturn\",{\"1\":{\"85\":1}}],[\"protobufreturnattribute\",{\"1\":{\"85\":2}}],[\"protobuf\",{\"1\":{\"85\":3}}],[\"protected\",{\"1\":{\"8\":2,\"77\":1,\"85\":1,\"86\":1,\"87\":1,\"99\":1,\"100\":1,\"104\":2,\"202\":2}}],[\"proxy\",{\"1\":{\"81\":2}}],[\"pass\",{\"1\":{\"157\":1}}],[\"password=\",{\"1\":{\"198\":1}}],[\"password=123456\",{\"1\":{\"124\":1,\"178\":3,\"180\":2,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"198\":1}}],[\"password\",{\"1\":{\"7\":1,\"59\":1,\"81\":1,\"86\":1,\"101\":2,\"102\":1,\"124\":1,\"158\":3,\"168\":2,\"171\":1,\"182\":2,\"186\":1,\"187\":1,\"188\":1,\"198\":1}}],[\"pasword\",{\"1\":{\"81\":1}}],[\"path\",{\"1\":{\"62\":1,\"77\":1,\"182\":1}}],[\"path2\",{\"1\":{\"62\":3}}],[\"path1\",{\"1\":{\"62\":7,\"182\":1}}],[\"pathquery\",{\"1\":{\"31\":1,\"65\":5,\"73\":1,\"85\":1,\"189\":4}}],[\"pathqueryattribute\",{\"0\":{\"31\":1},\"1\":{\"31\":1,\"65\":1}}],[\"patch+json\",{\"1\":{\"173\":1}}],[\"patch\",{\"1\":{\"173\":1,\"175\":1}}],[\"patch是为客户端能够局部更新服务端已存在的资源而设计的一种标准交互\",{\"1\":{\"173\":1}}],[\"patchasync\",{\"1\":{\"25\":1,\"56\":1,\"174\":2}}],[\"patch请求方法\",{\"1\":{\"173\":1}}],[\"patch请求\",{\"0\":{\"173\":1},\"1\":{\"25\":1}}],[\"params\",{\"1\":{\"111\":1}}],[\"param>\",{\"1\":{\"100\":3,\"157\":13,\"158\":9,\"202\":4}}],[\"parameterables\",{\"1\":{\"157\":1,\"158\":1}}],[\"parametervalue\",{\"1\":{\"85\":2}}],[\"parameters\",{\"1\":{\"66\":1}}],[\"parameter\",{\"0\":{\"30\":1},\"1\":{\"102\":2,\"177\":2,\"178\":4,\"179\":4,\"190\":2,\"192\":4}}],[\"parameterclass\",{\"1\":{\"12\":2}}],[\"partial\",{\"1\":{\"8\":1,\"78\":1}}],[\"dd\",{\"1\":{\"168\":2}}],[\"dll就能使用\",{\"1\":{\"135\":1}}],[\"display\",{\"1\":{\"115\":1}}],[\"dictionary<string\",{\"1\":{\"41\":1}}],[\"drawing\",{\"1\":{\"89\":1}}],[\"datetimeformats\",{\"1\":{\"124\":1,\"150\":1,\"152\":1}}],[\"datetimeformat\",{\"1\":{\"124\":1,\"150\":1,\"152\":1,\"168\":2}}],[\"datetime\",{\"1\":{\"76\":1,\"168\":2,\"199\":1}}],[\"data提交\",{\"0\":{\"179\":1}}],[\"dataannotations\",{\"1\":{\"157\":2,\"158\":2,\"166\":1,\"169\":1}}],[\"dataannotations验证特性\",{\"1\":{\"152\":1}}],[\"datatype\",{\"1\":{\"85\":1}}],[\"datas\",{\"1\":{\"63\":1}}],[\"data\",{\"1\":{\"7\":1,\"29\":1,\"34\":1,\"35\":1,\"52\":1,\"55\":1,\"65\":1,\"157\":2}}],[\"d\",{\"1\":{\"62\":12}}],[\"do\",{\"1\":{\"201\":2}}],[\"doc\",{\"1\":{\"25\":4,\"56\":4,\"174\":5,\"175\":2}}],[\"dotnetcore\",{\"1\":{\"121\":1}}],[\"dotnet\",{\"1\":{\"6\":1,\"113\":1,\"142\":1}}],[\"dependencyresolver\",{\"1\":{\"150\":1}}],[\"dependencyinjection\",{\"1\":{\"8\":2}}],[\"deserialize\",{\"1\":{\"85\":1}}],[\"deleteuserasync\",{\"1\":{\"158\":1}}],[\"deleted<\",{\"1\":{\"158\":1}}],[\"delete\",{\"1\":{\"158\":1}}],[\"deletepetasync\",{\"1\":{\"157\":1}}],[\"delete<\",{\"1\":{\"157\":1}}],[\"deletes\",{\"1\":{\"157\":1}}],[\"deleteasync\",{\"1\":{\"24\":1}}],[\"delete请求\",{\"0\":{\"176\":1},\"1\":{\"24\":1}}],[\"demoapimethod\",{\"1\":{\"12\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1}}],[\"demoapiinterface\",{\"1\":{\"12\":1}}],[\"defaultversionpolicy\",{\"1\":{\"79\":1}}],[\"defaultrequestversion\",{\"1\":{\"79\":1}}],[\"default\",{\"1\":{\"7\":5,\"18\":1,\"51\":1,\"78\":1,\"110\":1}}],[\"=>\",{\"1\":{\"8\":3,\"9\":1,\"25\":2,\"56\":2,\"60\":1,\"64\":1,\"70\":1,\"77\":1,\"78\":1,\"79\":1,\"81\":2,\"82\":2,\"83\":2,\"84\":1,\"86\":1,\"88\":1,\"97\":1,\"100\":1,\"101\":1,\"103\":1,\"107\":1,\"124\":1,\"150\":3,\"152\":1,\"174\":2,\"195\":1,\"196\":3,\"201\":1,\"202\":1}}],[\"=\",{\"1\":{\"7\":7,\"8\":9,\"9\":3,\"10\":6,\"14\":11,\"25\":1,\"47\":1,\"51\":1,\"56\":1,\"59\":2,\"60\":2,\"62\":6,\"63\":1,\"64\":1,\"65\":6,\"70\":1,\"71\":1,\"74\":4,\"76\":2,\"79\":3,\"81\":7,\"82\":2,\"83\":4,\"85\":10,\"86\":3,\"89\":6,\"97\":3,\"100\":5,\"101\":5,\"107\":1,\"110\":1,\"124\":8,\"149\":1,\"150\":4,\"152\":14,\"157\":1,\"160\":2,\"171\":2,\"174\":2,\"175\":1,\"192\":4,\"194\":2,\"195\":2,\"196\":1,\"198\":3,\"199\":1,\"201\":1,\"202\":6}}],[\"i\",{\"1\":{\"195\":2,\"196\":2}}],[\"ienumerable<user>\",{\"1\":{\"158\":2}}],[\"ienumerable<string>\",{\"1\":{\"157\":1}}],[\"ienumerable<anonymous>\",{\"1\":{\"157\":1}}],[\"ienumerable<keyvalue>\",{\"1\":{\"77\":1}}],[\"ipetapi\",{\"0\":{\"157\":1},\"1\":{\"157\":1}}],[\"iprotobufapi\",{\"1\":{\"85\":1}}],[\"imywebapi\",{\"1\":{\"149\":2,\"150\":2,\"152\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"174\":1,\"183\":1,\"184\":1}}],[\"imaging\",{\"1\":{\"89\":1}}],[\"imageformat\",{\"1\":{\"89\":1}}],[\"image\",{\"1\":{\"89\":2,\"157\":1}}],[\"image2\",{\"1\":{\"89\":6}}],[\"image1\",{\"1\":{\"89\":6}}],[\"ihttpapi\",{\"1\":{\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"157\":1,\"158\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"174\":1,\"183\":1,\"184\":1,\"198\":1,\"199\":1}}],[\"ios\",{\"1\":{\"135\":1}}],[\"io\",{\"1\":{\"114\":1,\"157\":1,\"158\":1}}],[\"ignoreserialized\",{\"1\":{\"168\":1}}],[\"ignorewhennull和datetimeformat多个属性\",{\"1\":{\"189\":1}}],[\"ignorewhennull\",{\"1\":{\"168\":1}}],[\"ignore\",{\"1\":{\"107\":1}}],[\"ibaidu\",{\"1\":{\"101\":7}}],[\"iwebapiclientbuilder\",{\"1\":{\"88\":2}}],[\"iuserloginapi\",{\"1\":{\"86\":6}}],[\"iuserapi\",{\"0\":{\"158\":1},\"1\":{\"7\":1,\"10\":2,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"58\":1,\"59\":1,\"64\":1,\"66\":2,\"68\":1,\"69\":1,\"71\":1,\"73\":1,\"74\":1,\"76\":1,\"77\":1,\"86\":4,\"87\":1,\"99\":2,\"108\":1,\"110\":1,\"124\":1,\"158\":1,\"198\":2,\"199\":1}}],[\"itokenapi\",{\"1\":{\"102\":1}}],[\"itokenproviderbuilder\",{\"1\":{\"105\":2}}],[\"itokenprovider\",{\"0\":{\"93\":1},\"1\":{\"92\":2,\"94\":2,\"100\":1}}],[\"itokenproviderfactory\",{\"0\":{\"92\":1},\"1\":{\"94\":1}}],[\"itask<bool>\",{\"1\":{\"192\":2}}],[\"itask<boo>\",{\"1\":{\"124\":1}}],[\"itask<apiresponse>\",{\"1\":{\"157\":1}}],[\"itask<pet>\",{\"1\":{\"157\":1}}],[\"itask<list<pet>>\",{\"1\":{\"157\":2}}],[\"itask<httpresponsemessage>\",{\"1\":{\"157\":4,\"158\":6,\"160\":1,\"161\":1,\"170\":1}}],[\"itask<stream>和itask<byte\",{\"1\":{\"131\":1}}],[\"itask<string>\",{\"1\":{\"68\":1,\"158\":1,\"167\":1,\"183\":1,\"184\":2}}],[\"itask<userinfo>\",{\"1\":{\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"163\":1,\"164\":1,\"165\":1,\"171\":1,\"172\":1,\"177\":2,\"178\":3,\"179\":3,\"180\":2,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1}}],[\"itask<user>\",{\"1\":{\"64\":1,\"73\":1,\"158\":1}}],[\"itask<jsonrpcresult<user>>\",{\"1\":{\"110\":1}}],[\"itask<>可以精确控制某个方法的重试逻辑\",{\"1\":{\"64\":1}}],[\"item\",{\"1\":{\"25\":4,\"56\":4,\"77\":2,\"174\":4}}],[\"iresponsecacheprovider\",{\"1\":{\"48\":1,\"88\":1}}],[\"ifaceapi\",{\"1\":{\"89\":1}}],[\"if\",{\"1\":{\"18\":1,\"85\":1}}],[\"iapiactionfilter\",{\"1\":{\"201\":1}}],[\"iapiactionfilterattribute接口\",{\"1\":{\"191\":1}}],[\"iapiactionattribute\",{\"1\":{\"11\":1,\"12\":1}}],[\"iapifilter\",{\"1\":{\"84\":2}}],[\"iapifilterattribute\",{\"1\":{\"11\":2,\"12\":2,\"84\":2}}],[\"iapiparameterable接口和iapireturnattribute接口的一个或多个接口\",{\"1\":{\"191\":1}}],[\"iapiparameterattribute接口\",{\"1\":{\"191\":1}}],[\"iapiparameterattribute\",{\"1\":{\"11\":1,\"12\":1,\"192\":1}}],[\"iapiparameter\",{\"0\":{\"54\":1},\"1\":{\"54\":1,\"89\":2}}],[\"iapireturnattribute\",{\"1\":{\"11\":2,\"12\":2}}],[\"icontainerregistry\",{\"1\":{\"8\":1}}],[\"icontainerextension\",{\"1\":{\"8\":1}}],[\"input\",{\"1\":{\"158\":2}}],[\"in\",{\"1\":{\"157\":1,\"158\":2}}],[\"instanceperhttprequest\",{\"1\":{\"150\":1}}],[\"install\",{\"1\":{\"113\":1}}],[\"index\",{\"1\":{\"149\":1,\"150\":1}}],[\"innerexception\",{\"1\":{\"63\":4}}],[\"into\",{\"1\":{\"158\":1}}],[\"intel\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"interface\",{\"1\":{\"7\":1,\"12\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"58\":1,\"59\":1,\"64\":1,\"66\":1,\"68\":1,\"69\":1,\"71\":2,\"73\":1,\"74\":1,\"76\":2,\"77\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"99\":2,\"101\":3,\"102\":1,\"108\":1,\"110\":1,\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"157\":1,\"158\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"174\":1,\"183\":1,\"184\":1,\"198\":1,\"199\":1}}],[\"int\",{\"1\":{\"39\":1,\"69\":1,\"70\":1,\"110\":1,\"180\":1}}],[\"include=\",{\"1\":{\"8\":1}}],[\"iso8601\",{\"1\":{\"124\":1,\"150\":1,\"152\":1}}],[\"issues\",{\"1\":{\"121\":1}}],[\"isunauthorizedasync\",{\"1\":{\"86\":1}}],[\"is\",{\"1\":{\"18\":1,\"63\":4,\"198\":1}}],[\"iserviceprovider\",{\"1\":{\"104\":3}}],[\"iservicescopefactory\",{\"1\":{\"10\":2}}],[\"iservicecollection\",{\"1\":{\"8\":1,\"9\":1,\"60\":1,\"149\":1}}],[\"isdevelopment\",{\"1\":{\"8\":3}}],[\"id的参数要求必填且最大长度为10的字符串\",{\"1\":{\"170\":1}}],[\"id=002\",{\"1\":{\"65\":1}}],[\"id=001|002\",{\"1\":{\"65\":1}}],[\"id=001\",{\"1\":{\"65\":4}}],[\"id001\",{\"1\":{\"10\":2,\"64\":1,\"149\":1,\"150\":1,\"152\":1,\"174\":1,\"194\":1,\"195\":1,\"196\":1}}],[\"id\",{\"1\":{\"7\":2,\"10\":2,\"20\":1,\"21\":2,\"25\":2,\"26\":2,\"27\":2,\"31\":2,\"39\":2,\"40\":2,\"41\":4,\"47\":2,\"49\":2,\"51\":2,\"53\":3,\"56\":2,\"64\":3,\"65\":1,\"73\":1,\"74\":2,\"85\":2,\"97\":1,\"101\":1,\"103\":1,\"104\":1,\"111\":1,\"149\":2,\"150\":2,\"152\":2,\"157\":2,\"170\":2,\"174\":1,\"175\":2,\"202\":5}}],[\"hh\",{\"1\":{\"168\":1}}],[\"help\",{\"1\":{\"115\":2}}],[\"head请求\",{\"0\":{\"159\":1}}],[\"headimage\",{\"1\":{\"34\":1,\"35\":1,\"52\":1,\"55\":1}}],[\"headers\",{\"1\":{\"41\":4,\"85\":1}}],[\"headersattribute\",{\"0\":{\"41\":1}}],[\"headervalue2\",{\"1\":{\"26\":1}}],[\"headervalue1\",{\"1\":{\"26\":1}}],[\"headername2\",{\"1\":{\"26\":1}}],[\"headername1\",{\"1\":{\"26\":1,\"40\":1,\"41\":2}}],[\"header\",{\"1\":{\"26\":2,\"40\":1,\"154\":1,\"157\":1}}],[\"headerattribute\",{\"0\":{\"26\":1,\"40\":1}}],[\"handler\",{\"1\":{\"82\":3,\"83\":3}}],[\"host\",{\"1\":{\"74\":2,\"111\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"182\":1,\"198\":1}}],[\"hostprovider\",{\"1\":{\"74\":3}}],[\"hostprovider是你自己的服务\",{\"1\":{\"74\":1}}],[\"homecontroller\",{\"1\":{\"149\":1,\"150\":1}}],[\"home\",{\"1\":{\"1\":1}}],[\"html\",{\"1\":{\"71\":1,\"116\":2}}],[\"http接口可以继承其它http接口吗\",{\"0\":{\"127\":1}}],[\"http接口代理类实例就有dispose方法\",{\"1\":{\"126\":1}}],[\"http请求要么有响应要么抛出异常\",{\"1\":{\"129\":1}}],[\"http请求\",{\"0\":{\"124\":1}}],[\"httpapiexception\",{\"1\":{\"194\":1,\"195\":1}}],[\"httpapiconfig\",{\"1\":{\"192\":2}}],[\"httpapiconfig有个useparameterpropertyvalidate属性\",{\"1\":{\"171\":1}}],[\"httpapiclient\",{\"1\":{\"135\":1}}],[\"httpapifactory<imywebapi>\",{\"1\":{\"150\":1}}],[\"httpapi\",{\"1\":{\"92\":1,\"124\":2,\"152\":2,\"160\":1,\"174\":1,\"198\":1,\"201\":1,\"202\":1}}],[\"httpapioptions\",{\"1\":{\"60\":1,\"89\":1}}],[\"httprequestmessage\",{\"1\":{\"100\":3}}],[\"httprequestexception\",{\"1\":{\"63\":8}}],[\"httpresponsemessage\",{\"1\":{\"86\":1,\"100\":2,\"163\":1}}],[\"httpstatusfailureexception\",{\"1\":{\"194\":1,\"195\":1}}],[\"https\",{\"1\":{\"82\":1,\"114\":1,\"121\":1,\"157\":1,\"158\":1}}],[\"httpmessagehandler\",{\"0\":{\"80\":1},\"1\":{\"83\":2}}],[\"httpversionpolicy\",{\"1\":{\"79\":1}}],[\"httpversion\",{\"1\":{\"79\":1}}],[\"httpcontext\",{\"1\":{\"74\":2,\"76\":2,\"85\":2,\"89\":2,\"99\":1}}],[\"httpcontentattribute\",{\"1\":{\"85\":1}}],[\"httpcontent\",{\"0\":{\"53\":1}}],[\"httpclient没有提供相关的同步请求方法\",{\"1\":{\"133\":1}}],[\"httpclienthandler\",{\"1\":{\"81\":1,\"82\":1,\"83\":1}}],[\"httpclient\",{\"0\":{\"79\":1},\"1\":{\"39\":1,\"79\":5,\"152\":1}}],[\"httpdelete\",{\"1\":{\"24\":1,\"157\":1,\"158\":1}}],[\"httpdeleteattribute\",{\"0\":{\"24\":1}}],[\"httppatch\",{\"1\":{\"25\":1,\"56\":1,\"174\":1,\"175\":1}}],[\"httppatchattribute\",{\"0\":{\"25\":1}}],[\"httpput\",{\"1\":{\"23\":1,\"85\":1,\"157\":1,\"158\":1,\"171\":1,\"172\":1,\"177\":1}}],[\"httpputattribute\",{\"0\":{\"23\":1}}],[\"httppostattribute\",{\"0\":{\"22\":1}}],[\"httppost\",{\"1\":{\"7\":4,\"22\":1,\"28\":1,\"29\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"52\":1,\"53\":3,\"55\":1,\"59\":1,\"66\":1,\"74\":1,\"86\":1,\"89\":1,\"102\":1,\"108\":1,\"124\":1,\"157\":3,\"158\":3,\"177\":1,\"178\":3,\"179\":3,\"180\":2}}],[\"httpgetattribute\",{\"0\":{\"21\":1}}],[\"httpget\",{\"1\":{\"7\":1,\"21\":1,\"26\":1,\"27\":1,\"31\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"47\":1,\"49\":1,\"51\":1,\"58\":1,\"64\":1,\"68\":1,\"73\":1,\"74\":1,\"77\":1,\"101\":2,\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"157\":3,\"158\":3,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"170\":1,\"183\":1,\"184\":2,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"198\":1}}],[\"http\",{\"0\":{\"81\":1},\"1\":{\"7\":1,\"8\":3,\"20\":2,\"62\":12,\"81\":2,\"82\":1,\"83\":1,\"86\":1,\"95\":1,\"97\":1,\"100\":1,\"101\":2,\"102\":1,\"110\":1,\"111\":1,\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"157\":1,\"158\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"183\":1,\"198\":2,\"202\":1}}],[\"httphostbaseattribute\",{\"0\":{\"74\":1},\"1\":{\"74\":1}}],[\"httphostattribute\",{\"0\":{\"20\":1}}],[\"httphost\",{\"0\":{\"72\":1},\"1\":{\"7\":1,\"8\":3,\"20\":3,\"81\":1,\"82\":1,\"83\":1,\"86\":1,\"110\":1,\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"157\":1,\"158\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"192\":2}}],[\"subscribe\",{\"1\":{\"196\":1}}],[\"summary>\",{\"1\":{\"74\":1,\"86\":1,\"99\":1,\"100\":2,\"108\":1,\"157\":9,\"158\":9,\"202\":7}}],[\"ss\",{\"1\":{\"168\":1}}],[\"ssv\",{\"1\":{\"65\":2}}],[\"singleinstance\",{\"1\":{\"150\":1}}],[\"signfilter\",{\"1\":{\"76\":1,\"199\":2}}],[\"signfilterattribute\",{\"1\":{\"76\":1}}],[\"signvalue\",{\"1\":{\"76\":1}}],[\"signservice\",{\"1\":{\"76\":2}}],[\"sign\",{\"1\":{\"76\":6,\"199\":3}}],[\"scheme\",{\"1\":{\"182\":1}}],[\"screen\",{\"1\":{\"115\":1}}],[\"scope\",{\"1\":{\"10\":2}}],[\"swagger工具生成客户端代码\",{\"1\":{\"156\":1}}],[\"swagger\",{\"0\":{\"112\":1},\"1\":{\"112\":1,\"114\":2,\"156\":1,\"157\":2,\"158\":2}}],[\"save\",{\"1\":{\"89\":1}}],[\"s\",{\"1\":{\"86\":2,\"100\":1,\"103\":2}}],[\"sg生成器配置\",{\"1\":{\"78\":1}}],[\"system\",{\"1\":{\"78\":1,\"84\":2,\"89\":1,\"157\":6,\"158\":7}}],[\"sb\",{\"1\":{\"69\":1,\"70\":1}}],[\"something\",{\"1\":{\"198\":2,\"201\":2}}],[\"something=somevalue\",{\"1\":{\"198\":1}}],[\"something=\",{\"1\":{\"198\":1}}],[\"somepath\",{\"1\":{\"89\":1}}],[\"somevalue\",{\"1\":{\"69\":1,\"70\":1,\"198\":1}}],[\"sortedformcontentattribute\",{\"1\":{\"77\":1}}],[\"sortedformcontent\",{\"1\":{\"77\":1}}],[\"socket连接层异常\",{\"1\":{\"63\":1}}],[\"socketexception\",{\"1\":{\"63\":2}}],[\"sourcegenerator\",{\"1\":{\"6\":1,\"113\":1,\"114\":1,\"142\":1}}],[\"senior\",{\"0\":{\"209\":1,\"212\":1}}],[\"session\",{\"1\":{\"158\":1}}],[\"secret\",{\"1\":{\"97\":1,\"101\":1,\"103\":1,\"104\":1,\"202\":6}}],[\"server<\",{\"1\":{\"157\":1}}],[\"service\",{\"1\":{\"105\":1}}],[\"servicename\",{\"1\":{\"74\":5}}],[\"servicenamehostattribute\",{\"1\":{\"74\":2}}],[\"servicenamehost\",{\"1\":{\"74\":1}}],[\"serviceprovider\",{\"1\":{\"10\":1,\"74\":1,\"76\":1,\"104\":6,\"152\":1}}],[\"serviceproviderextensions\",{\"1\":{\"8\":1}}],[\"servicecollection\",{\"1\":{\"8\":2}}],[\"servicescopefactory\",{\"1\":{\"10\":5}}],[\"services\",{\"1\":{\"8\":7,\"9\":2,\"60\":2,\"66\":1,\"70\":1,\"78\":1,\"79\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":2,\"88\":1,\"97\":1,\"100\":2,\"101\":1,\"103\":1,\"104\":1,\"107\":1,\"149\":3}}],[\"serialize\",{\"1\":{\"85\":1,\"192\":1}}],[\"serializer\",{\"1\":{\"85\":2}}],[\"serializetokeyvalues\",{\"1\":{\"77\":2}}],[\"serialization进行序列化和反序列化\",{\"1\":{\"17\":1}}],[\"setresolver\",{\"1\":{\"150\":1}}],[\"setresultasync\",{\"1\":{\"85\":1}}],[\"setasync\",{\"1\":{\"88\":1}}],[\"sethttpcontentasync\",{\"1\":{\"85\":1}}],[\"set\",{\"1\":{\"7\":2,\"41\":2,\"59\":2,\"69\":2,\"70\":4,\"85\":1,\"89\":4,\"150\":1,\"168\":5,\"171\":2,\"187\":2,\"188\":2,\"202\":3}}],[\"store<\",{\"1\":{\"157\":2}}],[\"store\",{\"1\":{\"157\":2}}],[\"stddev\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"stream\",{\"1\":{\"53\":1,\"85\":6,\"89\":3}}],[\"streamcontent\",{\"1\":{\"53\":1,\"85\":1,\"180\":1}}],[\"stream和httpresponsemessage\",{\"1\":{\"15\":1}}],[\"stringlength\",{\"1\":{\"59\":2,\"170\":1,\"171\":2}}],[\"stringcontent\",{\"1\":{\"53\":1}}],[\"string>\",{\"1\":{\"41\":1}}],[\"string\",{\"1\":{\"7\":5,\"8\":1,\"20\":1,\"21\":1,\"25\":1,\"26\":1,\"27\":1,\"31\":1,\"33\":1,\"35\":1,\"39\":1,\"40\":2,\"41\":4,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"49\":1,\"51\":1,\"56\":1,\"58\":1,\"59\":2,\"64\":1,\"68\":1,\"69\":3,\"70\":2,\"73\":2,\"74\":4,\"85\":3,\"88\":3,\"89\":1,\"102\":2,\"104\":1,\"110\":1,\"124\":1,\"149\":1,\"150\":1,\"152\":1,\"157\":4,\"158\":5,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"165\":1,\"167\":1,\"168\":3,\"170\":1,\"171\":2,\"174\":1,\"175\":1,\"178\":2,\"179\":2,\"183\":1,\"184\":3,\"186\":2,\"187\":2,\"188\":3,\"189\":1,\"190\":1,\"192\":2,\"198\":2,\"202\":7}}],[\"start\",{\"1\":{\"150\":1}}],[\"startup\",{\"1\":{\"8\":1,\"149\":1}}],[\"stargazers\",{\"1\":{\"117\":1}}],[\"state\",{\"1\":{\"124\":1}}],[\"statusexception\",{\"1\":{\"63\":1}}],[\"status\",{\"1\":{\"18\":1,\"157\":6}}],[\"static\",{\"1\":{\"8\":1,\"88\":1,\"89\":1}}],[\"standard2\",{\"1\":{\"5\":1,\"119\":1,\"120\":1}}],[\"onendrequestasync\",{\"1\":{\"201\":1}}],[\"onbeginrequestasync\",{\"1\":{\"199\":2,\"201\":1}}],[\"onresponseasync\",{\"1\":{\"84\":1}}],[\"onrequestasync\",{\"1\":{\"74\":1,\"76\":1,\"84\":1,\"89\":1}}],[\"out\",{\"1\":{\"158\":1}}],[\"outputtarget\",{\"1\":{\"198\":2}}],[\"output\",{\"1\":{\"114\":1}}],[\"obsolete\",{\"1\":{\"157\":1}}],[\"object<\",{\"1\":{\"158\":4}}],[\"object\",{\"1\":{\"157\":2}}],[\"o=>\",{\"1\":{\"149\":1}}],[\"over\",{\"1\":{\"117\":1}}],[\"override\",{\"1\":{\"8\":2,\"74\":1,\"76\":1,\"77\":1,\"85\":2,\"86\":1,\"87\":1,\"99\":1,\"100\":1,\"104\":2,\"199\":1,\"202\":2}}],[\"operations\",{\"1\":{\"158\":1}}],[\"operation<\",{\"1\":{\"157\":4,\"158\":6}}],[\"openapidocument\",{\"1\":{\"116\":2}}],[\"openapi的json本地文件路径或远程uri地址\",{\"1\":{\"115\":1}}],[\"openapi=openapi\",{\"1\":{\"115\":1}}],[\"openapi\",{\"1\":{\"6\":2,\"65\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"142\":2}}],[\"options\",{\"1\":{\"78\":2,\"89\":2,\"105\":2,\"192\":2}}],[\"orderby\",{\"1\":{\"77\":1}}],[\"of\",{\"1\":{\"18\":1,\"157\":5,\"158\":4,\"163\":2}}],[\"o\",{\"1\":{\"8\":15,\"9\":4,\"60\":3,\"70\":2,\"81\":2,\"82\":2,\"83\":2,\"84\":2,\"97\":4,\"101\":6,\"107\":2,\"114\":1,\"115\":1,\"149\":1}}],[\"oauth授权的token过滤器\",{\"1\":{\"202\":1}}],[\"oauth\",{\"0\":{\"96\":1},\"1\":{\"102\":1}}],[\"oauthtoken\",{\"0\":{\"99\":1},\"1\":{\"99\":1,\"101\":1}}],[\"oauthtokenhandler\",{\"0\":{\"95\":1,\"100\":1},\"1\":{\"100\":6}}],[\"oauthtokenattribute\",{\"0\":{\"94\":1},\"1\":{\"95\":1,\"99\":5}}],[\"oauth2\",{\"1\":{\"6\":1,\"142\":1}}],[\"oauths\",{\"0\":{\"90\":1},\"1\":{\"6\":1,\"90\":1,\"142\":1}}],[\"的json文本\",{\"1\":{\"192\":2}}],[\"的声明式代码\",{\"1\":{\"116\":1}}],[\"的文本代码提取\",{\"1\":{\"116\":1}}],[\"的接口定义代码文件输出到当前目录的\",{\"1\":{\"114\":1}}],[\"的接口定义代码文件\",{\"1\":{\"112\":1}}],[\"的接口如下\",{\"1\":{\"102\":1}}],[\"的本地或远程文档解析生成\",{\"1\":{\"112\":1}}],[\"的选项\",{\"0\":{\"105\":1}}],[\"的实现逻辑\",{\"1\":{\"103\":1}}],[\"的实例\",{\"1\":{\"69\":1}}],[\"的委托作为自定义\",{\"1\":{\"103\":1}}],[\"的强项是支持在一个请求内部里进行多次尝试\",{\"1\":{\"100\":1}}],[\"的应用\",{\"0\":{\"98\":1}}],[\"的应用特性\",{\"1\":{\"94\":1}}],[\"的过期后的头一次请求里触发重新请求或刷新\",{\"1\":{\"93\":1}}],[\"的创建工厂\",{\"1\":{\"92\":1}}],[\"的获取\",{\"1\":{\"90\":1}}],[\"的任意接口\",{\"1\":{\"86\":1}}],[\"的生命周期\",{\"1\":{\"83\":1}}],[\"的内容\",{\"1\":{\"79\":1}}],[\"的内部异常为实际具体异常\",{\"1\":{\"63\":1}}],[\"的配置\",{\"0\":{\"79\":1,\"80\":1}}],[\"的全局配置中添加\",{\"1\":{\"78\":1}}],[\"的子来实现自己的\",{\"1\":{\"76\":1}}],[\"的子类特性来验证请求参数值和响应结果\",{\"1\":{\"57\":1}}],[\"的子类型\",{\"0\":{\"53\":1,\"54\":1}}],[\"的字段多层嵌套\",{\"0\":{\"70\":1}}],[\"的某个字段为\",{\"0\":{\"69\":1}}],[\"的条件可以为捕获到某种\",{\"1\":{\"64\":1}}],[\"的扩展\",{\"1\":{\"64\":1}}],[\"的结尾的第一种方式\",{\"1\":{\"62\":1}}],[\"的两个属性值都得到验证\",{\"1\":{\"59\":1}}],[\"的类型\",{\"1\":{\"54\":1}}],[\"的匹配性\",{\"1\":{\"14\":1}}],[\"的\",{\"0\":{\"96\":1},\"1\":{\"6\":1,\"14\":1,\"39\":1,\"63\":1,\"65\":1,\"76\":1,\"85\":1,\"86\":1,\"89\":1,\"99\":1,\"100\":3,\"102\":1,\"105\":3,\"106\":1,\"112\":1,\"116\":1,\"142\":1}}],[\"管理扩展包\",{\"1\":{\"6\":1,\"142\":1}}],[\"ticks\",{\"1\":{\"199\":1}}],[\"time\",{\"1\":{\"117\":1}}],[\"timespan\",{\"1\":{\"79\":1,\"88\":1,\"152\":1,\"195\":1,\"196\":1,\"198\":1}}],[\"timeout\",{\"1\":{\"27\":1,\"39\":3,\"79\":1,\"152\":1,\"198\":1}}],[\"timeoutattribute\",{\"0\":{\"27\":1,\"39\":1}}],[\"testing\",{\"1\":{\"158\":1}}],[\"text<\",{\"1\":{\"158\":1}}],[\"text\",{\"1\":{\"16\":1,\"42\":2,\"53\":1,\"71\":2,\"78\":1}}],[\"tag>\",{\"1\":{\"182\":1}}],[\"tags\",{\"1\":{\"157\":3}}],[\"tasks\",{\"1\":{\"157\":1,\"158\":1}}],[\"task<string>\",{\"1\":{\"198\":1}}],[\"task<specialresultclass>\",{\"1\":{\"14\":1}}],[\"task<actionresult>\",{\"1\":{\"150\":1}}],[\"task<tokenresult>\",{\"1\":{\"102\":1,\"104\":2,\"202\":2}}],[\"task<responsecacheresult>\",{\"1\":{\"88\":1}}],[\"task<userinfo>\",{\"1\":{\"25\":1,\"56\":1,\"149\":1,\"174\":1,\"175\":1}}],[\"task<user>\",{\"1\":{\"7\":5,\"20\":2,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"47\":2,\"49\":1,\"51\":1,\"52\":1,\"55\":1,\"58\":1,\"59\":1,\"66\":1,\"74\":2,\"85\":1}}],[\"task<int>\",{\"1\":{\"18\":1}}],[\"task<xmlresultclass>\",{\"1\":{\"17\":1}}],[\"task<jsonresultclass>\",{\"1\":{\"16\":1}}],[\"task<httpresponsemessage>\",{\"1\":{\"12\":1,\"15\":1,\"77\":1,\"86\":2,\"89\":1}}],[\"task\",{\"1\":{\"10\":2,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"53\":3,\"69\":1,\"74\":1,\"76\":2,\"84\":2,\"85\":3,\"87\":2,\"88\":1,\"89\":1,\"101\":2,\"108\":1,\"192\":1,\"199\":1,\"201\":4}}],[\"tp\",{\"1\":{\"100\":2}}],[\"that\",{\"1\":{\"157\":4,\"158\":3}}],[\"the\",{\"1\":{\"157\":6,\"158\":1}}],[\"threading\",{\"1\":{\"157\":2,\"158\":2}}],[\"throw\",{\"1\":{\"84\":2,\"88\":2,\"202\":3}}],[\"this\",{\"1\":{\"10\":4,\"74\":2,\"85\":1,\"86\":2,\"88\":1,\"89\":2,\"104\":1,\"115\":1,\"150\":1,\"198\":1,\"202\":9}}],[\"tsv\",{\"1\":{\"65\":2}}],[\"tracefilterattribute\",{\"0\":{\"198\":1}}],[\"tracefilter\",{\"1\":{\"157\":2,\"158\":1,\"198\":2,\"200\":1}}],[\"try\",{\"0\":{\"194\":1},\"1\":{\"63\":1,\"194\":1,\"195\":1}}],[\"true\",{\"1\":{\"1\":1,\"13\":2,\"14\":9,\"81\":1,\"152\":1}}],[\"type可能不是期望的application\",{\"1\":{\"164\":1}}],[\"type为application\",{\"1\":{\"163\":1,\"173\":1}}],[\"typeof\",{\"1\":{\"78\":2}}],[\"type\",{\"0\":{\"71\":1},\"1\":{\"13\":2,\"14\":1,\"18\":1,\"71\":3,\"85\":1,\"111\":1}}],[\"tostring\",{\"1\":{\"199\":1}}],[\"toobservable\",{\"1\":{\"196\":1}}],[\"tools\",{\"1\":{\"156\":1}}],[\"toolchain=inprocessemittoolchain\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"tool\",{\"1\":{\"6\":1,\"113\":1,\"142\":1}}],[\"to\",{\"1\":{\"157\":14,\"158\":3}}],[\"touri\",{\"1\":{\"100\":1}}],[\"toarray\",{\"1\":{\"89\":1}}],[\"tobase64string\",{\"1\":{\"89\":1}}],[\"token<\",{\"1\":{\"202\":1}}],[\"tokenclient\",{\"1\":{\"202\":6}}],[\"tokenendpoint\",{\"1\":{\"202\":9}}],[\"tokenfilter\",{\"1\":{\"202\":5}}],[\"token应用的http消息处理程序\",{\"1\":{\"100\":1}}],[\"tokenresult\",{\"1\":{\"99\":3,\"100\":5}}],[\"tokens\",{\"1\":{\"97\":1,\"101\":1}}],[\"tokenprovider\",{\"0\":{\"97\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1},\"1\":{\"100\":3,\"101\":2,\"102\":1,\"103\":2,\"104\":1,\"105\":2}}],[\"token\",{\"0\":{\"90\":1,\"98\":1},\"1\":{\"6\":1,\"7\":5,\"51\":1,\"90\":1,\"93\":4,\"94\":3,\"95\":2,\"99\":6,\"100\":10,\"102\":3,\"103\":1,\"104\":1,\"110\":1,\"142\":1,\"165\":1,\"202\":3}}],[\"与全新的依赖注入\",{\"1\":{\"119\":1}}],[\"与\",{\"1\":{\"6\":1,\"65\":1,\"100\":1,\"105\":1,\"142\":1}}],[\"描述\",{\"1\":{\"6\":1,\"123\":1,\"142\":1}}],[\"安装工具\",{\"0\":{\"113\":1}}],[\"安装\",{\"0\":{\"6\":1}}],[\"nickname\",{\"1\":{\"179\":2}}],[\"nativeaot\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"namespace=namespace\",{\"1\":{\"115\":1}}],[\"namespace\",{\"1\":{\"115\":1,\"157\":1,\"158\":1}}],[\"name=laojiu>\",{\"1\":{\"167\":1}}],[\"name=\",{\"1\":{\"100\":3,\"157\":13,\"158\":9,\"202\":4}}],[\"name=filenamevalue\",{\"1\":{\"68\":1}}],[\"nameof\",{\"1\":{\"88\":1,\"202\":3}}],[\"name\",{\"1\":{\"68\":2,\"69\":2,\"70\":2,\"88\":1,\"105\":3,\"110\":1,\"157\":3,\"158\":4,\"167\":1,\"192\":1}}],[\"nswag\",{\"1\":{\"116\":1}}],[\"n\",{\"1\":{\"115\":1}}],[\"not\",{\"1\":{\"203\":1}}],[\"notimplementedexception\",{\"1\":{\"84\":2,\"88\":2}}],[\"none表示永不取消\",{\"1\":{\"165\":1}}],[\"nonereturnattribute\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"nonereturn\",{\"1\":{\"14\":1}}],[\"nongeneric\",{\"1\":{\"85\":2}}],[\"now\",{\"1\":{\"76\":1,\"199\":1}}],[\"nullvaluehandling\",{\"1\":{\"107\":2}}],[\"null\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"85\":1,\"152\":6}}],[\"nuget包\",{\"0\":{\"123\":1}}],[\"nuget\",{\"0\":{\"6\":1,\"142\":1},\"1\":{\"6\":1,\"123\":1,\"142\":1}}],[\"need\",{\"1\":{\"157\":1,\"158\":1}}],[\"needs\",{\"1\":{\"157\":3,\"158\":2}}],[\"new\",{\"1\":{\"8\":7,\"25\":1,\"56\":1,\"62\":1,\"74\":1,\"81\":5,\"82\":2,\"83\":3,\"84\":3,\"85\":4,\"86\":2,\"88\":2,\"89\":3,\"97\":1,\"100\":3,\"101\":1,\"124\":2,\"149\":1,\"150\":4,\"152\":1,\"157\":1,\"174\":1,\"201\":1,\"202\":6}}],[\"newtonsoft\",{\"1\":{\"6\":1,\"106\":1,\"142\":1}}],[\"newtonsoftjson\",{\"1\":{\"6\":1,\"106\":1,\"142\":1}}],[\"networksocket\",{\"1\":{\"198\":1}}],[\"networkcredential\",{\"1\":{\"81\":1}}],[\"net8\",{\"0\":{\"78\":1}}],[\"net\",{\"0\":{\"106\":1,\"149\":1,\"150\":1,\"175\":1},\"1\":{\"5\":1,\"6\":1,\"13\":1,\"69\":1,\"70\":1,\"106\":1,\"112\":1,\"119\":2,\"120\":4,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"152\":1,\"157\":1,\"158\":1}}],[\"net版本支持\",{\"1\":{\"5\":1}}],[\"从而表现为一次正常的请求\",{\"1\":{\"100\":1}}],[\"从redis获取缓存\",{\"1\":{\"88\":1}}],[\"从创建的scope中获取接口实例\",{\"1\":{\"10\":1}}],[\"从\",{\"0\":{\"6\":1}}],[\"1+\",{\"0\":{\"149\":1}}],[\"17\",{\"1\":{\"147\":1}}],[\"19\",{\"1\":{\"147\":2}}],[\"144\",{\"1\":{\"146\":1}}],[\"14\",{\"1\":{\"143\":1,\"146\":1}}],[\"16\",{\"1\":{\"143\":1,\"144\":1,\"145\":2,\"146\":1,\"147\":1}}],[\"1221\",{\"1\":{\"146\":1}}],[\"12\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"123456\",{\"1\":{\"86\":1,\"124\":1}}],[\"1384\",{\"1\":{\"143\":1}}],[\"13\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"1重新设计的新版本\",{\"1\":{\"119\":1}}],[\"1d\",{\"1\":{\"79\":1}}],[\"18\",{\"1\":{\"69\":1,\"70\":1,\"111\":1,\"143\":1}}],[\"10s超时\",{\"1\":{\"198\":1}}],[\"1094\",{\"1\":{\"143\":1}}],[\"1000\",{\"1\":{\"27\":1,\"49\":1,\"198\":1}}],[\"10\",{\"1\":{\"27\":1,\"59\":2,\"143\":1,\"170\":1,\"171\":2,\"198\":3}}],[\"11\",{\"1\":{\"8\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1}}],[\"1\",{\"0\":{\"192\":1,\"194\":1,\"197\":1,\"198\":2,\"199\":1,\"201\":1},\"1\":{\"5\":1,\"14\":5,\"59\":2,\"111\":4,\"143\":3,\"144\":3,\"145\":3,\"146\":3,\"147\":4,\"171\":1,\"198\":2}}],[\"依赖环境\",{\"0\":{\"5\":1}}],[\"你正在浏览的部分是老版本webapiclient\",{\"1\":{\"134\":1}}],[\"你应该将接口返回类型声明为itask<httpresponsefile>\",{\"1\":{\"130\":1}}],[\"你也可以重写\",{\"1\":{\"86\":1}}],[\"你可能不需要使用async\",{\"1\":{\"196\":1}}],[\"你可能会遇到其它的二进制协议响应内容\",{\"1\":{\"85\":1}}],[\"你可以为\",{\"1\":{\"66\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"1\":1}}],[\"你需要声明缺省参数的特定\",{\"1\":{\"14\":1}}],[\"你需要在页面\",{\"1\":{\"1\":1}}],[\"想要使用此布局\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
